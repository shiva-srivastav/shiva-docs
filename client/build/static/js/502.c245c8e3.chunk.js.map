{"version":3,"file":"static/js/502.c245c8e3.chunk.js","mappings":"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","sources":["../node_modules/lodash-es/_createFind.js","../node_modules/lodash-es/findIndex.js","../node_modules/lodash-es/find.js","../node_modules/vscode-jsonrpc/lib/common/ral.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs","../node_modules/lodash-es/map.js","../node_modules/vscode-jsonrpc/lib/common/is.js","../node_modules/vscode-jsonrpc/lib/common/events.js","../node_modules/lodash-es/_baseHas.js","../node_modules/lodash-es/has.js","../node_modules/lodash-es/_baseExtremum.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs","../node_modules/lodash-es/_baseLt.js","../node_modules/lodash-es/toInteger.js","../node_modules/langium/src/syntax-tree.ts","../node_modules/langium/src/utils/stream.ts","../node_modules/langium/src/utils/cst-utils.ts","../node_modules/langium/src/utils/errors.ts","../node_modules/langium/src/languages/generated/ast.ts","../node_modules/langium/src/utils/ast-utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/utils.ts","../node_modules/@chevrotain/regexp-to-ast/src/character-classes.ts","../node_modules/@chevrotain/regexp-to-ast/src/regexp-parser.ts","../node_modules/@chevrotain/regexp-to-ast/src/base-regexp-visitor.ts","../node_modules/langium/src/utils/regexp-utils.ts","../node_modules/langium/src/utils/grammar-utils.ts","../node_modules/@chevrotain/utils/src/to-fast-properties.ts","../node_modules/lodash-es/_baseSlice.js","../node_modules/lodash-es/drop.js","../node_modules/lodash-es/assign.js","../node_modules/lodash-es/pickBy.js","../node_modules/lodash-es/_baseIsRegExp.js","../node_modules/lodash-es/isRegExp.js","../node_modules/@chevrotain/gast/src/model.ts","../node_modules/@chevrotain/gast/src/visitor.ts","../node_modules/lodash-es/_baseSome.js","../node_modules/lodash-es/some.js","../node_modules/lodash-es/includes.js","../node_modules/lodash-es/_arrayEvery.js","../node_modules/lodash-es/_baseEvery.js","../node_modules/lodash-es/every.js","../node_modules/@chevrotain/gast/src/helpers.ts","../node_modules/chevrotain/src/parse/grammar/rest.ts","../node_modules/lodash-es/uniq.js","../node_modules/chevrotain/src/parse/grammar/first.ts","../node_modules/chevrotain/src/parse/constants.ts","../node_modules/chevrotain/src/parse/grammar/follow.ts","../node_modules/lodash-es/negate.js","../node_modules/lodash-es/reject.js","../node_modules/lodash-es/indexOf.js","../node_modules/lodash-es/_baseDifference.js","../node_modules/lodash-es/difference.js","../node_modules/lodash-es/compact.js","../node_modules/lodash-es/head.js","../node_modules/@chevrotain/utils/src/print.ts","../node_modules/chevrotain/src/scan/reg_exp_parser.ts","../node_modules/chevrotain/src/scan/reg_exp.ts","../node_modules/chevrotain/src/scan/lexer.ts","../node_modules/@chevrotain/utils/src/timer.ts","../node_modules/chevrotain/src/scan/tokens.ts","../node_modules/chevrotain/src/scan/lexer_errors_public.ts","../node_modules/chevrotain/src/scan/lexer_public.ts","../node_modules/chevrotain/src/scan/tokens_public.ts","../node_modules/chevrotain/src/parse/errors_public.ts","../node_modules/chevrotain/src/parse/grammar/resolver.ts","../node_modules/lodash-es/flatMap.js","../node_modules/lodash-es/_arrayAggregator.js","../node_modules/lodash-es/_baseAggregator.js","../node_modules/lodash-es/_createAggregator.js","../node_modules/lodash-es/groupBy.js","../node_modules/lodash-es/dropRight.js","../node_modules/chevrotain/src/parse/grammar/interpreter.ts","../node_modules/chevrotain/src/parse/grammar/lookahead.ts","../node_modules/chevrotain/src/parse/grammar/checks.ts","../node_modules/chevrotain/src/parse/grammar/gast/gast_resolver_public.ts","../node_modules/chevrotain/src/parse/exceptions_public.ts","../node_modules/chevrotain/src/parse/parser/traits/recoverable.ts","../node_modules/chevrotain/src/parse/grammar/keys.ts","../node_modules/chevrotain/src/parse/grammar/llk_lookahead.ts","../node_modules/chevrotain/src/parse/parser/traits/looksahead.ts","../node_modules/chevrotain/src/parse/cst/cst.ts","../node_modules/chevrotain/src/lang/lang_extensions.ts","../node_modules/chevrotain/src/parse/cst/cst_visitor.ts","../node_modules/chevrotain/src/parse/parser/traits/gast_recorder.ts","../node_modules/chevrotain/src/parse/parser/parser.ts","../node_modules/chevrotain/src/parse/parser/utils/apply_mixins.ts","../node_modules/chevrotain/src/parse/parser/traits/tree_builder.ts","../node_modules/chevrotain/src/parse/parser/traits/lexer_adapter.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_engine.ts","../node_modules/chevrotain/src/parse/parser/traits/recognizer_api.ts","../node_modules/chevrotain/src/parse/parser/traits/error_handler.ts","../node_modules/chevrotain/src/parse/parser/traits/context_assist.ts","../node_modules/chevrotain/src/parse/parser/traits/perf_tracer.ts","../node_modules/chevrotain-allstar/src/atn.ts","../node_modules/chevrotain-allstar/src/dfa.ts","../node_modules/lodash-es/uniqBy.js","../node_modules/chevrotain-allstar/src/all-star-lookahead.ts","../node_modules/vscode-languageserver-types/lib/esm/main.js","../node_modules/langium/src/parser/cst-node-builder.ts","../node_modules/langium/src/parser/langium-parser.ts","../node_modules/langium/src/parser/parser-builder-base.ts","../node_modules/langium/src/parser/langium-parser-builder.ts","../node_modules/langium/src/parser/token-builder.ts","../node_modules/langium/src/parser/value-converter.ts","../node_modules/langium/src/utils/promise-utils.ts","../node_modules/vscode-languageserver-textdocument/lib/esm/main.js","../LIB/node_modules/path-browserify/index.js","../LIB/webpack/bootstrap","../LIB/webpack/runtime/define property getters","../LIB/webpack/runtime/hasOwnProperty shorthand","../LIB/webpack/runtime/make namespace object","../LIB/src/platform.ts","../LIB/src/uri.ts","../LIB/src/utils.ts","../node_modules/langium/src/utils/uri-utils.ts","../node_modules/langium/src/workspace/documents.ts","../node_modules/langium/src/references/linker.ts","../node_modules/langium/src/references/name-provider.ts","../node_modules/langium/src/references/references.ts","../node_modules/langium/src/utils/collections.ts","../node_modules/langium/src/references/scope-computation.ts","../node_modules/langium/src/references/scope.ts","../node_modules/langium/src/utils/caching.ts","../node_modules/langium/src/references/scope-provider.ts","../node_modules/langium/src/serializer/json-serializer.ts","../node_modules/langium/src/service-registry.ts","../node_modules/langium/src/validation/validation-registry.ts","../node_modules/langium/src/validation/document-validator.ts","../node_modules/langium/src/utils/disposable.ts","../node_modules/langium/src/workspace/ast-descriptions.ts","../node_modules/langium/src/workspace/ast-node-locator.ts","../node_modules/langium/src/workspace/configuration.ts","../node_modules/langium/src/workspace/document-builder.ts","../node_modules/langium/src/workspace/index-manager.ts","../node_modules/langium/src/workspace/workspace-manager.ts","../node_modules/langium/src/parser/lexer.ts","../node_modules/langium/src/documentation/jsdoc.ts","../node_modules/langium/src/documentation/documentation-provider.ts","../node_modules/langium/src/documentation/comment-provider.ts","../node_modules/langium/src/dependency-injection.ts","../node_modules/langium/src/parser/async-parser.ts","../node_modules/langium/src/workspace/workspace-lock.ts","../node_modules/langium/src/serializer/hydrator.ts","../node_modules/langium/src/default-module.ts","../node_modules/langium/src/languages/grammar-config.ts","../node_modules/langium/src/parser/completion-parser-builder.ts","../node_modules/langium/src/workspace/file-system-provider.ts","../node_modules/langium/src/utils/grammar-loader.ts","../node_modules/lodash-es/_trimmedEndIndex.js","../node_modules/lodash-es/_baseTrim.js","../node_modules/lodash-es/toNumber.js","../node_modules/lodash-es/toFinite.js","../node_modules/lodash-es/last.js","../node_modules/@mermaid-js/parser/dist/mermaid-parser.core.mjs","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs","../node_modules/lodash-es/_baseMap.js","../node_modules/lodash-es/min.js","../node_modules/lodash-es/clone.js","../node_modules/vscode-jsonrpc/lib/common/cancellation.js","../node_modules/@mermaid-js/parser/dist/chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs","../node_modules/lodash-es/flatten.js","../node_modules/lodash-es/_baseSet.js","../node_modules/lodash-es/_basePickBy.js","../node_modules/lodash-es/isString.js","../node_modules/lodash-es/defaults.js"],"sourcesContent":["import baseIteratee from './_baseIteratee.js';\nimport isArrayLike from './isArrayLike.js';\nimport keys from './keys.js';\n\n/**\n * Creates a `_.find` or `_.findLast` function.\n *\n * @private\n * @param {Function} findIndexFunc The function to find the collection index.\n * @returns {Function} Returns the new find function.\n */\nfunction createFind(findIndexFunc) {\n  return function(collection, predicate, fromIndex) {\n    var iterable = Object(collection);\n    if (!isArrayLike(collection)) {\n      var iteratee = baseIteratee(predicate, 3);\n      collection = keys(collection);\n      predicate = function(key) { return iteratee(iterable[key], key, iterable); };\n    }\n    var index = findIndexFunc(collection, predicate, fromIndex);\n    return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;\n  };\n}\n\nexport default createFind;\n","import baseFindIndex from './_baseFindIndex.js';\nimport baseIteratee from './_baseIteratee.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * This method is like `_.find` except that it returns the index of the first\n * element `predicate` returns truthy for instead of the element itself.\n *\n * @static\n * @memberOf _\n * @since 1.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the found element, else `-1`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'active': false },\n *   { 'user': 'fred',    'active': false },\n *   { 'user': 'pebbles', 'active': true }\n * ];\n *\n * _.findIndex(users, function(o) { return o.user == 'barney'; });\n * // => 0\n *\n * // The `_.matches` iteratee shorthand.\n * _.findIndex(users, { 'user': 'fred', 'active': false });\n * // => 1\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.findIndex(users, ['active', false]);\n * // => 0\n *\n * // The `_.property` iteratee shorthand.\n * _.findIndex(users, 'active');\n * // => 2\n */\nfunction findIndex(array, predicate, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseFindIndex(array, baseIteratee(predicate, 3), index);\n}\n\nexport default findIndex;\n","import createFind from './_createFind.js';\nimport findIndex from './findIndex.js';\n\n/**\n * Iterates over elements of `collection`, returning the first element\n * `predicate` returns truthy for. The predicate is invoked with three\n * arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to inspect.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {*} Returns the matched element, else `undefined`.\n * @example\n *\n * var users = [\n *   { 'user': 'barney',  'age': 36, 'active': true },\n *   { 'user': 'fred',    'age': 40, 'active': false },\n *   { 'user': 'pebbles', 'age': 1,  'active': true }\n * ];\n *\n * _.find(users, function(o) { return o.age < 40; });\n * // => object for 'barney'\n *\n * // The `_.matches` iteratee shorthand.\n * _.find(users, { 'age': 1, 'active': true });\n * // => object for 'pebbles'\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.find(users, ['active', false]);\n * // => object for 'fred'\n *\n * // The `_.property` iteratee shorthand.\n * _.find(users, 'active');\n * // => object for 'barney'\n */\nvar find = createFind(findIndex);\n\nexport default find;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet _ral;\nfunction RAL() {\n    if (_ral === undefined) {\n        throw new Error(`No runtime abstraction layer installed`);\n    }\n    return _ral;\n}\n(function (RAL) {\n    function install(ral) {\n        if (ral === undefined) {\n            throw new Error(`No runtime abstraction layer provided`);\n        }\n        _ral = ral;\n    }\n    RAL.install = install;\n})(RAL || (RAL = {}));\nexports.default = RAL;\n","var __defProp = Object.defineProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\n\n// src/language/generated/ast.ts\nimport { AbstractAstReflection } from \"langium\";\nvar Statement = \"Statement\";\nvar Architecture = \"Architecture\";\nfunction isArchitecture(item) {\n  return reflection.isInstance(item, Architecture);\n}\n__name(isArchitecture, \"isArchitecture\");\nvar Branch = \"Branch\";\nfunction isBranch(item) {\n  return reflection.isInstance(item, Branch);\n}\n__name(isBranch, \"isBranch\");\nvar Checkout = \"Checkout\";\nvar CherryPicking = \"CherryPicking\";\nvar Commit = \"Commit\";\nfunction isCommit(item) {\n  return reflection.isInstance(item, Commit);\n}\n__name(isCommit, \"isCommit\");\nvar Common = \"Common\";\nfunction isCommon(item) {\n  return reflection.isInstance(item, Common);\n}\n__name(isCommon, \"isCommon\");\nvar GitGraph = \"GitGraph\";\nfunction isGitGraph(item) {\n  return reflection.isInstance(item, GitGraph);\n}\n__name(isGitGraph, \"isGitGraph\");\nvar Info = \"Info\";\nfunction isInfo(item) {\n  return reflection.isInstance(item, Info);\n}\n__name(isInfo, \"isInfo\");\nvar Merge = \"Merge\";\nfunction isMerge(item) {\n  return reflection.isInstance(item, Merge);\n}\n__name(isMerge, \"isMerge\");\nvar Packet = \"Packet\";\nfunction isPacket(item) {\n  return reflection.isInstance(item, Packet);\n}\n__name(isPacket, \"isPacket\");\nvar PacketBlock = \"PacketBlock\";\nfunction isPacketBlock(item) {\n  return reflection.isInstance(item, PacketBlock);\n}\n__name(isPacketBlock, \"isPacketBlock\");\nvar Pie = \"Pie\";\nfunction isPie(item) {\n  return reflection.isInstance(item, Pie);\n}\n__name(isPie, \"isPie\");\nvar PieSection = \"PieSection\";\nfunction isPieSection(item) {\n  return reflection.isInstance(item, PieSection);\n}\n__name(isPieSection, \"isPieSection\");\nvar Direction = \"Direction\";\nvar MermaidAstReflection = class extends AbstractAstReflection {\n  static {\n    __name(this, \"MermaidAstReflection\");\n  }\n  getAllTypes() {\n    return [\"Architecture\", \"Branch\", \"Checkout\", \"CherryPicking\", \"Commit\", \"Common\", \"Direction\", \"Edge\", \"GitGraph\", \"Group\", \"Info\", \"Junction\", \"Merge\", \"Packet\", \"PacketBlock\", \"Pie\", \"PieSection\", \"Service\", \"Statement\"];\n  }\n  computeIsSubtype(subtype, supertype) {\n    switch (subtype) {\n      case Branch:\n      case Checkout:\n      case CherryPicking:\n      case Commit:\n      case Merge: {\n        return this.isSubtype(Statement, supertype);\n      }\n      case Direction: {\n        return this.isSubtype(GitGraph, supertype);\n      }\n      default: {\n        return false;\n      }\n    }\n  }\n  getReferenceType(refInfo) {\n    const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n    switch (referenceId) {\n      default: {\n        throw new Error(`${referenceId} is not a valid reference id.`);\n      }\n    }\n  }\n  getTypeMetaData(type) {\n    switch (type) {\n      case \"Architecture\": {\n        return {\n          name: \"Architecture\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"edges\", defaultValue: [] },\n            { name: \"groups\", defaultValue: [] },\n            { name: \"junctions\", defaultValue: [] },\n            { name: \"services\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Branch\": {\n        return {\n          name: \"Branch\",\n          properties: [\n            { name: \"name\" },\n            { name: \"order\" }\n          ]\n        };\n      }\n      case \"Checkout\": {\n        return {\n          name: \"Checkout\",\n          properties: [\n            { name: \"branch\" }\n          ]\n        };\n      }\n      case \"CherryPicking\": {\n        return {\n          name: \"CherryPicking\",\n          properties: [\n            { name: \"id\" },\n            { name: \"parent\" },\n            { name: \"tags\", defaultValue: [] }\n          ]\n        };\n      }\n      case \"Commit\": {\n        return {\n          name: \"Commit\",\n          properties: [\n            { name: \"id\" },\n            { name: \"message\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Common\": {\n        return {\n          name: \"Common\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Edge\": {\n        return {\n          name: \"Edge\",\n          properties: [\n            { name: \"lhsDir\" },\n            { name: \"lhsGroup\", defaultValue: false },\n            { name: \"lhsId\" },\n            { name: \"lhsInto\", defaultValue: false },\n            { name: \"rhsDir\" },\n            { name: \"rhsGroup\", defaultValue: false },\n            { name: \"rhsId\" },\n            { name: \"rhsInto\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"GitGraph\": {\n        return {\n          name: \"GitGraph\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Group\": {\n        return {\n          name: \"Group\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Info\": {\n        return {\n          name: \"Info\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Junction\": {\n        return {\n          name: \"Junction\",\n          properties: [\n            { name: \"id\" },\n            { name: \"in\" }\n          ]\n        };\n      }\n      case \"Merge\": {\n        return {\n          name: \"Merge\",\n          properties: [\n            { name: \"branch\" },\n            { name: \"id\" },\n            { name: \"tags\", defaultValue: [] },\n            { name: \"type\" }\n          ]\n        };\n      }\n      case \"Packet\": {\n        return {\n          name: \"Packet\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"blocks\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PacketBlock\": {\n        return {\n          name: \"PacketBlock\",\n          properties: [\n            { name: \"end\" },\n            { name: \"label\" },\n            { name: \"start\" }\n          ]\n        };\n      }\n      case \"Pie\": {\n        return {\n          name: \"Pie\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"sections\", defaultValue: [] },\n            { name: \"showData\", defaultValue: false },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"PieSection\": {\n        return {\n          name: \"PieSection\",\n          properties: [\n            { name: \"label\" },\n            { name: \"value\" }\n          ]\n        };\n      }\n      case \"Service\": {\n        return {\n          name: \"Service\",\n          properties: [\n            { name: \"icon\" },\n            { name: \"iconText\" },\n            { name: \"id\" },\n            { name: \"in\" },\n            { name: \"title\" }\n          ]\n        };\n      }\n      case \"Direction\": {\n        return {\n          name: \"Direction\",\n          properties: [\n            { name: \"accDescr\" },\n            { name: \"accTitle\" },\n            { name: \"dir\" },\n            { name: \"statements\", defaultValue: [] },\n            { name: \"title\" }\n          ]\n        };\n      }\n      default: {\n        return {\n          name: type,\n          properties: []\n        };\n      }\n    }\n  }\n};\nvar reflection = new MermaidAstReflection();\n\n// src/language/generated/grammar.ts\nimport { loadGrammarFromJson } from \"langium\";\nvar loadedInfoGrammar;\nvar InfoGrammar = /* @__PURE__ */ __name(() => loadedInfoGrammar ?? (loadedInfoGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Info\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Info\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"info\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"showInfo\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"*\"}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"?\"}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"InfoGrammar\");\nvar loadedPacketGrammar;\nvar PacketGrammar = /* @__PURE__ */ __name(() => loadedPacketGrammar ?? (loadedPacketGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Packet\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Packet\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"packet-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"blocks\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PacketBlock\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"start\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"end\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/0|[1-9][0-9]*/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}`)), \"PacketGrammar\");\nvar loadedPieGrammar;\nvar PieGrammar = /* @__PURE__ */ __name(() => loadedPieGrammar ?? (loadedPieGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Pie\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Pie\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"pie\"},{\"$type\":\"Assignment\",\"feature\":\"showData\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"Keyword\",\"value\":\"showData\"},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"*\"}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"Assignment\",\"feature\":\"sections\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]},\"cardinality\":\"+\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"PieSection\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"label\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"value\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_LABEL\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]+\\\\\"/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"PIE_SECTION_VALUE\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/(0|[1-9][0-9]*)(\\\\\\\\.[0-9]+)?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"PieGrammar\");\nvar loadedArchitectureGrammar;\nvar ArchitectureGrammar = /* @__PURE__ */ __name(() => loadedArchitectureGrammar ?? (loadedArchitectureGrammar = loadGrammarFromJson('{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"Architecture\",\"imports\":[],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"Architecture\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Keyword\",\"value\":\"architecture-beta\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[],\"cardinality\":\"*\"}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"fragment\":true,\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"groups\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"services\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@6\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"junctions\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@7\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"edges\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@8\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"LeftPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\":\"},{\"$type\":\"Assignment\",\"feature\":\"lhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"RightPort\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"rhsDir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@9\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\":\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Arrow\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"lhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"--\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"-\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]}},{\"$type\":\"Keyword\",\"value\":\"-\"}]}]},{\"$type\":\"Assignment\",\"feature\":\"rhsInto\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Group\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"group\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Service\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"service\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"iconText\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"icon\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Junction\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"junction\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"in\"},{\"$type\":\"Assignment\",\"feature\":\"in\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Edge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"lhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"lhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"rhsId\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@10\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"rhsGroup\",\"operator\":\"?=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_DIRECTION\",\"definition\":{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"TerminalAlternatives\",\"elements\":[{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"L\"}},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"R\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"T\"}}]},{\"$type\":\"CharacterRange\",\"left\":{\"$type\":\"Keyword\",\"value\":\"B\"}}]},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ID\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\w]+/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TEXT_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\(\\\\\"[^\\\\\"]+\\\\\"\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_ICON\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\([\\\\\\\\w-:]+\\\\\\\\)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARCH_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\[[\\\\\\\\w ]+\\\\\\\\]/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_GROUP\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\{group\\\\\\\\}/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ARROW_INTO\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/<|>/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@21\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"types\":[],\"usedGrammars\":[]}')), \"ArchitectureGrammar\");\nvar loadedGitGraphGrammar;\nvar GitGraphGrammar = /* @__PURE__ */ __name(() => loadedGitGraphGrammar ?? (loadedGitGraphGrammar = loadGrammarFromJson(`{\"$type\":\"Grammar\",\"isDeclared\":true,\"name\":\"GitGraph\",\"interfaces\":[{\"$type\":\"Interface\",\"name\":\"Common\",\"attributes\":[{\"$type\":\"TypeAttribute\",\"name\":\"accDescr\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"accTitle\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}},{\"$type\":\"TypeAttribute\",\"name\":\"title\",\"isOptional\":true,\"type\":{\"$type\":\"SimpleType\",\"primitiveType\":\"string\"}}],\"superTypes\":[]}],\"rules\":[{\"$type\":\"ParserRule\",\"name\":\"TitleAndAccessibilities\",\"fragment\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Assignment\",\"feature\":\"accDescr\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@3\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"accTitle\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@4\"},\"arguments\":[]}},{\"$type\":\"Assignment\",\"feature\":\"title\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@5\"},\"arguments\":[]}}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}],\"cardinality\":\"+\"},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"EOL\",\"fragment\":true,\"dataType\":\"string\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"+\"},{\"$type\":\"EndOfFile\"}]},\"definesHiddenTokens\":false,\"entry\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"NEWLINE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\r?\\\\\\\\n/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_DESCR\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accDescr(?:[\\\\\\\\t ]*:([^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)|\\\\\\\\s*{([^}]*)})/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ACC_TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*accTitle[\\\\\\\\t ]*:(?:[^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[^\\\\\\\\n\\\\\\\\r]*)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"TITLE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*title(?:[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*?(?=%%)|[\\\\\\\\t ][^\\\\\\\\n\\\\\\\\r]*|)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"WHITESPACE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]+/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"YAML\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/---[\\\\\\\\t ]*\\\\\\\\r?\\\\\\\\n(?:[\\\\\\\\S\\\\\\\\s]*?\\\\\\\\r?\\\\\\\\n)?---(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"DIRECTIVE\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%{[\\\\\\\\S\\\\\\\\s]*?}%%(?:\\\\\\\\r?\\\\\\\\n|(?!\\\\\\\\S))/\"},\"fragment\":false},{\"$type\":\"TerminalRule\",\"hidden\":true,\"name\":\"SINGLE_LINE_COMMENT\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[\\\\\\\\t ]*%%[^\\\\\\\\n\\\\\\\\r]*/\"},\"fragment\":false},{\"$type\":\"ParserRule\",\"name\":\"GitGraph\",\"entry\":true,\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"Keyword\",\"value\":\":\"}]},{\"$type\":\"Keyword\",\"value\":\"gitGraph:\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"gitGraph\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@12\"},\"arguments\":[]},{\"$type\":\"Keyword\",\"value\":\":\"}]}]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[],\"cardinality\":\"*\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@0\"},\"arguments\":[]},{\"$type\":\"Assignment\",\"feature\":\"statements\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@11\"},\"arguments\":[]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@2\"},\"arguments\":[]}],\"cardinality\":\"*\"}]}]},\"definesHiddenTokens\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Statement\",\"definition\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@13\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@14\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@15\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@16\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@17\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Direction\",\"definition\":{\"$type\":\"Assignment\",\"feature\":\"dir\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"LR\"},{\"$type\":\"Keyword\",\"value\":\"TB\"},{\"$type\":\"Keyword\",\"value\":\"BT\"}]}},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Commit\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"commit\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"msg:\",\"cardinality\":\"?\"},{\"$type\":\"Assignment\",\"feature\":\"message\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Branch\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"branch\"},{\"$type\":\"Assignment\",\"feature\":\"name\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"order:\"},{\"$type\":\"Assignment\",\"feature\":\"order\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@18\"},\"arguments\":[]}}],\"cardinality\":\"?\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Merge\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"merge\"},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"type:\"},{\"$type\":\"Assignment\",\"feature\":\"type\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"NORMAL\"},{\"$type\":\"Keyword\",\"value\":\"REVERSE\"},{\"$type\":\"Keyword\",\"value\":\"HIGHLIGHT\"}]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"Checkout\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"checkout\"},{\"$type\":\"Keyword\",\"value\":\"switch\"}]},{\"$type\":\"Assignment\",\"feature\":\"branch\",\"operator\":\"=\",\"terminal\":{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@19\"},\"arguments\":[]},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}]}},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"ParserRule\",\"name\":\"CherryPicking\",\"definition\":{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"cherry-pick\"},{\"$type\":\"Alternatives\",\"elements\":[{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"id:\"},{\"$type\":\"Assignment\",\"feature\":\"id\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"tag:\"},{\"$type\":\"Assignment\",\"feature\":\"tags\",\"operator\":\"+=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]},{\"$type\":\"Group\",\"elements\":[{\"$type\":\"Keyword\",\"value\":\"parent:\"},{\"$type\":\"Assignment\",\"feature\":\"parent\",\"operator\":\"=\",\"terminal\":{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@20\"},\"arguments\":[]}}]}],\"cardinality\":\"*\"},{\"$type\":\"RuleCall\",\"rule\":{\"$ref\":\"#/rules@1\"},\"arguments\":[]}]},\"definesHiddenTokens\":false,\"entry\":false,\"fragment\":false,\"hiddenTokens\":[],\"parameters\":[],\"wildcard\":false},{\"$type\":\"TerminalRule\",\"name\":\"INT\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"number\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/[0-9]+(?=\\\\\\\\s)/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"ID\",\"type\":{\"$type\":\"ReturnType\",\"name\":\"string\"},\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\\\\w([-\\\\\\\\./\\\\\\\\w]*[-\\\\\\\\w])?/\"},\"fragment\":false,\"hidden\":false},{\"$type\":\"TerminalRule\",\"name\":\"STRING\",\"definition\":{\"$type\":\"RegexToken\",\"regex\":\"/\\\\\"[^\\\\\"]*\\\\\"|'[^']*'/\"},\"fragment\":false,\"hidden\":false}],\"definesHiddenTokens\":false,\"hiddenTokens\":[],\"imports\":[],\"types\":[],\"usedGrammars\":[]}`)), \"GitGraphGrammar\");\n\n// src/language/generated/module.ts\nvar InfoLanguageMetaData = {\n  languageId: \"info\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PacketLanguageMetaData = {\n  languageId: \"packet\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar PieLanguageMetaData = {\n  languageId: \"pie\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar ArchitectureLanguageMetaData = {\n  languageId: \"architecture\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar GitGraphLanguageMetaData = {\n  languageId: \"gitGraph\",\n  fileExtensions: [\".mmd\", \".mermaid\"],\n  caseInsensitive: false\n};\nvar MermaidGeneratedSharedModule = {\n  AstReflection: /* @__PURE__ */ __name(() => new MermaidAstReflection(), \"AstReflection\")\n};\nvar InfoGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => InfoGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => InfoLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PacketGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PacketGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PacketLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar PieGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => PieGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => PieLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar ArchitectureGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => ArchitectureGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => ArchitectureLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\nvar GitGraphGeneratedModule = {\n  Grammar: /* @__PURE__ */ __name(() => GitGraphGrammar(), \"Grammar\"),\n  LanguageMetaData: /* @__PURE__ */ __name(() => GitGraphLanguageMetaData, \"LanguageMetaData\"),\n  parser: {}\n};\n\n// src/language/common/valueConverter.ts\nimport { DefaultValueConverter } from \"langium\";\n\n// src/language/common/matcher.ts\nvar accessibilityDescrRegex = /accDescr(?:[\\t ]*:([^\\n\\r]*)|\\s*{([^}]*)})/;\nvar accessibilityTitleRegex = /accTitle[\\t ]*:([^\\n\\r]*)/;\nvar titleRegex = /title([\\t ][^\\n\\r]*|)/;\n\n// src/language/common/valueConverter.ts\nvar rulesRegexes = {\n  ACC_DESCR: accessibilityDescrRegex,\n  ACC_TITLE: accessibilityTitleRegex,\n  TITLE: titleRegex\n};\nvar AbstractMermaidValueConverter = class extends DefaultValueConverter {\n  static {\n    __name(this, \"AbstractMermaidValueConverter\");\n  }\n  runConverter(rule, input, cstNode) {\n    let value = this.runCommonConverter(rule, input, cstNode);\n    if (value === void 0) {\n      value = this.runCustomConverter(rule, input, cstNode);\n    }\n    if (value === void 0) {\n      return super.runConverter(rule, input, cstNode);\n    }\n    return value;\n  }\n  runCommonConverter(rule, input, _cstNode) {\n    const regex = rulesRegexes[rule.name];\n    if (regex === void 0) {\n      return void 0;\n    }\n    const match = regex.exec(input);\n    if (match === null) {\n      return void 0;\n    }\n    if (match[1] !== void 0) {\n      return match[1].trim().replace(/[\\t ]{2,}/gm, \" \");\n    }\n    if (match[2] !== void 0) {\n      return match[2].replace(/^\\s*/gm, \"\").replace(/\\s+$/gm, \"\").replace(/[\\t ]{2,}/gm, \" \").replace(/[\\n\\r]{2,}/gm, \"\\n\");\n    }\n    return void 0;\n  }\n};\nvar CommonValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"CommonValueConverter\");\n  }\n  runCustomConverter(_rule, _input, _cstNode) {\n    return void 0;\n  }\n};\n\n// src/language/common/tokenBuilder.ts\nimport { DefaultTokenBuilder } from \"langium\";\nvar AbstractMermaidTokenBuilder = class extends DefaultTokenBuilder {\n  static {\n    __name(this, \"AbstractMermaidTokenBuilder\");\n  }\n  constructor(keywords) {\n    super();\n    this.keywords = new Set(keywords);\n  }\n  buildKeywordTokens(rules, terminalTokens, options) {\n    const tokenTypes = super.buildKeywordTokens(rules, terminalTokens, options);\n    tokenTypes.forEach((tokenType) => {\n      if (this.keywords.has(tokenType.name) && tokenType.PATTERN !== void 0) {\n        tokenType.PATTERN = new RegExp(tokenType.PATTERN.toString() + \"(?:(?=%%)|(?!\\\\S))\");\n      }\n    });\n    return tokenTypes;\n  }\n};\nvar CommonTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"CommonTokenBuilder\");\n  }\n};\n\nexport {\n  __name,\n  Statement,\n  Architecture,\n  isArchitecture,\n  Branch,\n  isBranch,\n  Commit,\n  isCommit,\n  isCommon,\n  GitGraph,\n  isGitGraph,\n  Info,\n  isInfo,\n  Merge,\n  isMerge,\n  Packet,\n  isPacket,\n  PacketBlock,\n  isPacketBlock,\n  Pie,\n  isPie,\n  PieSection,\n  isPieSection,\n  MermaidGeneratedSharedModule,\n  InfoGeneratedModule,\n  PacketGeneratedModule,\n  PieGeneratedModule,\n  ArchitectureGeneratedModule,\n  GitGraphGeneratedModule,\n  AbstractMermaidValueConverter,\n  CommonValueConverter,\n  AbstractMermaidTokenBuilder,\n  CommonTokenBuilder\n};\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseMap from './_baseMap.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates an array of values by running each element in `collection` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.\n *\n * The guarded methods are:\n * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,\n * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,\n * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,\n * `template`, `trim`, `trimEnd`, `trimStart`, and `words`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n * @example\n *\n * function square(n) {\n *   return n * n;\n * }\n *\n * _.map([4, 8], square);\n * // => [16, 64]\n *\n * _.map({ 'a': 4, 'b': 8 }, square);\n * // => [16, 64] (iteration order is not guaranteed)\n *\n * var users = [\n *   { 'user': 'barney' },\n *   { 'user': 'fred' }\n * ];\n *\n * // The `_.property` iteratee shorthand.\n * _.map(users, 'user');\n * // => ['barney', 'fred']\n */\nfunction map(collection, iteratee) {\n  var func = isArray(collection) ? arrayMap : baseMap;\n  return func(collection, baseIteratee(iteratee, 3));\n}\n\nexport default map;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.stringArray = exports.array = exports.func = exports.error = exports.number = exports.string = exports.boolean = void 0;\nfunction boolean(value) {\n    return value === true || value === false;\n}\nexports.boolean = boolean;\nfunction string(value) {\n    return typeof value === 'string' || value instanceof String;\n}\nexports.string = string;\nfunction number(value) {\n    return typeof value === 'number' || value instanceof Number;\n}\nexports.number = number;\nfunction error(value) {\n    return value instanceof Error;\n}\nexports.error = error;\nfunction func(value) {\n    return typeof value === 'function';\n}\nexports.func = func;\nfunction array(value) {\n    return Array.isArray(value);\n}\nexports.array = array;\nfunction stringArray(value) {\n    return array(value) && value.every(elem => string(elem));\n}\nexports.stringArray = stringArray;\n","\"use strict\";\n/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Emitter = exports.Event = void 0;\nconst ral_1 = require(\"./ral\");\nvar Event;\n(function (Event) {\n    const _disposable = { dispose() { } };\n    Event.None = function () { return _disposable; };\n})(Event || (exports.Event = Event = {}));\nclass CallbackList {\n    add(callback, context = null, bucket) {\n        if (!this._callbacks) {\n            this._callbacks = [];\n            this._contexts = [];\n        }\n        this._callbacks.push(callback);\n        this._contexts.push(context);\n        if (Array.isArray(bucket)) {\n            bucket.push({ dispose: () => this.remove(callback, context) });\n        }\n    }\n    remove(callback, context = null) {\n        if (!this._callbacks) {\n            return;\n        }\n        let foundCallbackWithDifferentContext = false;\n        for (let i = 0, len = this._callbacks.length; i < len; i++) {\n            if (this._callbacks[i] === callback) {\n                if (this._contexts[i] === context) {\n                    // callback & context match => remove it\n                    this._callbacks.splice(i, 1);\n                    this._contexts.splice(i, 1);\n                    return;\n                }\n                else {\n                    foundCallbackWithDifferentContext = true;\n                }\n            }\n        }\n        if (foundCallbackWithDifferentContext) {\n            throw new Error('When adding a listener with a context, you should remove it with the same context');\n        }\n    }\n    invoke(...args) {\n        if (!this._callbacks) {\n            return [];\n        }\n        const ret = [], callbacks = this._callbacks.slice(0), contexts = this._contexts.slice(0);\n        for (let i = 0, len = callbacks.length; i < len; i++) {\n            try {\n                ret.push(callbacks[i].apply(contexts[i], args));\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                (0, ral_1.default)().console.error(e);\n            }\n        }\n        return ret;\n    }\n    isEmpty() {\n        return !this._callbacks || this._callbacks.length === 0;\n    }\n    dispose() {\n        this._callbacks = undefined;\n        this._contexts = undefined;\n    }\n}\nclass Emitter {\n    constructor(_options) {\n        this._options = _options;\n    }\n    /**\n     * For the public to allow to subscribe\n     * to events from this Emitter\n     */\n    get event() {\n        if (!this._event) {\n            this._event = (listener, thisArgs, disposables) => {\n                if (!this._callbacks) {\n                    this._callbacks = new CallbackList();\n                }\n                if (this._options && this._options.onFirstListenerAdd && this._callbacks.isEmpty()) {\n                    this._options.onFirstListenerAdd(this);\n                }\n                this._callbacks.add(listener, thisArgs);\n                const result = {\n                    dispose: () => {\n                        if (!this._callbacks) {\n                            // disposable is disposed after emitter is disposed.\n                            return;\n                        }\n                        this._callbacks.remove(listener, thisArgs);\n                        result.dispose = Emitter._noop;\n                        if (this._options && this._options.onLastListenerRemove && this._callbacks.isEmpty()) {\n                            this._options.onLastListenerRemove(this);\n                        }\n                    }\n                };\n                if (Array.isArray(disposables)) {\n                    disposables.push(result);\n                }\n                return result;\n            };\n        }\n        return this._event;\n    }\n    /**\n     * To be kept private to fire an event to\n     * subscribers\n     */\n    fire(event) {\n        if (this._callbacks) {\n            this._callbacks.invoke.call(this._callbacks, event);\n        }\n    }\n    dispose() {\n        if (this._callbacks) {\n            this._callbacks.dispose();\n            this._callbacks = undefined;\n        }\n    }\n}\nexports.Emitter = Emitter;\nEmitter._noop = function () { };\n","/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.has` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHas(object, key) {\n  return object != null && hasOwnProperty.call(object, key);\n}\n\nexport default baseHas;\n","import baseHas from './_baseHas.js';\nimport hasPath from './_hasPath.js';\n\n/**\n * Checks if `path` is a direct property of `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = { 'a': { 'b': 2 } };\n * var other = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.has(object, 'a');\n * // => true\n *\n * _.has(object, 'a.b');\n * // => true\n *\n * _.has(object, ['a', 'b']);\n * // => true\n *\n * _.has(other, 'a');\n * // => false\n */\nfunction has(object, path) {\n  return object != null && hasPath(object, path, baseHas);\n}\n\nexport default has;\n","import isSymbol from './isSymbol.js';\n\n/**\n * The base implementation of methods like `_.max` and `_.min` which accepts a\n * `comparator` to determine the extremum value.\n *\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The iteratee invoked per iteration.\n * @param {Function} comparator The comparator used to compare values.\n * @returns {*} Returns the extremum value.\n */\nfunction baseExtremum(array, iteratee, comparator) {\n  var index = -1,\n      length = array.length;\n\n  while (++index < length) {\n    var value = array[index],\n        current = iteratee(value);\n\n    if (current != null && (computed === undefined\n          ? (current === current && !isSymbol(current))\n          : comparator(current, computed)\n        )) {\n      var computed = current,\n          result = value;\n    }\n  }\n  return result;\n}\n\nexport default baseExtremum;\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  ArchitectureGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/architecture/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/architecture/tokenBuilder.ts\nvar ArchitectureTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"ArchitectureTokenBuilder\");\n  }\n  constructor() {\n    super([\"architecture\"]);\n  }\n};\n\n// src/language/architecture/valueConverter.ts\nvar ArchitectureValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"ArchitectureValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name === \"ARCH_ICON\") {\n      return input.replace(/[()]/g, \"\").trim();\n    } else if (rule.name === \"ARCH_TEXT_ICON\") {\n      return input.replace(/[\"()]/g, \"\");\n    } else if (rule.name === \"ARCH_TITLE\") {\n      return input.replace(/[[\\]]/g, \"\").trim();\n    }\n    return void 0;\n  }\n};\n\n// src/language/architecture/module.ts\nvar ArchitectureModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new ArchitectureTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new ArchitectureValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createArchitectureServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Architecture = inject(\n    createDefaultCoreModule({ shared }),\n    ArchitectureGeneratedModule,\n    ArchitectureModule\n  );\n  shared.ServiceRegistry.register(Architecture);\n  return { shared, Architecture };\n}\n__name(createArchitectureServices, \"createArchitectureServices\");\n\nexport {\n  ArchitectureModule,\n  createArchitectureServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  GitGraphGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/gitGraph/module.ts\nimport {\n  inject,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  EmptyFileSystem\n} from \"langium\";\n\n// src/language/gitGraph/tokenBuilder.ts\nvar GitGraphTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"GitGraphTokenBuilder\");\n  }\n  constructor() {\n    super([\"gitGraph\"]);\n  }\n};\n\n// src/language/gitGraph/module.ts\nvar GitGraphModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new GitGraphTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createGitGraphServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const GitGraph = inject(\n    createDefaultCoreModule({ shared }),\n    GitGraphGeneratedModule,\n    GitGraphModule\n  );\n  shared.ServiceRegistry.register(GitGraph);\n  return { shared, GitGraph };\n}\n__name(createGitGraphServices, \"createGitGraphServices\");\n\nexport {\n  GitGraphModule,\n  createGitGraphServices\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  MermaidGeneratedSharedModule,\n  PieGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/pie/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/pie/tokenBuilder.ts\nvar PieTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PieTokenBuilder\");\n  }\n  constructor() {\n    super([\"pie\", \"showData\"]);\n  }\n};\n\n// src/language/pie/valueConverter.ts\nvar PieValueConverter = class extends AbstractMermaidValueConverter {\n  static {\n    __name(this, \"PieValueConverter\");\n  }\n  runCustomConverter(rule, input, _cstNode) {\n    if (rule.name !== \"PIE_SECTION_LABEL\") {\n      return void 0;\n    }\n    return input.replace(/\"/g, \"\").trim();\n  }\n};\n\n// src/language/pie/module.ts\nvar PieModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PieTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new PieValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPieServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Pie = inject(\n    createDefaultCoreModule({ shared }),\n    PieGeneratedModule,\n    PieModule\n  );\n  shared.ServiceRegistry.register(Pie);\n  return { shared, Pie };\n}\n__name(createPieServices, \"createPieServices\");\n\nexport {\n  PieModule,\n  createPieServices\n};\n","/**\n * The base implementation of `_.lt` which doesn't coerce arguments.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if `value` is less than `other`,\n *  else `false`.\n */\nfunction baseLt(value, other) {\n  return value < other;\n}\n\nexport default baseLt;\n","import toFinite from './toFinite.js';\n\n/**\n * Converts `value` to an integer.\n *\n * **Note:** This method is loosely based on\n * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * _.toInteger(3.2);\n * // => 3\n *\n * _.toInteger(Number.MIN_VALUE);\n * // => 0\n *\n * _.toInteger(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toInteger('3.2');\n * // => 3\n */\nfunction toInteger(value) {\n  var result = toFinite(value),\n      remainder = result % 1;\n\n  return result === result ? (remainder ? result - remainder : result) : 0;\n}\n\nexport default toInteger;\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { TokenType } from 'chevrotain';\nimport type { URI } from './utils/uri-utils.js';\nimport type { AbstractElement } from './languages/generated/ast.js';\nimport type { DocumentSegment, LangiumDocument } from './workspace/documents.js';\n\n/**\n * A node in the Abstract Syntax Tree (AST).\n */\nexport interface AstNode {\n    /** Every AST node has a type corresponding to what was specified in the grammar declaration. */\n    readonly $type: string;\n    /** The container node in the AST; every node except the root node has a container. */\n    readonly $container?: AstNode;\n    /** The property of the `$container` node that contains this node. This is either a direct reference or an array. */\n    readonly $containerProperty?: string;\n    /** In case `$containerProperty` is an array, the array index is stored here. */\n    readonly $containerIndex?: number;\n    /** The Concrete Syntax Tree (CST) node of the text range from which this node was parsed. */\n    readonly $cstNode?: CstNode;\n    /** The document containing the AST; only the root node has a direct reference to the document. */\n    readonly $document?: LangiumDocument;\n}\n\nexport function isAstNode(obj: unknown): obj is AstNode {\n    return typeof obj === 'object' && obj !== null && typeof (obj as AstNode).$type === 'string';\n}\n\nexport interface GenericAstNode extends AstNode {\n    [key: string]: unknown\n}\n\ntype SpecificNodeProperties<N extends AstNode> = keyof Omit<N, keyof AstNode | number | symbol>;\n\n/**\n * The property names of a given AST node type.\n */\nexport type Properties<N extends AstNode> = SpecificNodeProperties<N> extends never ? string : SpecificNodeProperties<N>\n\n/**\n * A cross-reference in the AST. Cross-references may or may not be successfully resolved.\n */\nexport interface Reference<T extends AstNode = AstNode> {\n    /**\n     * The target AST node of this reference. Accessing this property may trigger cross-reference\n     * resolution by the `Linker` in case it has not been done yet. If the reference cannot be resolved,\n     * the value is `undefined`.\n     */\n    readonly ref?: T;\n\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    readonly error?: LinkingError;\n    /** The CST node from which the reference was parsed */\n    readonly $refNode?: CstNode;\n    /** The actual text used to look up in the surrounding scope */\n    readonly $refText: string;\n    /** The node description for the AstNode returned by `ref`  */\n    readonly $nodeDescription?: AstNodeDescription;\n}\n\nexport function isReference(obj: unknown): obj is Reference {\n    return typeof obj === 'object' && obj !== null && typeof (obj as Reference).$refText === 'string';\n}\n\nexport type ResolvedReference<T extends AstNode = AstNode> = Reference<T> & {\n    readonly ref: T;\n}\n\n/**\n * A description of an AST node is used when constructing scopes and looking up cross-reference targets.\n */\nexport interface AstNodeDescription {\n    /** The target node; should be present only for local references (linking to the same document). */\n    node?: AstNode;\n    /**\n     * The document segment that represents the range of the name of the AST node.\n     */\n    nameSegment?: DocumentSegment;\n    /**\n     * The document segment that represents the full range of the AST node.\n     */\n    selectionSegment?: DocumentSegment;\n    /** `$type` property value of the AST node */\n    type: string;\n    /** Name of the AST node; this is usually determined by the `NameProvider` service. */\n    name: string;\n    /** URI to the document containing the AST node */\n    documentUri: URI;\n    /** Navigation path inside the document */\n    path: string;\n}\n\nexport function isAstNodeDescription(obj: unknown): obj is AstNodeDescription {\n    return typeof obj === 'object' && obj !== null\n        && typeof (obj as AstNodeDescription).name === 'string'\n        && typeof (obj as AstNodeDescription).type === 'string'\n        && typeof (obj as AstNodeDescription).path === 'string';\n}\n\n/**\n * Information about a cross-reference. This is used when traversing references in an AST or to describe\n * unresolved references.\n */\nexport interface ReferenceInfo {\n    reference: Reference\n    container: AstNode\n    property: string\n    index?: number\n}\n\n/**\n * Used to collect information when the `Linker` service fails to resolve a cross-reference.\n */\nexport interface LinkingError extends ReferenceInfo {\n    message: string;\n    targetDescription?: AstNodeDescription;\n}\n\nexport function isLinkingError(obj: unknown): obj is LinkingError {\n    return typeof obj === 'object' && obj !== null\n        && isAstNode((obj as LinkingError).container)\n        && isReference((obj as LinkingError).reference)\n        && typeof (obj as LinkingError).message === 'string';\n}\n\n/**\n * Service used for generic access to the structure of the AST. This service is shared between\n * all involved languages, so it operates on the superset of types of these languages.\n */\nexport interface AstReflection {\n    getAllTypes(): string[]\n    getAllSubTypes(type: string): string[]\n    getReferenceType(refInfo: ReferenceInfo): string\n    getTypeMetaData(type: string): TypeMetaData\n    isInstance(node: unknown, type: string): boolean\n    isSubtype(subtype: string, supertype: string): boolean\n}\n\n/**\n * An abstract implementation of the {@link AstReflection} interface.\n * Serves to cache subtype computation results to improve performance throughout different parts of Langium.\n */\nexport abstract class AbstractAstReflection implements AstReflection {\n\n    protected subtypes: Record<string, Record<string, boolean | undefined>> = {};\n    protected allSubtypes: Record<string, string[] | undefined> = {};\n\n    abstract getAllTypes(): string[];\n    abstract getReferenceType(refInfo: ReferenceInfo): string;\n    abstract getTypeMetaData(type: string): TypeMetaData;\n    protected abstract computeIsSubtype(subtype: string, supertype: string): boolean;\n\n    isInstance(node: unknown, type: string): boolean {\n        return isAstNode(node) && this.isSubtype(node.$type, type);\n    }\n\n    isSubtype(subtype: string, supertype: string): boolean {\n        if (subtype === supertype) {\n            return true;\n        }\n        let nested = this.subtypes[subtype];\n        if (!nested) {\n            nested = this.subtypes[subtype] = {};\n        }\n        const existing = nested[supertype];\n        if (existing !== undefined) {\n            return existing;\n        } else {\n            const result = this.computeIsSubtype(subtype, supertype);\n            nested[supertype] = result;\n            return result;\n        }\n    }\n\n    getAllSubTypes(type: string): string[] {\n        const existing = this.allSubtypes[type];\n        if (existing) {\n            return existing;\n        } else {\n            const allTypes = this.getAllTypes();\n            const types: string[] = [];\n            for (const possibleSubType of allTypes) {\n                if (this.isSubtype(possibleSubType, type)) {\n                    types.push(possibleSubType);\n                }\n            }\n            this.allSubtypes[type] = types;\n            return types;\n        }\n    }\n}\n\n/**\n * Represents runtime meta data about a meta model type.\n */\nexport interface TypeMetaData {\n    /** The name of this meta model type. Corresponds to the `AstNode.$type` value. */\n    name: string\n    /** A list of properties. They can contain default values for their respective property in the AST. */\n    properties: TypeProperty[]\n}\n\n/**\n * Describes the meta data of a property of an AST node.\n *\n * The optional `defaultValue` indicates that the property is mandatory in the AST node.\n * For example, if an AST node contains an array, but no elements of this array have been parsed, we still expect an empty array instead of `undefined`.\n */\nexport interface TypeProperty {\n    name: string\n    defaultValue?: PropertyType\n}\n\n/**\n * Represents a default value for an AST property.\n */\nexport type PropertyType = number | string | boolean | PropertyType[];\n\n/**\n * A node in the Concrete Syntax Tree (CST).\n */\nexport interface CstNode extends DocumentSegment {\n    /** The container node in the CST */\n    readonly container?: CompositeCstNode;\n    /** @deprecated use `container` instead. */\n    readonly parent?: CompositeCstNode;\n    /** The actual text */\n    readonly text: string;\n    /** The root CST node */\n    readonly root: RootCstNode;\n    /** The grammar element from which this node was parsed */\n    readonly grammarSource: AbstractElement;\n    /** @deprecated use `grammarSource` instead. */\n    readonly feature: AbstractElement;\n    /** The AST node created from this CST node */\n    readonly astNode: AstNode;\n    /** @deprecated use `astNode` instead. */\n    readonly element: AstNode;\n    /** Whether the token is hidden, i.e. not explicitly part of the containing grammar rule */\n    readonly hidden: boolean;\n}\n\n/**\n * A composite CST node contains other nodes, but no directly associated token.\n */\nexport interface CompositeCstNode extends CstNode {\n    readonly content: CstNode[];\n    /** @deprecated use `content` instead. */\n    readonly children: CstNode[];\n}\n\nexport function isCompositeCstNode(node: unknown): node is CompositeCstNode {\n    return typeof node === 'object' && node !== null && Array.isArray((node as CompositeCstNode).content);\n}\n\n/**\n * A leaf CST node corresponds to a token in the input token stream.\n */\nexport interface LeafCstNode extends CstNode {\n    readonly tokenType: TokenType;\n}\n\nexport function isLeafCstNode(node: unknown): node is LeafCstNode {\n    return typeof node === 'object' && node !== null && typeof (node as LeafCstNode).tokenType === 'object';\n}\n\nexport interface RootCstNode extends CompositeCstNode {\n    readonly fullText: string\n}\n\nexport function isRootCstNode(node: unknown): node is RootCstNode {\n    return isCompositeCstNode(node) && typeof (node as RootCstNode).fullText === 'string';\n}\n\n/**\n * Returns a type to have only properties names (!) of a type T whose property value is of a certain type K.\n */\ntype ExtractKeysOfValueType<T, K> = { [I in keyof T]: T[I] extends K ? I : never }[keyof T];\n\n/**\n * Returns the property names (!) of an AstNode that are cross-references.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.property)`.\n */\nexport type CrossReferencesOfAstNodeType<N extends AstNode> = (\n    ExtractKeysOfValueType<N, Reference|undefined>\n    | ExtractKeysOfValueType<N, Array<Reference|undefined>|undefined>\n// eslint-disable-next-line @typescript-eslint/ban-types\n) & {};\n\n/**\n * Represents the enumeration-like type, that lists all AstNode types of your grammar.\n */\nexport type AstTypeList<T> = Record<keyof T, AstNode>;\n\n/**\n * Returns all types that contain cross-references, A is meant to be the interface `XXXAstType` fromm your generated `ast.ts` file.\n * Meant to be used during cross-reference resolution in combination with `assertUnreachable(context.container)`.\n */\nexport type AstNodeTypesWithCrossReferences<A extends AstTypeList<A>> = {\n    [T in keyof A]: CrossReferencesOfAstNodeType<A[T]> extends never ? never : A[T]\n}[keyof A];\n\nexport type Mutable<T> = {\n    -readonly [P in keyof T]: T[P]\n};\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * A stream is a read-only sequence of values. While the contents of an array can be accessed\n * both sequentially and randomly (via index), a stream allows only sequential access.\n *\n * The advantage of this is that a stream can be evaluated lazily, so it does not require\n * to store intermediate values. This can boost performance when a large sequence is\n * processed via filtering, mapping etc. and accessed at most once. However, lazy\n * evaluation means that all processing is repeated when you access the sequence multiple\n * times; in such a case, it may be better to store the resulting sequence into an array.\n */\nexport interface Stream<T> extends Iterable<T> {\n\n    /**\n     * Returns an iterator for this stream. This is the same as calling the `Symbol.iterator` function property.\n     */\n    iterator(): IterableIterator<T>;\n\n    /**\n     * Determines whether this stream contains no elements.\n     */\n    isEmpty(): boolean;\n\n    /**\n     * Determines the number of elements in this stream.\n     */\n    count(): number;\n\n    /**\n     * Collects all elements of this stream into an array.\n     */\n    toArray(): T[];\n\n    /**\n     * Collects all elements of this stream into a Set.\n     */\n    toSet(): Set<T>;\n\n    /**\n     * Collects all elements of this stream into a Map, applying the provided functions to determine keys and values.\n     *\n     * @param keyFn The function to derive map keys. If omitted, the stream elements are used as keys.\n     * @param valueFn The function to derive map values. If omitted, the stream elements are used as values.\n     */\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V>;\n\n    /**\n     * Returns a string representation of a stream.\n     */\n    toString(): string;\n\n    /**\n     * Combines two streams by returning a new stream that yields all elements of this stream and the other stream.\n     *\n     * @param other Stream to be concatenated with this one.\n     */\n    concat<T2>(other: Iterable<T2>): Stream<T | T2>;\n\n    /**\n     * Adds all elements of the stream into a string, separated by the specified separator string.\n     *\n     * @param separator A string used to separate one element of the stream from the next in the resulting string.\n     *        If omitted, the steam elements are separated with a comma.\n     */\n    join(separator?: string): string\n\n    /**\n     * Returns the index of the first occurrence of a value in the stream, or -1 if it is not present.\n     *\n     * @param searchElement The value to locate in the array.\n     * @param fromIndex The stream index at which to begin the search. If fromIndex is omitted, the search\n     *        starts at index 0.\n     */\n    indexOf(searchElement: T, fromIndex?: number): number;\n\n    /**\n     * Determines whether all members of the stream satisfy the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `false`, or until the end\n     *        of the stream.\n     */\n    every<S extends T>(predicate: (value: T) => value is S): this is Stream<S>;\n    every(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Determines whether any member of the stream satisfies the specified test.\n     *\n     * @param predicate This method calls the predicate function for each element in the stream until the\n     *        predicate returns a value which is coercible to the Boolean value `true`, or until the end\n     *        of the stream.\n     */\n    some(predicate: (value: T) => unknown): boolean;\n\n    /**\n     * Performs the specified action for each element in the stream.\n     *\n     * @param callbackfn Function called once for each element in the stream.\n     */\n    forEach(callbackfn: (value: T, index: number) => void): void;\n\n    /**\n     * Returns a stream that yields the results of calling the specified callback function on each element\n     * of the stream. The function is called when the resulting stream elements are actually accessed, so\n     * accessing the resulting stream multiple times means the function is also called multiple times for\n     * each element of the stream.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    map<U>(callbackfn: (value: T) => U): Stream<U>;\n\n    /**\n     * Returns the elements of the stream that meet the condition specified in a callback function.\n     * The function is called when the resulting stream elements are actually accessed, so accessing the\n     * resulting stream multiple times means the function is also called multiple times for each element\n     * of the stream.\n     *\n     * @param predicate Lazily evaluated function checking a condition on stream elements.\n     */\n    filter<S extends T>(predicate: (value: T) => value is S): Stream<S>;\n    filter(predicate: (value: T) => unknown): Stream<T>;\n\n    /**\n     * Returns the elements of the stream that are _non-nullable_, which means they are neither `undefined`\n     * nor `null`.\n     */\n    nonNullable(): Stream<NonNullable<T>>;\n\n    /**\n     * Calls the specified callback function for all elements in the stream. The return value of the\n     * callback function is the accumulated result, and is provided as an argument in the next call to\n     * the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of a stream value.\n     */\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Calls the specified callback function for all elements in the stream, in descending order.\n     * The return value of the callback function is the accumulated result, and is provided as an\n     * argument in the next call to the callback function.\n     *\n     * @param callbackfn This method calls the function once for each element in the stream, providing\n     *        the previous and current values of the reduction.\n     * @param initialValue If specified, `initialValue` is used as the initial value to start the\n     *        accumulation. The first call to the function provides this value as an argument instead\n     *        of an array value.\n     */\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n\n    /**\n     * Returns the value of the first element in the stream that meets the condition, or `undefined`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n\n    /**\n     * Returns the index of the first element in the stream that meets the condition, or `-1`\n     * if there is no such element.\n     *\n     * @param predicate This method calls `predicate` once for each element of the stream, in ascending\n     *        order, until it finds one where `predicate` returns a value which is coercible to the\n     *        Boolean value `true`.\n     */\n    findIndex(predicate: (value: T) => unknown): number;\n\n    /**\n     * Determines whether the stream includes a certain element, returning `true` or `false` as appropriate.\n     *\n     * @param searchElement The element to search for.\n     */\n    includes(searchElement: T): boolean;\n\n    /**\n     * Calls a defined callback function on each element of the stream and then flattens the result into\n     * a new stream. This is identical to a `map` followed by `flat` with depth 1.\n     *\n     * @param callbackfn Lazily evaluated function mapping stream elements.\n     */\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U>;\n\n    /**\n     * Returns a new stream with all sub-stream or sub-array elements concatenated into it recursively up\n     * to the specified depth.\n     *\n     * @param depth The maximum recursion depth. Defaults to 1.\n     */\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D>;\n\n    /**\n     * Returns the first element in the stream, or `undefined` if the stream is empty.\n     */\n    head(): T | undefined;\n\n    /**\n     * Returns a stream that skips the first `skipCount` elements from this stream.\n     *\n     * @param skipCount The number of elements to skip. If this is larger than the number of elements in\n     *        the stream, an empty stream is returned. Defaults to 1.\n     */\n    tail(skipCount?: number): Stream<T>;\n\n    /**\n     * Returns a stream consisting of the elements of this stream, truncated to be no longer than `maxSize`\n     * in length.\n     *\n     * @param maxSize The number of elements the stream should be limited to\n     */\n    limit(maxSize: number): Stream<T>;\n\n    /**\n     * Returns a stream containing only the distinct elements from this stream.\n     * Equality is determined with the same rules as a standard `Set`.\n     *\n     * @param by A function returning the key used to check equality with a previous stream element.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T>;\n\n    /**\n     * Returns a stream that contains all elements that don't exist in the {@link other} iterable.\n     * Equality is determined with the same rules as a standard `Set`.\n     * @param other The elements that should be exluded from this stream.\n     * @param key A function returning the key used to check quality.\n     *        If omitted, the stream elements themselves are used for comparison.\n     */\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T>;\n\n}\n\nexport type FlatStream<T, Depth extends number> = {\n    'done': Stream<T>,\n    'recur': T extends Iterable<infer Content>\n        ? FlatStream<Content, MinusOne<Depth>>\n        : Stream<T>\n}[Depth extends 0 ? 'done' : 'recur'];\n\nexport type MinusOne<N extends number> = [-1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20][N];\n\n/**\n * The default implementation of `Stream` works with two input functions:\n *  - The first function creates the initial state of an iteration.\n *  - The second function gets the current state as argument and returns an `IteratorResult`.\n */\nexport class StreamImpl<S, T> implements Stream<T> {\n    protected readonly startFn: () => S;\n    protected readonly nextFn: (state: S) => IteratorResult<T>;\n\n    constructor(startFn: () => S, nextFn: (state: S) => IteratorResult<T, undefined>) {\n        this.startFn = startFn;\n        this.nextFn = nextFn;\n    }\n\n    iterator(): IterableIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n\n    [Symbol.iterator](): Iterator<T> {\n        return this.iterator();\n    }\n\n    isEmpty(): boolean {\n        const iterator = this.iterator();\n        return Boolean(iterator.next().done);\n    }\n\n    count(): number {\n        const iterator = this.iterator();\n        let count = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            count++;\n            next = iterator.next();\n        }\n        return count;\n    }\n\n    toArray(): T[] {\n        const result: T[] = [];\n        const iterator = this.iterator();\n        let next: IteratorResult<T>;\n        do {\n            next = iterator.next();\n            if (next.value !== undefined) {\n                result.push(next.value);\n            }\n        } while (!next.done);\n        return result;\n    }\n\n    toSet(): Set<T> {\n        return new Set(this);\n    }\n\n    toMap<K = T, V = T>(keyFn?: (e: T) => K, valueFn?: (e: T) => V): Map<K, V> {\n        const entryStream = this.map(element => <[K, V]>[\n            keyFn ? keyFn(element) : element,\n            valueFn ? valueFn(element) : element\n        ]);\n        return new Map(entryStream);\n    }\n\n    toString(): string {\n        return this.join();\n    }\n\n    concat<T2>(other: Iterable<T2>): Stream<T | T2> {\n        const iterator = other[Symbol.iterator]();\n        return new StreamImpl<{ first: S, firstDone: boolean }, T | T2>(\n            () => ({ first: this.startFn(), firstDone: false }),\n            state => {\n                let result: IteratorResult<T | T2>;\n                if (!state.firstDone) {\n                    do {\n                        result = this.nextFn(state.first);\n                        if (!result.done) {\n                            return result;\n                        }\n                    } while (!result.done);\n                    state.firstDone = true;\n                }\n                do {\n                    result = iterator.next();\n                    if (!result.done) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    join(separator = ','): string {\n        const iterator = this.iterator();\n        let value = '';\n        let result: IteratorResult<T>;\n        let addSeparator = false;\n        do {\n            result = iterator.next();\n            if (!result.done) {\n                if (addSeparator) {\n                    value += separator;\n                }\n                value += toString(result.value);\n            }\n            addSeparator = true;\n        } while (!result.done);\n        return value;\n    }\n\n    indexOf(searchElement: T, fromIndex = 0): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (index >= fromIndex && next.value === searchElement) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    // In the following definition the '& this' part in the return type is important\n    // _and_ the order within 'Stream<U> & this' is crucial!\n    // Otherwise Typescript would infer the type of 'this' as 'StreamImpl<S, T> & Stream<U>'\n    // (or '<subClass of StreamImpl<S, T> & Stream<U>') and usages like\n    // ```\n    //  const stream = new StreamImpl(...);\n    //  ... stream.every(<typeGuard>) & stream....\n    // ```\n    // cannot benefit from '<typeGuard>', as Typescript would priorize the signatures\n    // of 'StreamImpl<S, T>' (i.e. those of 'Stream<T>') over those of 'Stream<U>'.\n    // With the order of 'Stream<U> & this' the signatures of 'Stream<U>' get precedence.\n    every<U extends T>(predicate: (value: T) => value is U): this is Stream<U> & this;\n    every(predicate: (value: T) => unknown): boolean;\n    every(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (!predicate(next.value)) {\n                return false;\n            }\n            next = iterator.next();\n        }\n        return true;\n    }\n\n    some(predicate: (value: T) => unknown): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    forEach(callbackfn: (value: T, index: number) => void): void {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            callbackfn(next.value, index);\n            next = iterator.next();\n            index++;\n        }\n    }\n\n    map<U>(callbackfn: (value: T) => U): Stream<U> {\n        return new StreamImpl<S, U>(\n            this.startFn,\n            (state) => {\n                const { done, value } = this.nextFn(state);\n                if (done) {\n                    return DONE_RESULT;\n                } else {\n                    return { done: false, value: callbackfn(value) };\n                }\n            }\n        );\n    }\n\n    // for remarks on the return type definition refer to 'every<U extends T>(...)'\n    filter<U extends T>(predicate: (value: T) => value is U): Stream<U> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> & this;\n    filter(predicate: (value: T) => unknown): Stream<T> {\n        return new StreamImpl<S, T>(\n            this.startFn,\n            state => {\n                let result: IteratorResult<T>;\n                do {\n                    result = this.nextFn(state);\n                    if (!result.done && predicate(result.value)) {\n                        return result;\n                    }\n                } while (!result.done);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    nonNullable(): Stream<NonNullable<T>> {\n        return this.filter(e => e !== undefined && e !== null) as Stream<NonNullable<T>>;\n    }\n\n    reduce(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduce<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduce<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const iterator = this.iterator();\n        let previousValue: U | T | undefined = initialValue;\n        let next = iterator.next();\n        while (!next.done) {\n            if (previousValue === undefined) {\n                previousValue = next.value;\n            } else {\n                previousValue = callbackfn(previousValue, next.value);\n            }\n            next = iterator.next();\n        }\n        return previousValue;\n    }\n\n    reduceRight(callbackfn: (previousValue: T, currentValue: T) => T): T | undefined;\n    reduceRight<U = T>(callbackfn: (previousValue: U, currentValue: T) => U, initialValue: U): U;\n    reduceRight<U>(callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        return this.recursiveReduce(this.iterator(), callbackfn, initialValue);\n    }\n\n    protected recursiveReduce<U>(iterator: Iterator<T>, callbackfn: (previousValue: U | T, currentValue: T) => U, initialValue?: U): U | T | undefined {\n        const next = iterator.next();\n        if (next.done) {\n            return initialValue;\n        }\n        const previousValue = this.recursiveReduce(iterator, callbackfn, initialValue);\n        if (previousValue === undefined) {\n            return next.value;\n        }\n        return callbackfn(previousValue, next.value);\n    }\n\n    find<S extends T>(predicate: (value: T) => value is S): S | undefined;\n    find(predicate: (value: T) => unknown): T | undefined;\n    find(predicate: (value: T) => unknown): T | undefined {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return next.value;\n            }\n            next = iterator.next();\n        }\n        return undefined;\n    }\n\n    findIndex(predicate: (value: T) => unknown): number {\n        const iterator = this.iterator();\n        let index = 0;\n        let next = iterator.next();\n        while (!next.done) {\n            if (predicate(next.value)) {\n                return index;\n            }\n            next = iterator.next();\n            index++;\n        }\n        return -1;\n    }\n\n    includes(searchElement: T): boolean {\n        const iterator = this.iterator();\n        let next = iterator.next();\n        while (!next.done) {\n            if (next.value === searchElement) {\n                return true;\n            }\n            next = iterator.next();\n        }\n        return false;\n    }\n\n    flatMap<U>(callbackfn: (value: T) => U | Iterable<U>): Stream<U> {\n        type FlatMapState = { this: S, iterator?: Iterator<U, undefined> }\n        return new StreamImpl<FlatMapState, U>(\n            () => ({ this: this.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = this.nextFn(state.this);\n                    if (!done) {\n                        const mapped = callbackfn(value);\n                        if (isIterable(mapped)) {\n                            state.iterator = mapped[Symbol.iterator]();\n                        } else {\n                            return { done: false, value: mapped };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    flat<D extends number = 1>(depth?: D): FlatStream<T, D> {\n        if (depth === undefined) {\n            depth = 1 as D;\n        }\n        if (depth <= 0) {\n            return this as unknown as FlatStream<T, D>;\n        }\n        const stream = depth > 1 ? this.flat(depth - 1) as unknown as StreamImpl<S, T> : this;\n        type FlatMapState = { this: S, iterator?: Iterator<T, undefined> }\n        return new StreamImpl<FlatMapState, T>(\n            () => ({ this: stream.startFn() }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (next.done) {\n                            state.iterator = undefined;\n                        } else {\n                            return next;\n                        }\n                    }\n                    const { done, value } = stream.nextFn(state.this);\n                    if (!done) {\n                        if (isIterable(value)) {\n                            state.iterator = value[Symbol.iterator]() as Iterator<T>;\n                        } else {\n                            return { done: false, value: value };\n                        }\n                    }\n                } while (state.iterator);\n                return DONE_RESULT;\n            }\n        ) as unknown as FlatStream<T, D>;\n    }\n\n    head(): T | undefined {\n        const iterator = this.iterator();\n        const result = iterator.next();\n        if (result.done) {\n            return undefined;\n        }\n        return result.value;\n    }\n\n    tail(skipCount = 1): Stream<T> {\n        return new StreamImpl<S, T>(\n            () => {\n                const state = this.startFn();\n                for (let i = 0; i < skipCount; i++) {\n                    const next = this.nextFn(state);\n                    if (next.done) {\n                        return state;\n                    }\n                }\n                return state;\n            },\n            this.nextFn\n        );\n    }\n\n    limit(maxSize: number): Stream<T> {\n        return new StreamImpl<{ size: number, state: S }, T>(\n            () => ({ size: 0, state: this.startFn() }),\n            state => {\n                state.size++;\n                if (state.size > maxSize) {\n                    return DONE_RESULT;\n                }\n                return this.nextFn(state.state);\n            }\n        );\n    }\n\n    distinct<Key = T>(by?: (element: T) => Key): Stream<T> {\n        const set = new Set<T | Key>();\n        return this.filter(e => {\n            const value = by ? by(e) : e;\n            if (set.has(value)) {\n                return false;\n            } else {\n                set.add(value);\n                return true;\n            }\n        });\n    }\n\n    exclude<Key = T>(other: Iterable<T>, key?: (element: T) => Key): Stream<T> {\n        const otherKeySet = new Set<Key | T>();\n        for (const item of other) {\n            const value = key ? key(item) : item;\n            otherKeySet.add(value);\n        }\n        return this.filter(e => {\n            const ownKey = key ? key(e) : e;\n            return !otherKeySet.has(ownKey);\n        });\n    }\n}\n\nfunction toString(item: unknown): string {\n    if (typeof item === 'string') {\n        return item as string;\n    }\n    if (typeof item === 'undefined') {\n        return 'undefined';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (typeof (item as any).toString === 'function') {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        return (item as any).toString();\n    }\n    return Object.prototype.toString.call(item);\n}\n\nfunction isIterable<T>(obj: unknown): obj is Iterable<T> {\n    return !!obj && typeof (obj as Iterable<T>)[Symbol.iterator] === 'function';\n}\n\n/**\n * An empty stream of any type.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const EMPTY_STREAM: Stream<any> = new StreamImpl<undefined, any>(() => undefined, () => DONE_RESULT);\n\n/**\n * Use this `IteratorResult` when implementing a `StreamImpl` to indicate that there are no more elements in the stream.\n */\nexport const DONE_RESULT: IteratorReturnResult<undefined> = Object.freeze({ done: true, value: undefined });\n\n/**\n * Create a stream from one or more iterables or array-likes.\n */\nexport function stream<T>(...collections: Array<Iterable<T> | ArrayLike<T>>): Stream<T> {\n    if (collections.length === 1) {\n        const collection = collections[0];\n        if (collection instanceof StreamImpl) {\n            return collection as Stream<T>;\n        }\n        if (isIterable(collection)) {\n            return new StreamImpl<Iterator<T, undefined>, T>(\n                () => collection[Symbol.iterator](),\n                (iterator) => iterator.next()\n            );\n        }\n        if (typeof collection.length === 'number') {\n            return new StreamImpl<{ index: number }, T>(\n                () => ({ index: 0 }),\n                (state) => {\n                    if (state.index < collection.length) {\n                        return { done: false, value: collection[state.index++] };\n                    } else {\n                        return DONE_RESULT;\n                    }\n                }\n            );\n        }\n    }\n    if (collections.length > 1) {\n        type State = { collIndex: number, iterator?: Iterator<T, undefined>, array?: ArrayLike<T>, arrIndex: number };\n        return new StreamImpl<State, T>(\n            () => ({ collIndex: 0, arrIndex: 0 }),\n            (state) => {\n                do {\n                    if (state.iterator) {\n                        const next = state.iterator.next();\n                        if (!next.done) {\n                            return next;\n                        }\n                        state.iterator = undefined;\n                    }\n                    if (state.array) {\n                        if (state.arrIndex < state.array.length) {\n                            return { done: false, value: state.array[state.arrIndex++] };\n                        }\n                        state.array = undefined;\n                        state.arrIndex = 0;\n                    }\n                    if (state.collIndex < collections.length) {\n                        const collection = collections[state.collIndex++];\n                        if (isIterable(collection)) {\n                            state.iterator = collection[Symbol.iterator]();\n                        } else if (collection && typeof collection.length === 'number') {\n                            state.array = collection;\n                        }\n                    }\n                } while (state.iterator || state.array || state.collIndex < collections.length);\n                return DONE_RESULT;\n            }\n        );\n    }\n    return EMPTY_STREAM;\n}\n\n/**\n * A tree iterator adds the ability to prune the current iteration.\n */\nexport interface TreeIterator<T> extends IterableIterator<T> {\n    /**\n     * Skip the whole subtree below the last returned element. The iteration continues as if that\n     * element had no children.\n     */\n    prune(): void\n}\n\n/**\n * A tree stream is used to stream the elements of a tree, for example an AST or CST.\n */\nexport interface TreeStream<T> extends Stream<T> {\n    iterator(): TreeIterator<T>\n}\n\n/**\n * The default implementation of `TreeStream` takes a root element and a function that computes the\n * children of its argument. Whether the root node included in the stream is controlled with the\n * `includeRoot` option, which defaults to `false`.\n */\nexport class TreeStreamImpl<T>\n    extends StreamImpl<{ iterators: Array<Iterator<T>>, pruned: boolean }, T>\n    implements TreeStream<T> {\n\n    constructor(root: T, children: (node: T) => Iterable<T>, options?: { includeRoot?: boolean }) {\n        super(\n            () => ({\n                iterators: options?.includeRoot ? [[root][Symbol.iterator]()] : [children(root)[Symbol.iterator]()],\n                pruned: false\n            }),\n            state => {\n                if (state.pruned) {\n                    state.iterators.pop();\n                    state.pruned = false;\n                }\n                while (state.iterators.length > 0) {\n                    const iterator = state.iterators[state.iterators.length - 1];\n                    const next = iterator.next();\n                    if (next.done) {\n                        state.iterators.pop();\n                    } else {\n                        state.iterators.push(children(next.value)[Symbol.iterator]());\n                        return next;\n                    }\n                }\n                return DONE_RESULT;\n            }\n        );\n    }\n\n    override iterator(): TreeIterator<T> {\n        const iterator = {\n            state: this.startFn(),\n            next: () => this.nextFn(iterator.state),\n            prune: () => {\n                iterator.state.pruned = true;\n            },\n            [Symbol.iterator]: () => iterator\n        };\n        return iterator;\n    }\n}\n\n/**\n * A set of utility functions that reduce a stream to a single value.\n */\nexport namespace Reduction {\n\n    /**\n     * Compute the sum of a number stream.\n     */\n    export function sum(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Compute the product of a number stream.\n     */\n    export function product(stream: Stream<number>): number {\n        return stream.reduce((a, b) => a * b, 0);\n    }\n\n    /**\n     * Compute the minimum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function min(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.min(a, b));\n    }\n\n    /**\n     * Compute the maximum of a number stream. Returns `undefined` if the stream is empty.\n     */\n    export function max(stream: Stream<number>): number | undefined {\n        return stream.reduce((a, b) => Math.max(a, b));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken } from '@chevrotain/types';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { CstNode, CompositeCstNode, LeafCstNode } from '../syntax-tree.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport { isCompositeCstNode, isLeafCstNode, isRootCstNode } from '../syntax-tree.js';\nimport { TreeStreamImpl } from './stream.js';\n\n/**\n * Create a stream of all CST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamCst(node: CstNode): TreeStream<CstNode> {\n    return new TreeStreamImpl(node, element => {\n        if (isCompositeCstNode(element)) {\n            return element.content;\n        } else {\n            return [];\n        }\n    }, { includeRoot: true });\n}\n\n/**\n * Create a stream of all leaf nodes that are directly and indirectly contained in the given root node.\n */\nexport function flattenCst(node: CstNode): Stream<LeafCstNode> {\n    return streamCst(node).filter(isLeafCstNode);\n}\n\n/**\n * Determines whether the specified cst node is a child of the specified parent node.\n */\nexport function isChildNode(child: CstNode, parent: CstNode): boolean {\n    while (child.container) {\n        child = child.container;\n        if (child === parent) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function tokenToRange(token: IToken): Range {\n    // Chevrotain uses 1-based indices everywhere\n    // So we subtract 1 from every value to align with the LSP\n    return {\n        start: {\n            character: token.startColumn! - 1,\n            line: token.startLine! - 1\n        },\n        end: {\n            character: token.endColumn!, // endColumn uses the correct index\n            line: token.endLine! - 1\n        }\n    };\n}\n\nexport function toDocumentSegment(node: CstNode): DocumentSegment;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined;\nexport function toDocumentSegment(node?: CstNode): DocumentSegment | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const { offset, end, range } = node;\n    return {\n        range,\n        offset,\n        end,\n        length: end - offset\n    };\n}\n\nexport enum RangeComparison {\n    Before = 0,\n    After = 1,\n    OverlapFront = 2,\n    OverlapBack = 3,\n    Inside = 4\n}\n\nexport function compareRange(range: Range, to: Range): RangeComparison {\n    if (range.end.line < to.start.line || (range.end.line === to.start.line && range.end.character < range.start.character)) {\n        return RangeComparison.Before;\n    } else if (range.start.line > to.end.line || (range.start.line === to.end.line && range.start.character > to.end.character)) {\n        return RangeComparison.After;\n    }\n    const startInside = range.start.line > to.start.line || (range.start.line === to.start.line && range.start.character >= to.start.character);\n    const endInside = range.end.line < to.end.line || (range.end.line === to.end.line && range.end.character <= to.end.character);\n    if (startInside && endInside) {\n        return RangeComparison.Inside;\n    } else if (startInside) {\n        return RangeComparison.OverlapBack;\n    } else {\n        return RangeComparison.OverlapFront;\n    }\n}\n\nexport function inRange(range: Range, to: Range): boolean {\n    const comparison = compareRange(range, to);\n    return comparison > RangeComparison.After;\n}\n\n// The \\p{L} regex matches any unicode letter character, i.e. characters from non-english alphabets\n// Together with \\w it matches any kind of character which can commonly appear in IDs\nexport const DefaultNameRegexp = /^[\\w\\p{L}]$/u;\n\n/**\n * Performs `findLeafNodeAtOffset` with a minor difference: When encountering a character that matches the `nameRegexp` argument,\n * it will instead return the leaf node at the `offset - 1` position.\n *\n * For LSP services, users expect that the declaration of an element is available if the cursor is directly after the element.\n */\nexport function findDeclarationNodeAtOffset(cstNode: CstNode | undefined, offset: number, nameRegexp = DefaultNameRegexp): LeafCstNode | undefined {\n    if (cstNode) {\n        if (offset > 0) {\n            const localOffset = offset - cstNode.offset;\n            const textAtOffset = cstNode.text.charAt(localOffset);\n            if (!nameRegexp.test(textAtOffset)) {\n                offset--;\n            }\n        }\n        return findLeafNodeAtOffset(cstNode, offset);\n    }\n    return undefined;\n}\n\nexport function findCommentNode(cstNode: CstNode | undefined, commentNames: string[]): CstNode | undefined {\n    if (cstNode) {\n        const previous = getPreviousNode(cstNode, true);\n        if (previous && isCommentNode(previous, commentNames)) {\n            return previous;\n        }\n        if (isRootCstNode(cstNode)) {\n            // Go from the first non-hidden node through all nodes in reverse order\n            // We do this to find the comment node which directly precedes the root node\n            const endIndex = cstNode.content.findIndex(e => !e.hidden);\n            for (let i = endIndex - 1; i >= 0; i--) {\n                const child = cstNode.content[i];\n                if (isCommentNode(child, commentNames)) {\n                    return child;\n                }\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function isCommentNode(cstNode: CstNode, commentNames: string[]): boolean {\n    return isLeafCstNode(cstNode) && commentNames.includes(cstNode.tokenType.name);\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * Note that the given offset will be within the range of the returned leaf node.\n *\n * If the offset does not point to a CST node (but just white space), this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node at the specified offset.\n */\nexport function findLeafNodeAtOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, false);\n        if (searchResult) {\n            return findLeafNodeAtOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\n/**\n * Finds the leaf CST node at the specified 0-based string offset.\n * If no CST node exists at the specified position, it will return the leaf node before it.\n *\n * If there is no leaf node before the specified offset, this method will return `undefined`.\n *\n * @param node The CST node to search through.\n * @param offset The specified offset.\n * @returns The CST node closest to the specified offset.\n */\nexport function findLeafNodeBeforeOffset(node: CstNode, offset: number): LeafCstNode | undefined {\n    if (isLeafCstNode(node)) {\n        return node;\n    } else if (isCompositeCstNode(node)) {\n        const searchResult = binarySearch(node, offset, true);\n        if (searchResult) {\n            return findLeafNodeBeforeOffset(searchResult, offset);\n        }\n    }\n    return undefined;\n}\n\nfunction binarySearch(node: CompositeCstNode, offset: number, closest: boolean): CstNode | undefined {\n    let left = 0;\n    let right = node.content.length - 1;\n    let closestNode: CstNode | undefined = undefined;\n\n    while (left <= right) {\n        const middle = Math.floor((left + right) / 2);\n        const middleNode = node.content[middle];\n\n        if (middleNode.offset <= offset && middleNode.end > offset) {\n            // Found an exact match\n            return middleNode;\n        }\n\n        if (middleNode.end <= offset) {\n            // Update the closest node (less than offset) and move to the right half\n            closestNode = closest ? middleNode : undefined;\n            left = middle + 1;\n        } else {\n            // Move to the left half\n            right = middle - 1;\n        }\n    }\n\n    return closestNode;\n}\n\nexport function getPreviousNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        while (index > 0) {\n            index--;\n            const previous = parent.content[index];\n            if (hidden || !previous.hidden) {\n                return previous;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getNextNode(node: CstNode, hidden = true): CstNode | undefined {\n    while (node.container) {\n        const parent = node.container;\n        let index = parent.content.indexOf(node);\n        const last = parent.content.length - 1;\n        while (index < last) {\n            index++;\n            const next = parent.content[index];\n            if (hidden || !next.hidden) {\n                return next;\n            }\n        }\n        node = parent;\n    }\n    return undefined;\n}\n\nexport function getStartlineNode(node: CstNode): CstNode {\n    if (node.range.start.character === 0) {\n        return node;\n    }\n    const line = node.range.start.line;\n    let last = node;\n    let index: number | undefined;\n    while (node.container) {\n        const parent = node.container;\n        const selfIndex = index ?? parent.content.indexOf(node);\n        if (selfIndex === 0) {\n            node = parent;\n            index = undefined;\n        } else {\n            index = selfIndex - 1;\n            node = parent.content[index];\n        }\n        if (node.range.start.line !== line) {\n            break;\n        }\n        last = node;\n    }\n    return last;\n}\n\nexport function getInteriorNodes(start: CstNode, end: CstNode): CstNode[] {\n    const commonParent = getCommonParent(start, end);\n    if (!commonParent) {\n        return [];\n    }\n    return commonParent.parent.content.slice(commonParent.a + 1, commonParent.b);\n}\n\nfunction getCommonParent(a: CstNode, b: CstNode): CommonParent | undefined {\n    const aParents = getParentChain(a);\n    const bParents = getParentChain(b);\n    let current: CommonParent | undefined;\n    for (let i = 0; i < aParents.length && i < bParents.length; i++) {\n        const aParent = aParents[i];\n        const bParent = bParents[i];\n        if (aParent.parent === bParent.parent) {\n            current = {\n                parent: aParent.parent,\n                a: aParent.index,\n                b: bParent.index\n            };\n        } else {\n            break;\n        }\n    }\n    return current;\n}\n\ninterface CommonParent {\n    parent: CompositeCstNode\n    a: number\n    b: number\n}\n\nfunction getParentChain(node: CstNode): ParentLink[] {\n    const chain: ParentLink[] = [];\n    while (node.container) {\n        const parent = node.container;\n        const index = parent.content.indexOf(node);\n        chain.push({\n            parent,\n            index\n        });\n        node = parent;\n    }\n    return chain.reverse();\n}\n\ninterface ParentLink {\n    parent: CompositeCstNode\n    index: number\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CstNode } from '../syntax-tree.js';\n\nexport class ErrorWithLocation extends Error {\n    constructor(node: CstNode | undefined, message: string) {\n        super(node ? `${message} at ${node.range.start.line}:${node.range.start.character}` : message);\n    }\n}\n\nexport function assertUnreachable(_: never): never {\n    throw new Error('Error! The input value was not handled.');\n}\n","/******************************************************************************\n * This file was generated by langium-cli 3.0.0.\n * DO NOT EDIT MANUALLY!\n ******************************************************************************/\n\n/* eslint-disable */\nimport type { AstNode, Reference, ReferenceInfo, TypeMetaData } from '../../syntax-tree.js';\nimport { AbstractAstReflection } from '../../syntax-tree.js';\n\nexport const LangiumGrammarTerminals = {\n    ID: /\\^?[_a-zA-Z][\\w_]*/,\n    STRING: /\"(\\\\.|[^\"\\\\])*\"|'(\\\\.|[^'\\\\])*'/,\n    NUMBER: /NaN|-?((\\d*\\.\\d+|\\d+)([Ee][+-]?\\d+)?|Infinity)/,\n    RegexLiteral: /\\/(?![*+?])(?:[^\\r\\n\\[/\\\\]|\\\\.|\\[(?:[^\\r\\n\\]\\\\]|\\\\.)*\\])+\\/[a-z]*/,\n    WS: /\\s+/,\n    ML_COMMENT: /\\/\\*[\\s\\S]*?\\*\\//,\n    SL_COMMENT: /\\/\\/[^\\n\\r]*/,\n};\n\nexport type AbstractRule = ParserRule | TerminalRule;\n\nexport const AbstractRule = 'AbstractRule';\n\nexport function isAbstractRule(item: unknown): item is AbstractRule {\n    return reflection.isInstance(item, AbstractRule);\n}\n\nexport type AbstractType = InferredType | Interface | ParserRule | Type;\n\nexport const AbstractType = 'AbstractType';\n\nexport function isAbstractType(item: unknown): item is AbstractType {\n    return reflection.isInstance(item, AbstractType);\n}\n\nexport type Condition = BooleanLiteral | Conjunction | Disjunction | Negation | ParameterReference;\n\nexport const Condition = 'Condition';\n\nexport function isCondition(item: unknown): item is Condition {\n    return reflection.isInstance(item, Condition);\n}\n\nexport type FeatureName = 'current' | 'entry' | 'extends' | 'false' | 'fragment' | 'grammar' | 'hidden' | 'import' | 'infer' | 'infers' | 'interface' | 'returns' | 'terminal' | 'true' | 'type' | 'with' | PrimitiveType | string;\n\nexport function isFeatureName(item: unknown): item is FeatureName {\n    return isPrimitiveType(item) || item === 'current' || item === 'entry' || item === 'extends' || item === 'false' || item === 'fragment' || item === 'grammar' || item === 'hidden' || item === 'import' || item === 'interface' || item === 'returns' || item === 'terminal' || item === 'true' || item === 'type' || item === 'infer' || item === 'infers' || item === 'with' || (typeof item === 'string' && (/\\^?[_a-zA-Z][\\w_]*/.test(item)));\n}\n\nexport type PrimitiveType = 'Date' | 'bigint' | 'boolean' | 'number' | 'string';\n\nexport function isPrimitiveType(item: unknown): item is PrimitiveType {\n    return item === 'string' || item === 'number' || item === 'boolean' || item === 'Date' || item === 'bigint';\n}\n\nexport type TypeDefinition = ArrayType | ReferenceType | SimpleType | UnionType;\n\nexport const TypeDefinition = 'TypeDefinition';\n\nexport function isTypeDefinition(item: unknown): item is TypeDefinition {\n    return reflection.isInstance(item, TypeDefinition);\n}\n\nexport type ValueLiteral = ArrayLiteral | BooleanLiteral | NumberLiteral | StringLiteral;\n\nexport const ValueLiteral = 'ValueLiteral';\n\nexport function isValueLiteral(item: unknown): item is ValueLiteral {\n    return reflection.isInstance(item, ValueLiteral);\n}\n\nexport interface AbstractElement extends AstNode {\n    readonly $type: 'AbstractElement' | 'Action' | 'Alternatives' | 'Assignment' | 'CharacterRange' | 'CrossReference' | 'EndOfFile' | 'Group' | 'Keyword' | 'NegatedToken' | 'RegexToken' | 'RuleCall' | 'TerminalAlternatives' | 'TerminalGroup' | 'TerminalRuleCall' | 'UnorderedGroup' | 'UntilToken' | 'Wildcard';\n    cardinality?: '*' | '+' | '?';\n    lookahead?: '?!' | '?<!' | '?<=' | '?=';\n}\n\nexport const AbstractElement = 'AbstractElement';\n\nexport function isAbstractElement(item: unknown): item is AbstractElement {\n    return reflection.isInstance(item, AbstractElement);\n}\n\nexport interface ArrayLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'ArrayLiteral';\n    elements: Array<ValueLiteral>;\n}\n\nexport const ArrayLiteral = 'ArrayLiteral';\n\nexport function isArrayLiteral(item: unknown): item is ArrayLiteral {\n    return reflection.isInstance(item, ArrayLiteral);\n}\n\nexport interface ArrayType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ArrayType';\n    elementType: TypeDefinition;\n}\n\nexport const ArrayType = 'ArrayType';\n\nexport function isArrayType(item: unknown): item is ArrayType {\n    return reflection.isInstance(item, ArrayType);\n}\n\nexport interface BooleanLiteral extends AstNode {\n    readonly $container: ArrayLiteral | Conjunction | Disjunction | Group | NamedArgument | Negation | TypeAttribute;\n    readonly $type: 'BooleanLiteral';\n    true: boolean;\n}\n\nexport const BooleanLiteral = 'BooleanLiteral';\n\nexport function isBooleanLiteral(item: unknown): item is BooleanLiteral {\n    return reflection.isInstance(item, BooleanLiteral);\n}\n\nexport interface Conjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Conjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Conjunction = 'Conjunction';\n\nexport function isConjunction(item: unknown): item is Conjunction {\n    return reflection.isInstance(item, Conjunction);\n}\n\nexport interface Disjunction extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Disjunction';\n    left: Condition;\n    right: Condition;\n}\n\nexport const Disjunction = 'Disjunction';\n\nexport function isDisjunction(item: unknown): item is Disjunction {\n    return reflection.isInstance(item, Disjunction);\n}\n\nexport interface Grammar extends AstNode {\n    readonly $type: 'Grammar';\n    definesHiddenTokens: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    imports: Array<GrammarImport>;\n    interfaces: Array<Interface>;\n    isDeclared: boolean;\n    name?: string;\n    rules: Array<AbstractRule>;\n    types: Array<Type>;\n    usedGrammars: Array<Reference<Grammar>>;\n}\n\nexport const Grammar = 'Grammar';\n\nexport function isGrammar(item: unknown): item is Grammar {\n    return reflection.isInstance(item, Grammar);\n}\n\nexport interface GrammarImport extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'GrammarImport';\n    path: string;\n}\n\nexport const GrammarImport = 'GrammarImport';\n\nexport function isGrammarImport(item: unknown): item is GrammarImport {\n    return reflection.isInstance(item, GrammarImport);\n}\n\nexport interface InferredType extends AstNode {\n    readonly $container: Action | ParserRule;\n    readonly $type: 'InferredType';\n    name: string;\n}\n\nexport const InferredType = 'InferredType';\n\nexport function isInferredType(item: unknown): item is InferredType {\n    return reflection.isInstance(item, InferredType);\n}\n\nexport interface Interface extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Interface';\n    attributes: Array<TypeAttribute>;\n    name: string;\n    superTypes: Array<Reference<AbstractType>>;\n}\n\nexport const Interface = 'Interface';\n\nexport function isInterface(item: unknown): item is Interface {\n    return reflection.isInstance(item, Interface);\n}\n\nexport interface NamedArgument extends AstNode {\n    readonly $container: RuleCall;\n    readonly $type: 'NamedArgument';\n    calledByName: boolean;\n    parameter?: Reference<Parameter>;\n    value: Condition;\n}\n\nexport const NamedArgument = 'NamedArgument';\n\nexport function isNamedArgument(item: unknown): item is NamedArgument {\n    return reflection.isInstance(item, NamedArgument);\n}\n\nexport interface Negation extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'Negation';\n    value: Condition;\n}\n\nexport const Negation = 'Negation';\n\nexport function isNegation(item: unknown): item is Negation {\n    return reflection.isInstance(item, Negation);\n}\n\nexport interface NumberLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'NumberLiteral';\n    value: number;\n}\n\nexport const NumberLiteral = 'NumberLiteral';\n\nexport function isNumberLiteral(item: unknown): item is NumberLiteral {\n    return reflection.isInstance(item, NumberLiteral);\n}\n\nexport interface Parameter extends AstNode {\n    readonly $container: ParserRule;\n    readonly $type: 'Parameter';\n    name: string;\n}\n\nexport const Parameter = 'Parameter';\n\nexport function isParameter(item: unknown): item is Parameter {\n    return reflection.isInstance(item, Parameter);\n}\n\nexport interface ParameterReference extends AstNode {\n    readonly $container: Conjunction | Disjunction | Group | NamedArgument | Negation;\n    readonly $type: 'ParameterReference';\n    parameter: Reference<Parameter>;\n}\n\nexport const ParameterReference = 'ParameterReference';\n\nexport function isParameterReference(item: unknown): item is ParameterReference {\n    return reflection.isInstance(item, ParameterReference);\n}\n\nexport interface ParserRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'ParserRule';\n    dataType?: PrimitiveType;\n    definesHiddenTokens: boolean;\n    definition: AbstractElement;\n    entry: boolean;\n    fragment: boolean;\n    hiddenTokens: Array<Reference<AbstractRule>>;\n    inferredType?: InferredType;\n    name: string;\n    parameters: Array<Parameter>;\n    returnType?: Reference<AbstractType>;\n    wildcard: boolean;\n}\n\nexport const ParserRule = 'ParserRule';\n\nexport function isParserRule(item: unknown): item is ParserRule {\n    return reflection.isInstance(item, ParserRule);\n}\n\nexport interface ReferenceType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'ReferenceType';\n    referenceType: TypeDefinition;\n}\n\nexport const ReferenceType = 'ReferenceType';\n\nexport function isReferenceType(item: unknown): item is ReferenceType {\n    return reflection.isInstance(item, ReferenceType);\n}\n\nexport interface ReturnType extends AstNode {\n    readonly $container: TerminalRule;\n    readonly $type: 'ReturnType';\n    name: PrimitiveType | string;\n}\n\nexport const ReturnType = 'ReturnType';\n\nexport function isReturnType(item: unknown): item is ReturnType {\n    return reflection.isInstance(item, ReturnType);\n}\n\nexport interface SimpleType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'SimpleType';\n    primitiveType?: PrimitiveType;\n    stringType?: string;\n    typeRef?: Reference<AbstractType>;\n}\n\nexport const SimpleType = 'SimpleType';\n\nexport function isSimpleType(item: unknown): item is SimpleType {\n    return reflection.isInstance(item, SimpleType);\n}\n\nexport interface StringLiteral extends AstNode {\n    readonly $container: ArrayLiteral | TypeAttribute;\n    readonly $type: 'StringLiteral';\n    value: string;\n}\n\nexport const StringLiteral = 'StringLiteral';\n\nexport function isStringLiteral(item: unknown): item is StringLiteral {\n    return reflection.isInstance(item, StringLiteral);\n}\n\nexport interface TerminalRule extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'TerminalRule';\n    definition: AbstractElement;\n    fragment: boolean;\n    hidden: boolean;\n    name: string;\n    type?: ReturnType;\n}\n\nexport const TerminalRule = 'TerminalRule';\n\nexport function isTerminalRule(item: unknown): item is TerminalRule {\n    return reflection.isInstance(item, TerminalRule);\n}\n\nexport interface Type extends AstNode {\n    readonly $container: Grammar;\n    readonly $type: 'Type';\n    name: string;\n    type: TypeDefinition;\n}\n\nexport const Type = 'Type';\n\nexport function isType(item: unknown): item is Type {\n    return reflection.isInstance(item, Type);\n}\n\nexport interface TypeAttribute extends AstNode {\n    readonly $container: Interface;\n    readonly $type: 'TypeAttribute';\n    defaultValue?: ValueLiteral;\n    isOptional: boolean;\n    name: FeatureName;\n    type: TypeDefinition;\n}\n\nexport const TypeAttribute = 'TypeAttribute';\n\nexport function isTypeAttribute(item: unknown): item is TypeAttribute {\n    return reflection.isInstance(item, TypeAttribute);\n}\n\nexport interface UnionType extends AstNode {\n    readonly $container: ArrayType | ReferenceType | Type | TypeAttribute | UnionType;\n    readonly $type: 'UnionType';\n    types: Array<TypeDefinition>;\n}\n\nexport const UnionType = 'UnionType';\n\nexport function isUnionType(item: unknown): item is UnionType {\n    return reflection.isInstance(item, UnionType);\n}\n\nexport interface Action extends AbstractElement {\n    readonly $type: 'Action';\n    feature?: FeatureName;\n    inferredType?: InferredType;\n    operator?: '+=' | '=';\n    type?: Reference<AbstractType>;\n}\n\nexport const Action = 'Action';\n\nexport function isAction(item: unknown): item is Action {\n    return reflection.isInstance(item, Action);\n}\n\nexport interface Alternatives extends AbstractElement {\n    readonly $type: 'Alternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const Alternatives = 'Alternatives';\n\nexport function isAlternatives(item: unknown): item is Alternatives {\n    return reflection.isInstance(item, Alternatives);\n}\n\nexport interface Assignment extends AbstractElement {\n    readonly $type: 'Assignment';\n    feature: FeatureName;\n    operator: '+=' | '=' | '?=';\n    terminal: AbstractElement;\n}\n\nexport const Assignment = 'Assignment';\n\nexport function isAssignment(item: unknown): item is Assignment {\n    return reflection.isInstance(item, Assignment);\n}\n\nexport interface CharacterRange extends AbstractElement {\n    readonly $type: 'CharacterRange';\n    left: Keyword;\n    right?: Keyword;\n}\n\nexport const CharacterRange = 'CharacterRange';\n\nexport function isCharacterRange(item: unknown): item is CharacterRange {\n    return reflection.isInstance(item, CharacterRange);\n}\n\nexport interface CrossReference extends AbstractElement {\n    readonly $type: 'CrossReference';\n    deprecatedSyntax: boolean;\n    terminal?: AbstractElement;\n    type: Reference<AbstractType>;\n}\n\nexport const CrossReference = 'CrossReference';\n\nexport function isCrossReference(item: unknown): item is CrossReference {\n    return reflection.isInstance(item, CrossReference);\n}\n\nexport interface EndOfFile extends AbstractElement {\n    readonly $type: 'EndOfFile';\n}\n\nexport const EndOfFile = 'EndOfFile';\n\nexport function isEndOfFile(item: unknown): item is EndOfFile {\n    return reflection.isInstance(item, EndOfFile);\n}\n\nexport interface Group extends AbstractElement {\n    readonly $type: 'Group';\n    elements: Array<AbstractElement>;\n    guardCondition?: Condition;\n}\n\nexport const Group = 'Group';\n\nexport function isGroup(item: unknown): item is Group {\n    return reflection.isInstance(item, Group);\n}\n\nexport interface Keyword extends AbstractElement {\n    readonly $container: CharacterRange;\n    readonly $type: 'Keyword';\n    value: string;\n}\n\nexport const Keyword = 'Keyword';\n\nexport function isKeyword(item: unknown): item is Keyword {\n    return reflection.isInstance(item, Keyword);\n}\n\nexport interface NegatedToken extends AbstractElement {\n    readonly $type: 'NegatedToken';\n    terminal: AbstractElement;\n}\n\nexport const NegatedToken = 'NegatedToken';\n\nexport function isNegatedToken(item: unknown): item is NegatedToken {\n    return reflection.isInstance(item, NegatedToken);\n}\n\nexport interface RegexToken extends AbstractElement {\n    readonly $type: 'RegexToken';\n    regex: string;\n}\n\nexport const RegexToken = 'RegexToken';\n\nexport function isRegexToken(item: unknown): item is RegexToken {\n    return reflection.isInstance(item, RegexToken);\n}\n\nexport interface RuleCall extends AbstractElement {\n    readonly $type: 'RuleCall';\n    arguments: Array<NamedArgument>;\n    rule: Reference<AbstractRule>;\n}\n\nexport const RuleCall = 'RuleCall';\n\nexport function isRuleCall(item: unknown): item is RuleCall {\n    return reflection.isInstance(item, RuleCall);\n}\n\nexport interface TerminalAlternatives extends AbstractElement {\n    readonly $type: 'TerminalAlternatives';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalAlternatives = 'TerminalAlternatives';\n\nexport function isTerminalAlternatives(item: unknown): item is TerminalAlternatives {\n    return reflection.isInstance(item, TerminalAlternatives);\n}\n\nexport interface TerminalGroup extends AbstractElement {\n    readonly $type: 'TerminalGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const TerminalGroup = 'TerminalGroup';\n\nexport function isTerminalGroup(item: unknown): item is TerminalGroup {\n    return reflection.isInstance(item, TerminalGroup);\n}\n\nexport interface TerminalRuleCall extends AbstractElement {\n    readonly $type: 'TerminalRuleCall';\n    rule: Reference<TerminalRule>;\n}\n\nexport const TerminalRuleCall = 'TerminalRuleCall';\n\nexport function isTerminalRuleCall(item: unknown): item is TerminalRuleCall {\n    return reflection.isInstance(item, TerminalRuleCall);\n}\n\nexport interface UnorderedGroup extends AbstractElement {\n    readonly $type: 'UnorderedGroup';\n    elements: Array<AbstractElement>;\n}\n\nexport const UnorderedGroup = 'UnorderedGroup';\n\nexport function isUnorderedGroup(item: unknown): item is UnorderedGroup {\n    return reflection.isInstance(item, UnorderedGroup);\n}\n\nexport interface UntilToken extends AbstractElement {\n    readonly $type: 'UntilToken';\n    terminal: AbstractElement;\n}\n\nexport const UntilToken = 'UntilToken';\n\nexport function isUntilToken(item: unknown): item is UntilToken {\n    return reflection.isInstance(item, UntilToken);\n}\n\nexport interface Wildcard extends AbstractElement {\n    readonly $type: 'Wildcard';\n}\n\nexport const Wildcard = 'Wildcard';\n\nexport function isWildcard(item: unknown): item is Wildcard {\n    return reflection.isInstance(item, Wildcard);\n}\n\nexport type LangiumGrammarAstType = {\n    AbstractElement: AbstractElement\n    AbstractRule: AbstractRule\n    AbstractType: AbstractType\n    Action: Action\n    Alternatives: Alternatives\n    ArrayLiteral: ArrayLiteral\n    ArrayType: ArrayType\n    Assignment: Assignment\n    BooleanLiteral: BooleanLiteral\n    CharacterRange: CharacterRange\n    Condition: Condition\n    Conjunction: Conjunction\n    CrossReference: CrossReference\n    Disjunction: Disjunction\n    EndOfFile: EndOfFile\n    Grammar: Grammar\n    GrammarImport: GrammarImport\n    Group: Group\n    InferredType: InferredType\n    Interface: Interface\n    Keyword: Keyword\n    NamedArgument: NamedArgument\n    NegatedToken: NegatedToken\n    Negation: Negation\n    NumberLiteral: NumberLiteral\n    Parameter: Parameter\n    ParameterReference: ParameterReference\n    ParserRule: ParserRule\n    ReferenceType: ReferenceType\n    RegexToken: RegexToken\n    ReturnType: ReturnType\n    RuleCall: RuleCall\n    SimpleType: SimpleType\n    StringLiteral: StringLiteral\n    TerminalAlternatives: TerminalAlternatives\n    TerminalGroup: TerminalGroup\n    TerminalRule: TerminalRule\n    TerminalRuleCall: TerminalRuleCall\n    Type: Type\n    TypeAttribute: TypeAttribute\n    TypeDefinition: TypeDefinition\n    UnionType: UnionType\n    UnorderedGroup: UnorderedGroup\n    UntilToken: UntilToken\n    ValueLiteral: ValueLiteral\n    Wildcard: Wildcard\n}\n\nexport class LangiumGrammarAstReflection extends AbstractAstReflection {\n\n    getAllTypes(): string[] {\n        return ['AbstractElement', 'AbstractRule', 'AbstractType', 'Action', 'Alternatives', 'ArrayLiteral', 'ArrayType', 'Assignment', 'BooleanLiteral', 'CharacterRange', 'Condition', 'Conjunction', 'CrossReference', 'Disjunction', 'EndOfFile', 'Grammar', 'GrammarImport', 'Group', 'InferredType', 'Interface', 'Keyword', 'NamedArgument', 'NegatedToken', 'Negation', 'NumberLiteral', 'Parameter', 'ParameterReference', 'ParserRule', 'ReferenceType', 'RegexToken', 'ReturnType', 'RuleCall', 'SimpleType', 'StringLiteral', 'TerminalAlternatives', 'TerminalGroup', 'TerminalRule', 'TerminalRuleCall', 'Type', 'TypeAttribute', 'TypeDefinition', 'UnionType', 'UnorderedGroup', 'UntilToken', 'ValueLiteral', 'Wildcard'];\n    }\n\n    protected override computeIsSubtype(subtype: string, supertype: string): boolean {\n        switch (subtype) {\n            case Action:\n            case Alternatives:\n            case Assignment:\n            case CharacterRange:\n            case CrossReference:\n            case EndOfFile:\n            case Group:\n            case Keyword:\n            case NegatedToken:\n            case RegexToken:\n            case RuleCall:\n            case TerminalAlternatives:\n            case TerminalGroup:\n            case TerminalRuleCall:\n            case UnorderedGroup:\n            case UntilToken:\n            case Wildcard: {\n                return this.isSubtype(AbstractElement, supertype);\n            }\n            case ArrayLiteral:\n            case NumberLiteral:\n            case StringLiteral: {\n                return this.isSubtype(ValueLiteral, supertype);\n            }\n            case ArrayType:\n            case ReferenceType:\n            case SimpleType:\n            case UnionType: {\n                return this.isSubtype(TypeDefinition, supertype);\n            }\n            case BooleanLiteral: {\n                return this.isSubtype(Condition, supertype) || this.isSubtype(ValueLiteral, supertype);\n            }\n            case Conjunction:\n            case Disjunction:\n            case Negation:\n            case ParameterReference: {\n                return this.isSubtype(Condition, supertype);\n            }\n            case InferredType:\n            case Interface:\n            case Type: {\n                return this.isSubtype(AbstractType, supertype);\n            }\n            case ParserRule: {\n                return this.isSubtype(AbstractRule, supertype) || this.isSubtype(AbstractType, supertype);\n            }\n            case TerminalRule: {\n                return this.isSubtype(AbstractRule, supertype);\n            }\n            default: {\n                return false;\n            }\n        }\n    }\n\n    getReferenceType(refInfo: ReferenceInfo): string {\n        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;\n        switch (referenceId) {\n            case 'Action:type':\n            case 'CrossReference:type':\n            case 'Interface:superTypes':\n            case 'ParserRule:returnType':\n            case 'SimpleType:typeRef': {\n                return AbstractType;\n            }\n            case 'Grammar:hiddenTokens':\n            case 'ParserRule:hiddenTokens':\n            case 'RuleCall:rule': {\n                return AbstractRule;\n            }\n            case 'Grammar:usedGrammars': {\n                return Grammar;\n            }\n            case 'NamedArgument:parameter':\n            case 'ParameterReference:parameter': {\n                return Parameter;\n            }\n            case 'TerminalRuleCall:rule': {\n                return TerminalRule;\n            }\n            default: {\n                throw new Error(`${referenceId} is not a valid reference id.`);\n            }\n        }\n    }\n\n    getTypeMetaData(type: string): TypeMetaData {\n        switch (type) {\n            case 'AbstractElement': {\n                return {\n                    name: 'AbstractElement',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'ArrayLiteral': {\n                return {\n                    name: 'ArrayLiteral',\n                    properties: [\n                        { name: 'elements', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'ArrayType': {\n                return {\n                    name: 'ArrayType',\n                    properties: [\n                        { name: 'elementType' }\n                    ]\n                };\n            }\n            case 'BooleanLiteral': {\n                return {\n                    name: 'BooleanLiteral',\n                    properties: [\n                        { name: 'true', defaultValue: false }\n                    ]\n                };\n            }\n            case 'Conjunction': {\n                return {\n                    name: 'Conjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Disjunction': {\n                return {\n                    name: 'Disjunction',\n                    properties: [\n                        { name: 'left' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'Grammar': {\n                return {\n                    name: 'Grammar',\n                    properties: [\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'imports', defaultValue: [] },\n                        { name: 'interfaces', defaultValue: [] },\n                        { name: 'isDeclared', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'rules', defaultValue: [] },\n                        { name: 'types', defaultValue: [] },\n                        { name: 'usedGrammars', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'GrammarImport': {\n                return {\n                    name: 'GrammarImport',\n                    properties: [\n                        { name: 'path' }\n                    ]\n                };\n            }\n            case 'InferredType': {\n                return {\n                    name: 'InferredType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'Interface': {\n                return {\n                    name: 'Interface',\n                    properties: [\n                        { name: 'attributes', defaultValue: [] },\n                        { name: 'name' },\n                        { name: 'superTypes', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'NamedArgument': {\n                return {\n                    name: 'NamedArgument',\n                    properties: [\n                        { name: 'calledByName', defaultValue: false },\n                        { name: 'parameter' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Negation': {\n                return {\n                    name: 'Negation',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NumberLiteral': {\n                return {\n                    name: 'NumberLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'Parameter': {\n                return {\n                    name: 'Parameter',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'ParameterReference': {\n                return {\n                    name: 'ParameterReference',\n                    properties: [\n                        { name: 'parameter' }\n                    ]\n                };\n            }\n            case 'ParserRule': {\n                return {\n                    name: 'ParserRule',\n                    properties: [\n                        { name: 'dataType' },\n                        { name: 'definesHiddenTokens', defaultValue: false },\n                        { name: 'definition' },\n                        { name: 'entry', defaultValue: false },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hiddenTokens', defaultValue: [] },\n                        { name: 'inferredType' },\n                        { name: 'name' },\n                        { name: 'parameters', defaultValue: [] },\n                        { name: 'returnType' },\n                        { name: 'wildcard', defaultValue: false }\n                    ]\n                };\n            }\n            case 'ReferenceType': {\n                return {\n                    name: 'ReferenceType',\n                    properties: [\n                        { name: 'referenceType' }\n                    ]\n                };\n            }\n            case 'ReturnType': {\n                return {\n                    name: 'ReturnType',\n                    properties: [\n                        { name: 'name' }\n                    ]\n                };\n            }\n            case 'SimpleType': {\n                return {\n                    name: 'SimpleType',\n                    properties: [\n                        { name: 'primitiveType' },\n                        { name: 'stringType' },\n                        { name: 'typeRef' }\n                    ]\n                };\n            }\n            case 'StringLiteral': {\n                return {\n                    name: 'StringLiteral',\n                    properties: [\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'TerminalRule': {\n                return {\n                    name: 'TerminalRule',\n                    properties: [\n                        { name: 'definition' },\n                        { name: 'fragment', defaultValue: false },\n                        { name: 'hidden', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Type': {\n                return {\n                    name: 'Type',\n                    properties: [\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'TypeAttribute': {\n                return {\n                    name: 'TypeAttribute',\n                    properties: [\n                        { name: 'defaultValue' },\n                        { name: 'isOptional', defaultValue: false },\n                        { name: 'name' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'UnionType': {\n                return {\n                    name: 'UnionType',\n                    properties: [\n                        { name: 'types', defaultValue: [] }\n                    ]\n                };\n            }\n            case 'Action': {\n                return {\n                    name: 'Action',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'inferredType' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'Alternatives': {\n                return {\n                    name: 'Alternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Assignment': {\n                return {\n                    name: 'Assignment',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'feature' },\n                        { name: 'lookahead' },\n                        { name: 'operator' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'CharacterRange': {\n                return {\n                    name: 'CharacterRange',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'left' },\n                        { name: 'lookahead' },\n                        { name: 'right' }\n                    ]\n                };\n            }\n            case 'CrossReference': {\n                return {\n                    name: 'CrossReference',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'deprecatedSyntax', defaultValue: false },\n                        { name: 'lookahead' },\n                        { name: 'terminal' },\n                        { name: 'type' }\n                    ]\n                };\n            }\n            case 'EndOfFile': {\n                return {\n                    name: 'EndOfFile',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Group': {\n                return {\n                    name: 'Group',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'guardCondition' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'Keyword': {\n                return {\n                    name: 'Keyword',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'value' }\n                    ]\n                };\n            }\n            case 'NegatedToken': {\n                return {\n                    name: 'NegatedToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'RegexToken': {\n                return {\n                    name: 'RegexToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'regex' }\n                    ]\n                };\n            }\n            case 'RuleCall': {\n                return {\n                    name: 'RuleCall',\n                    properties: [\n                        { name: 'arguments', defaultValue: [] },\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'TerminalAlternatives': {\n                return {\n                    name: 'TerminalAlternatives',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalGroup': {\n                return {\n                    name: 'TerminalGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'TerminalRuleCall': {\n                return {\n                    name: 'TerminalRuleCall',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'rule' }\n                    ]\n                };\n            }\n            case 'UnorderedGroup': {\n                return {\n                    name: 'UnorderedGroup',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'elements', defaultValue: [] },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            case 'UntilToken': {\n                return {\n                    name: 'UntilToken',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' },\n                        { name: 'terminal' }\n                    ]\n                };\n            }\n            case 'Wildcard': {\n                return {\n                    name: 'Wildcard',\n                    properties: [\n                        { name: 'cardinality' },\n                        { name: 'lookahead' }\n                    ]\n                };\n            }\n            default: {\n                return {\n                    name: type,\n                    properties: []\n                };\n            }\n        }\n    }\n}\n\nexport const reflection = new LangiumGrammarAstReflection();\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AstNode, AstReflection, CstNode, GenericAstNode, Mutable, PropertyType, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream, TreeStream } from './stream.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { DONE_RESULT, stream, StreamImpl, TreeStreamImpl } from './stream.js';\nimport { inRange } from './cst-utils.js';\n\n/**\n * Link the `$container` and other related properties of every AST node that is directly contained\n * in the given `node`.\n */\nexport function linkContentToContainer(node: AstNode): void {\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (Array.isArray(value)) {\n                value.forEach((item, index) => {\n                    if (isAstNode(item)) {\n                        (item as Mutable<AstNode>).$container = node;\n                        (item as Mutable<AstNode>).$containerProperty = name;\n                        (item as Mutable<AstNode>).$containerIndex = index;\n                    }\n                });\n            } else if (isAstNode(value)) {\n                (value as Mutable<AstNode>).$container = node;\n                (value as Mutable<AstNode>).$containerProperty = name;\n            }\n        }\n    }\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and return the first\n * node that matches the type predicate. If the start node itself matches, it is returned.\n * If no container matches, `undefined` is returned.\n */\nexport function getContainerOfType<T extends AstNode>(node: AstNode | undefined, typePredicate: (n: AstNode) => n is T): T | undefined {\n    let item = node;\n    while (item) {\n        if (typePredicate(item)) {\n            return item;\n        }\n        item = item.$container;\n    }\n    return undefined;\n}\n\n/**\n * Walk along the hierarchy of containers from the given AST node to the root and check for existence\n * of a container that matches the given predicate. The start node is included in the checks.\n */\nexport function hasContainerOfType(node: AstNode | undefined, predicate: (n: AstNode) => boolean): boolean {\n    let item = node;\n    while (item) {\n        if (predicate(item)) {\n            return true;\n        }\n        item = item.$container;\n    }\n    return false;\n}\n\n/**\n * Retrieve the document in which the given AST node is contained. A reference to the document is\n * usually held by the root node of the AST.\n *\n * @throws an error if the node is not contained in a document.\n */\nexport function getDocument<T extends AstNode = AstNode>(node: AstNode): LangiumDocument<T> {\n    const rootNode = findRootNode(node);\n    const result = rootNode.$document;\n    if (!result) {\n        throw new Error('AST node has no document.');\n    }\n    return result as LangiumDocument<T>;\n}\n\n/**\n * Returns the root node of the given AST node by following the `$container` references.\n */\nexport function findRootNode(node: AstNode): AstNode {\n    while (node.$container) {\n        node = node.$container;\n    }\n    return node;\n}\n\nexport interface AstStreamOptions {\n    /**\n     * Optional target range that the nodes in the stream need to intersect\n     */\n    range?: Range\n}\n\n/**\n * Create a stream of all AST nodes that are directly contained in the given node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamContents(node: AstNode, options?: AstStreamOptions): Stream<AstNode> {\n    if (!node) {\n        throw new Error('Node must be an AstNode.');\n    }\n    const range = options?.range;\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, AstNode>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isAstNode(value)) {\n                    state.keyIndex++;\n                    if (isAstNodeInRange(value, range)) {\n                        return { done: false, value };\n                    }\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isAstNode(element) && isAstNodeInRange(element, range)) {\n                            return { done: false, value: element };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node.\n * This does not include the root node itself.\n */\nexport function streamAllContents(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options));\n}\n\n/**\n * Create a stream of all AST nodes that are directly and indirectly contained in the given root node,\n * including the root node itself.\n */\nexport function streamAst(root: AstNode, options?: AstStreamOptions): TreeStream<AstNode> {\n    if (!root) {\n        throw new Error('Root node must be an AstNode.');\n    } else if (options?.range && !isAstNodeInRange(root, options.range)) {\n        // Return an empty stream if the root node isn't in range\n        return new TreeStreamImpl(root, () => []);\n    }\n    return new TreeStreamImpl(root, node => streamContents(node, options), { includeRoot: true });\n}\n\nfunction isAstNodeInRange(astNode: AstNode, range?: Range): boolean {\n    if (!range) {\n        return true;\n    }\n    const nodeRange = astNode.$cstNode?.range;\n    if (!nodeRange) {\n        return false;\n    }\n    return inRange(nodeRange, range);\n}\n\n/**\n * Create a stream of all cross-references that are held by the given AST node. This includes\n * single-valued as well as multi-valued (array) properties.\n */\nexport function streamReferences(node: AstNode): Stream<ReferenceInfo> {\n    type State = { keys: string[], keyIndex: number, arrayIndex: number };\n    return new StreamImpl<State, ReferenceInfo>(() => ({\n        keys: Object.keys(node),\n        keyIndex: 0,\n        arrayIndex: 0\n    }), state => {\n        while (state.keyIndex < state.keys.length) {\n            const property = state.keys[state.keyIndex];\n            if (!property.startsWith('$')) {\n                const value = (node as GenericAstNode)[property];\n                if (isReference(value)) {\n                    state.keyIndex++;\n                    return { done: false, value: { reference: value, container: node, property } };\n                } else if (Array.isArray(value)) {\n                    while (state.arrayIndex < value.length) {\n                        const index = state.arrayIndex++;\n                        const element = value[index];\n                        if (isReference(element)) {\n                            return { done: false, value: { reference: element, container: node, property, index } };\n                        }\n                    }\n                    state.arrayIndex = 0;\n                }\n            }\n            state.keyIndex++;\n        }\n        return DONE_RESULT;\n    });\n}\n\n/**\n * Returns a Stream of references to the target node from the AstNode tree\n *\n * @param targetNode AstNode we are looking for\n * @param lookup AstNode where we search for references. If not provided, the root node of the document is used as the default value\n */\nexport function findLocalReferences(targetNode: AstNode, lookup = getDocument(targetNode).parseResult.value): Stream<Reference> {\n    const refs: Reference[] = [];\n    streamAst(lookup).forEach(node => {\n        streamReferences(node).forEach(refInfo => {\n            if (refInfo.reference.ref === targetNode) {\n                refs.push(refInfo.reference);\n            }\n        });\n    });\n    return stream(refs);\n}\n\n/**\n * Assigns all mandatory AST properties to the specified node.\n *\n * @param reflection Reflection object used to gather mandatory properties for the node.\n * @param node Specified node is modified in place and properties are directly assigned.\n */\nexport function assignMandatoryProperties(reflection: AstReflection, node: AstNode): void {\n    const typeMetaData = reflection.getTypeMetaData(node.$type);\n    const genericNode = node as GenericAstNode;\n    for (const property of typeMetaData.properties) {\n        // Only set the value if the property is not already set and if it has a default value\n        if (property.defaultValue !== undefined && genericNode[property.name] === undefined) {\n            genericNode[property.name] = copyDefaultValue(property.defaultValue);\n        }\n    }\n}\n\nfunction copyDefaultValue(propertyType: PropertyType): PropertyType {\n    if (Array.isArray(propertyType)) {\n        return [...propertyType.map(copyDefaultValue)];\n    } else {\n        return propertyType;\n    }\n}\n\n/**\n * Creates a deep copy of the specified AST node.\n * The resulting copy will only contain semantically relevant information, such as the `$type` property and AST properties.\n *\n * References are copied without resolved cross reference. The specified function is used to rebuild them.\n */\nexport function copyAstNode<T extends AstNode = AstNode>(node: T, buildReference: (node: AstNode, property: string, refNode: CstNode | undefined, refText: string) => Reference<AstNode>): T {\n    const copy: GenericAstNode = { $type: node.$type };\n\n    for (const [name, value] of Object.entries(node)) {\n        if (!name.startsWith('$')) {\n            if (isAstNode(value)) {\n                copy[name] = copyAstNode(value, buildReference);\n            } else if (isReference(value)) {\n                copy[name] = buildReference(\n                    copy,\n                    name,\n                    value.$refNode,\n                    value.$refText\n                );\n            } else if (Array.isArray(value)) {\n                const copiedArray: unknown[] = [];\n                for (const element of value) {\n                    if (isAstNode(element)) {\n                        copiedArray.push(copyAstNode(element, buildReference));\n                    } else if (isReference(element)) {\n                        copiedArray.push(\n                            buildReference(\n                                copy,\n                                name,\n                                element.$refNode,\n                                element.$refText\n                            )\n                        );\n                    } else {\n                        copiedArray.push(element);\n                    }\n                }\n                copy[name] = copiedArray;\n            } else {\n                copy[name] = value;\n            }\n        }\n    }\n\n    linkContentToContainer(copy);\n    return copy as unknown as T;\n}\n","import type { Character, IRegExpAST, RegExpFlags } from \"../types\";\n\nexport function cc(char: string): number {\n  return char.charCodeAt(0);\n}\n\nexport function insertToSet<T>(item: T | T[], set: T[]) {\n  if (Array.isArray(item)) {\n    item.forEach(function (subItem) {\n      set.push(subItem);\n    });\n  } else {\n    set.push(item);\n  }\n}\n\nexport function addFlag(\n  flagObj: RegExpFlags,\n  flagKey: keyof Omit<RegExpFlags, keyof IRegExpAST>,\n) {\n  if (flagObj[flagKey] === true) {\n    throw \"duplicate flag \" + flagKey;\n  }\n\n  const x: boolean = flagObj[flagKey];\n  flagObj[flagKey] = true;\n}\n\nexport function ASSERT_EXISTS<T = Object>(obj: any): obj is T {\n  // istanbul ignore next\n  if (obj === undefined) {\n    throw Error(\"Internal Error - Should never get here!\");\n  }\n  return true;\n}\n\n// istanbul ignore next\nexport function ASSERT_NEVER_REACH_HERE(): any {\n  throw Error(\"Internal Error - Should never get here!\");\n}\n\nexport function isCharacter(obj: { type: string }): obj is Character {\n  return obj[\"type\"] === \"Character\";\n}\n","import { cc } from \"./utils.js\";\n\nexport const digitsCharCodes: number[] = [];\nfor (let i = cc(\"0\"); i <= cc(\"9\"); i++) {\n  digitsCharCodes.push(i);\n}\n\nexport const wordCharCodes: number[] = [cc(\"_\")].concat(digitsCharCodes);\nfor (let i = cc(\"a\"); i <= cc(\"z\"); i++) {\n  wordCharCodes.push(i);\n}\n\nfor (let i = cc(\"A\"); i <= cc(\"Z\"); i++) {\n  wordCharCodes.push(i);\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#character-classes\nexport const whitespaceCodes: number[] = [\n  cc(\" \"),\n  cc(\"\\f\"),\n  cc(\"\\n\"),\n  cc(\"\\r\"),\n  cc(\"\\t\"),\n  cc(\"\\v\"),\n  cc(\"\\t\"),\n  cc(\"\\u00a0\"),\n  cc(\"\\u1680\"),\n  cc(\"\\u2000\"),\n  cc(\"\\u2001\"),\n  cc(\"\\u2002\"),\n  cc(\"\\u2003\"),\n  cc(\"\\u2004\"),\n  cc(\"\\u2005\"),\n  cc(\"\\u2006\"),\n  cc(\"\\u2007\"),\n  cc(\"\\u2008\"),\n  cc(\"\\u2009\"),\n  cc(\"\\u200a\"),\n  cc(\"\\u2028\"),\n  cc(\"\\u2029\"),\n  cc(\"\\u202f\"),\n  cc(\"\\u205f\"),\n  cc(\"\\u3000\"),\n  cc(\"\\ufeff\"),\n];\n","import type {\n  Alternative,\n  Assertion,\n  Atom,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  Location,\n  Quantifier,\n  Range,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n  Term,\n} from \"../types\";\nimport {\n  addFlag,\n  ASSERT_EXISTS,\n  ASSERT_NEVER_REACH_HERE,\n  cc,\n  insertToSet,\n  isCharacter,\n} from \"./utils.js\";\nimport {\n  digitsCharCodes,\n  whitespaceCodes,\n  wordCharCodes,\n} from \"./character-classes.js\";\n\n// consts and utilities\nconst hexDigitPattern = /[0-9a-fA-F]/;\nconst decimalPattern = /[0-9]/;\nconst decimalPatternNoZero = /[1-9]/;\n\n// https://hackernoon.com/the-madness-of-parsing-real-world-javascript-regexps-d9ee336df983\n// https://www.ecma-international.org/ecma-262/8.0/index.html#prod-Pattern\nexport class RegExpParser {\n  protected idx: number = 0;\n  protected input: string = \"\";\n  protected groupIdx: number = 0;\n\n  protected saveState() {\n    return {\n      idx: this.idx,\n      input: this.input,\n      groupIdx: this.groupIdx,\n    };\n  }\n\n  protected restoreState(newState: {\n    idx: number;\n    input: string;\n    groupIdx: number;\n  }) {\n    this.idx = newState.idx;\n    this.input = newState.input;\n    this.groupIdx = newState.groupIdx;\n  }\n\n  public pattern(input: string): RegExpPattern {\n    // parser state\n    this.idx = 0;\n    this.input = input;\n    this.groupIdx = 0;\n\n    this.consumeChar(\"/\");\n    const value = this.disjunction();\n    this.consumeChar(\"/\");\n\n    const flags: RegExpFlags = {\n      type: \"Flags\",\n      loc: { begin: this.idx, end: input.length },\n      global: false,\n      ignoreCase: false,\n      multiLine: false,\n      unicode: false,\n      sticky: false,\n    };\n\n    while (this.isRegExpFlag()) {\n      switch (this.popChar()) {\n        case \"g\":\n          addFlag(flags, \"global\");\n          break;\n        case \"i\":\n          addFlag(flags, \"ignoreCase\");\n          break;\n        case \"m\":\n          addFlag(flags, \"multiLine\");\n          break;\n        case \"u\":\n          addFlag(flags, \"unicode\");\n          break;\n        case \"y\":\n          addFlag(flags, \"sticky\");\n          break;\n      }\n    }\n\n    if (this.idx !== this.input.length) {\n      throw Error(\"Redundant input: \" + this.input.substring(this.idx));\n    }\n    return {\n      type: \"Pattern\",\n      flags: flags,\n      value: value,\n      loc: this.loc(0),\n    };\n  }\n\n  protected disjunction(): Disjunction {\n    const alts = [];\n    const begin = this.idx;\n\n    alts.push(this.alternative());\n\n    while (this.peekChar() === \"|\") {\n      this.consumeChar(\"|\");\n      alts.push(this.alternative());\n    }\n\n    return { type: \"Disjunction\", value: alts, loc: this.loc(begin) };\n  }\n\n  protected alternative(): Alternative {\n    const terms = [];\n    const begin = this.idx;\n\n    while (this.isTerm()) {\n      terms.push(this.term());\n    }\n\n    return { type: \"Alternative\", value: terms, loc: this.loc(begin) };\n  }\n\n  protected term(): Term {\n    if (this.isAssertion()) {\n      return this.assertion();\n    } else {\n      return this.atom();\n    }\n  }\n\n  protected assertion(): Assertion {\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"^\":\n        return {\n          type: \"StartAnchor\",\n          loc: this.loc(begin),\n        };\n      case \"$\":\n        return { type: \"EndAnchor\", loc: this.loc(begin) };\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.popChar()) {\n          case \"b\":\n            return {\n              type: \"WordBoundary\",\n              loc: this.loc(begin),\n            };\n          case \"B\":\n            return {\n              type: \"NonWordBoundary\",\n              loc: this.loc(begin),\n            };\n        }\n        // istanbul ignore next\n        throw Error(\"Invalid Assertion Escape\");\n      // '(?=' or '(?!'\n      case \"(\":\n        this.consumeChar(\"?\");\n\n        let type: \"Lookahead\" | \"NegativeLookahead\" | undefined;\n        switch (this.popChar()) {\n          case \"=\":\n            type = \"Lookahead\";\n            break;\n          case \"!\":\n            type = \"NegativeLookahead\";\n            break;\n        }\n        ASSERT_EXISTS(type);\n\n        const disjunction = this.disjunction();\n\n        this.consumeChar(\")\");\n\n        return {\n          type: type!,\n          value: disjunction,\n          loc: this.loc(begin),\n        };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected quantifier(\n    isBacktracking: boolean = false,\n  ): Quantifier | undefined {\n    let range: Partial<Quantifier> | undefined = undefined;\n    const begin = this.idx;\n    switch (this.popChar()) {\n      case \"*\":\n        range = {\n          atLeast: 0,\n          atMost: Infinity,\n        };\n        break;\n      case \"+\":\n        range = {\n          atLeast: 1,\n          atMost: Infinity,\n        };\n        break;\n      case \"?\":\n        range = {\n          atLeast: 0,\n          atMost: 1,\n        };\n        break;\n      case \"{\":\n        const atLeast = this.integerIncludingZero();\n        switch (this.popChar()) {\n          case \"}\":\n            range = {\n              atLeast: atLeast,\n              atMost: atLeast,\n            };\n            break;\n          case \",\":\n            let atMost;\n            if (this.isDigit()) {\n              atMost = this.integerIncludingZero();\n              range = {\n                atLeast: atLeast,\n                atMost: atMost,\n              };\n            } else {\n              range = {\n                atLeast: atLeast,\n                atMost: Infinity,\n              };\n            }\n            this.consumeChar(\"}\");\n            break;\n        }\n        // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n        // causes severe performance degradations\n        if (isBacktracking === true && range === undefined) {\n          return undefined;\n        }\n        ASSERT_EXISTS(range);\n        break;\n    }\n\n    // throwing exceptions from \"ASSERT_EXISTS\" during backtracking\n    // causes severe performance degradations\n    if (isBacktracking === true && range === undefined) {\n      return undefined;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(range)) {\n      if (this.peekChar(0) === \"?\") {\n        this.consumeChar(\"?\");\n        range.greedy = false;\n      } else {\n        range.greedy = true;\n      }\n\n      range.type = \"Quantifier\";\n      range.loc = this.loc(begin);\n      return range as Quantifier;\n    }\n  }\n\n  protected atom(): Atom {\n    let atom: Omit<Atom, \"loc\" | \"type\"> | undefined;\n    const begin = this.idx;\n    switch (this.peekChar()) {\n      case \".\":\n        atom = this.dotAll();\n        break;\n      case \"\\\\\":\n        atom = this.atomEscape();\n        break;\n      case \"[\":\n        atom = this.characterClass();\n        break;\n      case \"(\":\n        atom = this.group();\n        break;\n    }\n\n    if (atom === undefined && this.isPatternCharacter()) {\n      atom = this.patternCharacter();\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS<Atom>(atom)) {\n      atom.loc = this.loc(begin);\n\n      if (this.isQuantifier()) {\n        atom.quantifier = this.quantifier();\n      }\n\n      return atom;\n    }\n\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected dotAll(): Omit<Set, \"loc\"> {\n    this.consumeChar(\".\");\n    return {\n      type: \"Set\",\n      complement: true,\n      value: [cc(\"\\n\"), cc(\"\\r\"), cc(\"\\u2028\"), cc(\"\\u2029\")],\n    };\n  }\n\n  protected atomEscape(): Omit<GroupBackReference | Set | Character, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n\n    switch (this.peekChar()) {\n      case \"1\":\n      case \"2\":\n      case \"3\":\n      case \"4\":\n      case \"5\":\n      case \"6\":\n      case \"7\":\n      case \"8\":\n      case \"9\":\n        return this.decimalEscapeAtom();\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected decimalEscapeAtom(): Omit<GroupBackReference, \"loc\"> {\n    const value = this.positiveInteger();\n\n    return { type: \"GroupBackReference\", value: value };\n  }\n\n  protected characterClassEscape(): Omit<Set, \"loc\"> {\n    let set: (number | Range)[] | undefined;\n    let complement = false;\n    switch (this.popChar()) {\n      case \"d\":\n        set = digitsCharCodes;\n        break;\n      case \"D\":\n        set = digitsCharCodes;\n        complement = true;\n        break;\n      case \"s\":\n        set = whitespaceCodes;\n        break;\n      case \"S\":\n        set = whitespaceCodes;\n        complement = true;\n        break;\n      case \"w\":\n        set = wordCharCodes;\n        break;\n      case \"W\":\n        set = wordCharCodes;\n        complement = true;\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(set)) {\n      return { type: \"Set\", value: set, complement: complement };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlEscapeAtom(): Omit<Character, \"loc\"> {\n    let escapeCode;\n    switch (this.popChar()) {\n      case \"f\":\n        escapeCode = cc(\"\\f\");\n        break;\n      case \"n\":\n        escapeCode = cc(\"\\n\");\n        break;\n      case \"r\":\n        escapeCode = cc(\"\\r\");\n        break;\n      case \"t\":\n        escapeCode = cc(\"\\t\");\n        break;\n      case \"v\":\n        escapeCode = cc(\"\\v\");\n        break;\n    }\n\n    // istanbul ignore else\n    if (ASSERT_EXISTS(escapeCode)) {\n      return { type: \"Character\", value: escapeCode };\n    }\n    // istanbul ignore next\n    return ASSERT_NEVER_REACH_HERE();\n  }\n\n  protected controlLetterEscapeAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"c\");\n    const letter = this.popChar();\n    if (/[a-zA-Z]/.test(letter) === false) {\n      throw Error(\"Invalid \");\n    }\n\n    const letterCode = letter.toUpperCase().charCodeAt(0) - 64;\n    return { type: \"Character\", value: letterCode };\n  }\n\n  protected nulCharacterAtom(): Omit<Character, \"loc\"> {\n    // TODO implement '[lookahead ∉ DecimalDigit]'\n    // TODO: for the deprecated octal escape sequence\n    this.consumeChar(\"0\");\n    return { type: \"Character\", value: cc(\"\\0\") };\n  }\n\n  protected hexEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"x\");\n    return this.parseHexDigits(2);\n  }\n\n  protected regExpUnicodeEscapeSequenceAtom(): Omit<Character, \"loc\"> {\n    this.consumeChar(\"u\");\n    return this.parseHexDigits(4);\n  }\n\n  protected identityEscapeAtom(): Omit<Character, \"loc\"> {\n    // TODO: implement \"SourceCharacter but not UnicodeIDContinue\"\n    // // http://unicode.org/reports/tr31/#Specific_Character_Adjustments\n    const escapedChar = this.popChar();\n    return { type: \"Character\", value: cc(escapedChar) };\n  }\n\n  protected classPatternCharacterAtom(): Omit<Character, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \"]\":\n        throw Error(\"TBD\");\n      default:\n        const nextChar = this.popChar();\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n\n  protected characterClass(): Omit<Set, \"loc\"> {\n    const set: (number | Range)[] = [];\n    let complement = false;\n    this.consumeChar(\"[\");\n    if (this.peekChar(0) === \"^\") {\n      this.consumeChar(\"^\");\n      complement = true;\n    }\n\n    while (this.isClassAtom()) {\n      const from = this.classAtom();\n      const isFromSingleChar = from.type === \"Character\";\n      if (isCharacter(from) && this.isRangeDash()) {\n        this.consumeChar(\"-\");\n        const to = this.classAtom();\n        const isToSingleChar = to.type === \"Character\";\n\n        // a range can only be used when both sides are single characters\n        if (isCharacter(to)) {\n          if (to.value < from.value) {\n            throw Error(\"Range out of order in character class\");\n          }\n          set.push({ from: from.value, to: to.value });\n        } else {\n          // literal dash\n          insertToSet(from.value, set);\n          set.push(cc(\"-\"));\n          insertToSet(to.value, set);\n        }\n      } else {\n        insertToSet(from.value, set);\n      }\n    }\n\n    this.consumeChar(\"]\");\n\n    return { type: \"Set\", complement: complement, value: set };\n  }\n\n  protected classAtom(): Omit<Character | Set, \"loc\"> {\n    switch (this.peekChar()) {\n      // istanbul ignore next\n      case \"]\":\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n        throw Error(\"TBD\");\n      case \"\\\\\":\n        return this.classEscape();\n      default:\n        return this.classPatternCharacterAtom();\n    }\n  }\n\n  protected classEscape(): Omit<Character | Set, \"loc\"> {\n    this.consumeChar(\"\\\\\");\n    switch (this.peekChar()) {\n      // Matches a backspace.\n      // (Not to be confused with \\b word boundary outside characterClass)\n      case \"b\":\n        this.consumeChar(\"b\");\n        return { type: \"Character\", value: cc(\"\\u0008\") };\n      case \"d\":\n      case \"D\":\n      case \"s\":\n      case \"S\":\n      case \"w\":\n      case \"W\":\n        return this.characterClassEscape();\n      case \"f\":\n      case \"n\":\n      case \"r\":\n      case \"t\":\n      case \"v\":\n        return this.controlEscapeAtom();\n      case \"c\":\n        return this.controlLetterEscapeAtom();\n      case \"0\":\n        return this.nulCharacterAtom();\n      case \"x\":\n        return this.hexEscapeSequenceAtom();\n      case \"u\":\n        return this.regExpUnicodeEscapeSequenceAtom();\n      default:\n        return this.identityEscapeAtom();\n    }\n  }\n\n  protected group(): Omit<Group, \"loc\"> {\n    let capturing = true;\n    this.consumeChar(\"(\");\n    switch (this.peekChar(0)) {\n      case \"?\":\n        this.consumeChar(\"?\");\n        this.consumeChar(\":\");\n        capturing = false;\n        break;\n      default:\n        this.groupIdx++;\n        break;\n    }\n    const value = this.disjunction();\n    this.consumeChar(\")\");\n\n    const groupAst: Omit<Group, \"loc\"> = {\n      type: \"Group\",\n      capturing: capturing,\n      value: value,\n    };\n\n    if (capturing) {\n      groupAst[\"idx\"] = this.groupIdx;\n    }\n\n    return groupAst;\n  }\n\n  protected positiveInteger(): number {\n    let number = this.popChar();\n\n    // istanbul ignore next - can't ever get here due to previous lookahead checks\n    // still implementing this error checking in case this ever changes.\n    if (decimalPatternNoZero.test(number) === false) {\n      throw Error(\"Expecting a positive integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected integerIncludingZero(): number {\n    let number = this.popChar();\n    if (decimalPattern.test(number) === false) {\n      throw Error(\"Expecting an integer\");\n    }\n\n    while (decimalPattern.test(this.peekChar(0))) {\n      number += this.popChar();\n    }\n\n    return parseInt(number, 10);\n  }\n\n  protected patternCharacter(): Omit<Character, \"loc\"> {\n    const nextChar = this.popChar();\n    switch (nextChar) {\n      // istanbul ignore next\n      case \"\\n\":\n      // istanbul ignore next\n      case \"\\r\":\n      // istanbul ignore next\n      case \"\\u2028\":\n      // istanbul ignore next\n      case \"\\u2029\":\n      // istanbul ignore next\n      case \"^\":\n      // istanbul ignore next\n      case \"$\":\n      // istanbul ignore next\n      case \"\\\\\":\n      // istanbul ignore next\n      case \".\":\n      // istanbul ignore next\n      case \"*\":\n      // istanbul ignore next\n      case \"+\":\n      // istanbul ignore next\n      case \"?\":\n      // istanbul ignore next\n      case \"(\":\n      // istanbul ignore next\n      case \")\":\n      // istanbul ignore next\n      case \"[\":\n      // istanbul ignore next\n      case \"|\":\n        // istanbul ignore next\n        throw Error(\"TBD\");\n      default:\n        return { type: \"Character\", value: cc(nextChar) };\n    }\n  }\n  protected isRegExpFlag(): boolean {\n    switch (this.peekChar(0)) {\n      case \"g\":\n      case \"i\":\n      case \"m\":\n      case \"u\":\n      case \"y\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isRangeDash(): boolean {\n    return this.peekChar() === \"-\" && this.isClassAtom(1);\n  }\n\n  protected isDigit(): boolean {\n    return decimalPattern.test(this.peekChar(0));\n  }\n\n  protected isClassAtom(howMuch = 0): boolean {\n    switch (this.peekChar(howMuch)) {\n      case \"]\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected isTerm() {\n    return this.isAtom() || this.isAssertion();\n  }\n\n  protected isAtom(): boolean {\n    if (this.isPatternCharacter()) {\n      return true;\n    }\n\n    switch (this.peekChar(0)) {\n      case \".\":\n      case \"\\\\\": // atomEscape\n      case \"[\": // characterClass\n      // TODO: isAtom must be called before isAssertion - disambiguate\n      case \"(\": // group\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  protected isAssertion(): boolean {\n    switch (this.peekChar(0)) {\n      case \"^\":\n      case \"$\":\n        return true;\n      // '\\b' or '\\B'\n      case \"\\\\\":\n        switch (this.peekChar(1)) {\n          case \"b\":\n          case \"B\":\n            return true;\n          default:\n            return false;\n        }\n      // '(?=' or '(?!'\n      case \"(\":\n        return (\n          this.peekChar(1) === \"?\" &&\n          (this.peekChar(2) === \"=\" || this.peekChar(2) === \"!\")\n        );\n      default:\n        return false;\n    }\n  }\n\n  protected isQuantifier(): boolean {\n    const prevState = this.saveState();\n    try {\n      return this.quantifier(true) !== undefined;\n    } catch (e) {\n      return false;\n    } finally {\n      this.restoreState(prevState);\n    }\n  }\n\n  protected isPatternCharacter(): boolean {\n    switch (this.peekChar()) {\n      case \"^\":\n      case \"$\":\n      case \"\\\\\":\n      case \".\":\n      case \"*\":\n      case \"+\":\n      case \"?\":\n      case \"(\":\n      case \")\":\n      case \"[\":\n      case \"|\":\n      case \"/\":\n      case \"\\n\":\n      case \"\\r\":\n      case \"\\u2028\":\n      case \"\\u2029\":\n        return false;\n      default:\n        return true;\n    }\n  }\n\n  protected parseHexDigits(howMany: number): Omit<Character, \"loc\"> {\n    let hexString = \"\";\n    for (let i = 0; i < howMany; i++) {\n      const hexChar = this.popChar();\n      if (hexDigitPattern.test(hexChar) === false) {\n        throw Error(\"Expecting a HexDecimal digits\");\n      }\n      hexString += hexChar;\n    }\n    const charCode = parseInt(hexString, 16);\n    return { type: \"Character\", value: charCode };\n  }\n\n  protected peekChar(howMuch = 0): string {\n    return this.input[this.idx + howMuch];\n  }\n\n  protected popChar(): string {\n    const nextChar = this.peekChar(0);\n    this.consumeChar(undefined);\n    return nextChar;\n  }\n\n  protected consumeChar(char: string | undefined): void {\n    if (char !== undefined && this.input[this.idx] !== char) {\n      throw Error(\n        \"Expected: '\" +\n          char +\n          \"' but found: '\" +\n          this.input[this.idx] +\n          \"' at offset: \" +\n          this.idx,\n      );\n    }\n\n    if (this.idx >= this.input.length) {\n      throw Error(\"Unexpected end of input\");\n    }\n    this.idx++;\n  }\n\n  protected loc(begin: number): Location {\n    return { begin: begin, end: this.idx };\n  }\n}\n","import type {\n  Alternative,\n  Assertion,\n  Character,\n  Disjunction,\n  Group,\n  GroupBackReference,\n  IRegExpAST,\n  Quantifier,\n  RegExpAstPart,\n  RegExpFlags,\n  RegExpPattern,\n  Set,\n} from \"../types\";\n\nexport class BaseRegExpVisitor {\n  public visitChildren(node: IRegExpAST) {\n    for (const key in node) {\n      const child = (node as any)[key];\n      /* istanbul ignore else */\n      if (node.hasOwnProperty(key)) {\n        if (child.type !== undefined) {\n          this.visit(child);\n        } else if (Array.isArray(child)) {\n          child.forEach((subChild) => {\n            this.visit(subChild);\n          }, this);\n        }\n      }\n    }\n  }\n\n  public visit(node: RegExpAstPart): void {\n    switch (node.type) {\n      case \"Pattern\":\n        this.visitPattern(node);\n        break;\n      case \"Flags\":\n        this.visitFlags(node);\n        break;\n      case \"Disjunction\":\n        this.visitDisjunction(node);\n        break;\n      case \"Alternative\":\n        this.visitAlternative(node);\n        break;\n      case \"StartAnchor\":\n        this.visitStartAnchor(node);\n        break;\n      case \"EndAnchor\":\n        this.visitEndAnchor(node);\n        break;\n      case \"WordBoundary\":\n        this.visitWordBoundary(node);\n        break;\n      case \"NonWordBoundary\":\n        this.visitNonWordBoundary(node);\n        break;\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        break;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        break;\n      case \"Character\":\n        this.visitCharacter(node);\n        break;\n      case \"Set\":\n        this.visitSet(node);\n        break;\n      case \"Group\":\n        this.visitGroup(node);\n        break;\n      case \"GroupBackReference\":\n        this.visitGroupBackReference(node);\n        break;\n      case \"Quantifier\":\n        this.visitQuantifier(node);\n        break;\n    }\n\n    this.visitChildren(node);\n  }\n\n  public visitPattern(node: RegExpPattern): void {}\n\n  public visitFlags(node: RegExpFlags): void {}\n\n  public visitDisjunction(node: Disjunction): void {}\n\n  public visitAlternative(node: Alternative): void {}\n\n  // Assertion\n  public visitStartAnchor(node: Assertion): void {}\n\n  public visitEndAnchor(node: Assertion): void {}\n\n  public visitWordBoundary(node: Assertion): void {}\n\n  public visitNonWordBoundary(node: Assertion): void {}\n\n  public visitLookahead(node: Assertion): void {}\n\n  public visitNegativeLookahead(node: Assertion): void {}\n\n  // atoms\n  public visitCharacter(node: Character): void {}\n\n  public visitSet(node: Set): void {}\n\n  public visitGroup(node: Group): void {}\n\n  public visitGroupBackReference(node: GroupBackReference): void {}\n\n  public visitQuantifier(node: Quantifier): void {}\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Set, Group, Character, IRegExpAST } from '@chevrotain/regexp-to-ast';\nimport { RegExpParser, BaseRegExpVisitor } from '@chevrotain/regexp-to-ast';\n\nexport const NEWLINE_REGEXP = /\\r?\\n/gm;\n\nconst regexpParser = new RegExpParser();\n\n/**\n * This class is in charge of heuristically identifying start/end tokens of terminals.\n *\n * The way this works is by doing the following:\n * 1. Traverse the regular expression in the \"start state\"\n * 2. Add any encountered sets/single characters to the \"start regexp\"\n * 3. Once we encounter any variable-length content (i.e. with quantifiers such as +/?/*), we enter the \"end state\"\n * 4. In the end state, any sets/single characters are added to an \"end stack\".\n * 5. If we re-encounter any variable-length content we reset the end stack\n * 6. We continue visiting the regex until the end, reseting the end stack and rebuilding it as necessary\n *\n * After traversing a regular expression the `startRegexp/endRegexp` properties allow access to the stored start/end of the terminal\n */\nclass TerminalRegExpVisitor extends BaseRegExpVisitor {\n\n    private isStarting = true;\n    startRegexp: string;\n    private endRegexpStack: string[] = [];\n    multiline = false;\n    regex: string;\n\n    get endRegex(): string {\n        return this.endRegexpStack.join('');\n    }\n\n    reset(regex: string): void {\n        this.multiline = false;\n        this.regex = regex;\n        this.startRegexp = '';\n        this.isStarting = true;\n        this.endRegexpStack = [];\n    }\n\n    override visitGroup(node: Group) {\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        }\n    }\n\n    override visitCharacter(node: Character): void {\n        const char = String.fromCharCode(node.value);\n        if (!this.multiline && char === '\\n') {\n            this.multiline = true;\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const escapedChar = escapeRegExp(char);\n            this.endRegexpStack.push(escapedChar);\n            if (this.isStarting) {\n                this.startRegexp += escapedChar;\n            }\n        }\n    }\n\n    override visitSet(node: Set): void {\n        if (!this.multiline) {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            const regex = new RegExp(set);\n            this.multiline = Boolean('\\n'.match(regex));\n        }\n        if (node.quantifier) {\n            this.isStarting = false;\n            this.endRegexpStack = [];\n        } else {\n            const set = this.regex.substring(node.loc.begin, node.loc.end);\n            this.endRegexpStack.push(set);\n            if (this.isStarting) {\n                this.startRegexp += set;\n            }\n        }\n    }\n\n    override visitChildren(node: IRegExpAST): void {\n        if (node.type === 'Group') {\n            // Ignore children of groups with quantifier (+/*/?)\n            // These groups are unrelated to start/end tokens of terminals\n            const group = node as Group;\n            if (group.quantifier) {\n                return;\n            }\n        }\n        super.visitChildren(node);\n    }\n}\n\nconst visitor = new TerminalRegExpVisitor();\n\nexport function getTerminalParts(regexp: RegExp | string): Array<{ start: string, end: string }> {\n    try {\n        if (typeof regexp !== 'string') {\n            regexp = regexp.source;\n        }\n        regexp = `/${regexp}/`;\n        const pattern = regexpParser.pattern(regexp);\n        const parts: Array<{ start: string, end: string }> = [];\n        for (const alternative of pattern.value.value) {\n            visitor.reset(regexp);\n            visitor.visit(alternative);\n            parts.push({\n                start: visitor.startRegexp,\n                end: visitor.endRegex\n            });\n        }\n        return parts;\n    } catch {\n        return [];\n    }\n}\n\nexport function isMultilineComment(regexp: RegExp | string): boolean {\n    try {\n        if (typeof regexp === 'string') {\n            regexp = new RegExp(regexp);\n        }\n        regexp = regexp.toString();\n        visitor.reset(regexp);\n        // Parsing the pattern might fail (since it's user code)\n        visitor.visit(regexpParser.pattern(regexp));\n        return visitor.multiline;\n    } catch {\n        return false;\n    }\n}\n\nexport function isWhitespace(value: RegExp | string): boolean {\n    const regexp = typeof value === 'string' ? new RegExp(value) : value;\n    return regexp.test(' ');\n}\n\nexport function escapeRegExp(value: string): string {\n    return value.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nexport function getCaseInsensitivePattern(keyword: string): string {\n    return Array.prototype.map.call(keyword, letter =>\n        /\\w/.test(letter) ? `[${letter.toLowerCase()}${letter.toUpperCase()}]` : escapeRegExp(letter)\n    ).join('');\n}\n\n/**\n * Determines whether the given input has a partial match with the specified regex.\n * @param regex The regex to partially match against\n * @param input The input string\n * @returns Whether any match exists.\n */\nexport function partialMatches(regex: RegExp | string, input: string): boolean {\n    const partial = partialRegExp(regex);\n    const match = input.match(partial);\n    return !!match && match[0].length > 0;\n}\n\n/**\n * Builds a partial regex from the input regex. A partial regex is able to match incomplete input strings. E.g.\n * a partial regex constructed from `/ab/` is able to match the string `a` without needing a following `b` character. However it won't match `b` alone.\n * @param regex The input regex to be converted.\n * @returns A partial regex constructed from the input regex.\n */\nexport function partialRegExp(regex: RegExp | string): RegExp {\n    if (typeof regex === 'string') {\n        regex = new RegExp(regex);\n    }\n    const re = regex, source = regex.source;\n    let i = 0;\n\n    function process() {\n        let result = '',\n            tmp;\n\n        function appendRaw(nbChars: number) {\n            result += source.substr(i, nbChars);\n            i += nbChars;\n        }\n\n        function appendOptional(nbChars: number) {\n            result += '(?:' + source.substr(i, nbChars) + '|$)';\n            i += nbChars;\n        }\n\n        while (i < source.length) {\n            switch (source[i]) {\n                case '\\\\':\n                    switch (source[i + 1]) {\n                        case 'c':\n                            appendOptional(3);\n                            break;\n                        case 'x':\n                            appendOptional(4);\n                            break;\n                        case 'u':\n                            if (re.unicode) {\n                                if (source[i + 2] === '{') {\n                                    appendOptional(source.indexOf('}', i) - i + 1);\n                                } else {\n                                    appendOptional(6);\n                                }\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'p':\n                        case 'P':\n                            if (re.unicode) {\n                                appendOptional(source.indexOf('}', i) - i + 1);\n                            } else {\n                                appendOptional(2);\n                            }\n                            break;\n                        case 'k':\n                            appendOptional(source.indexOf('>', i) - i + 1);\n                            break;\n                        default:\n                            appendOptional(2);\n                            break;\n                    }\n                    break;\n\n                case '[':\n                    tmp = /\\[(?:\\\\.|.)*?\\]/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source) || [];\n                    appendOptional(tmp[0].length);\n                    break;\n\n                case '|':\n                case '^':\n                case '$':\n                case '*':\n                case '+':\n                case '?':\n                    appendRaw(1);\n                    break;\n                case '{':\n                    tmp = /\\{\\d+,?\\d*\\}/g;\n                    tmp.lastIndex = i;\n                    tmp = tmp.exec(source);\n                    if (tmp) {\n                        appendRaw(tmp[0].length);\n                    } else {\n                        appendOptional(1);\n                    }\n                    break;\n                case '(':\n                    if (source[i + 1] === '?') {\n                        switch (source[i + 2]) {\n                            case ':':\n                                result += '(?:';\n                                i += 3;\n                                result += process() + '|$)';\n                                break;\n                            case '=':\n                                result += '(?=';\n                                i += 3;\n                                result += process() + ')';\n                                break;\n                            case '!':\n                                tmp = i;\n                                i += 3;\n                                process();\n                                result += source.substr(tmp, i - tmp);\n                                break;\n                            case '<':\n                                switch (source[i + 3]) {\n                                    case '=':\n                                    case '!':\n                                        tmp = i;\n                                        i += 4;\n                                        process();\n                                        result += source.substr(tmp, i - tmp);\n                                        break;\n                                    default:\n                                        appendRaw(source.indexOf('>', i) - i + 1);\n                                        result += process() + '|$)';\n                                        break;\n                                }\n                                break;\n                        }\n                    } else {\n                        appendRaw(1);\n                        result += process() + '|$)';\n                    }\n                    break;\n                case ')':\n                    ++i;\n                    return result;\n                default:\n                    appendOptional(1);\n                    break;\n            }\n        }\n\n        return result;\n    }\n\n    return new RegExp(process(), regex.flags);\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { assertUnreachable } from '../utils/errors.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { getContainerOfType, streamAllContents } from './ast-utils.js';\nimport { streamCst } from './cst-utils.js';\nimport { escapeRegExp } from './regexp-utils.js';\n\n/**\n * Returns the entry rule of the given grammar, if any. If the grammar file does not contain an entry rule,\n * the result is `undefined`.\n */\nexport function getEntryRule(grammar: ast.Grammar): ast.ParserRule | undefined {\n    return grammar.rules.find(e => ast.isParserRule(e) && e.entry) as ast.ParserRule;\n}\n\n/**\n * Returns all hidden terminal rules of the given grammar, if any.\n */\nexport function getHiddenRules(grammar: ast.Grammar) {\n    return grammar.rules.filter((e): e is ast.TerminalRule => ast.isTerminalRule(e) && e.hidden);\n}\n\n/**\n * Returns all rules that can be reached from the topmost rules of the specified grammar (entry and hidden terminal rules).\n *\n * @param grammar The grammar that contains all rules\n * @param allTerminals Whether or not to include terminals that are referenced only by other terminals\n * @returns A list of referenced parser and terminal rules. If the grammar contains no entry rule,\n *      this function returns all rules of the specified grammar.\n */\nexport function getAllReachableRules(grammar: ast.Grammar, allTerminals: boolean): Set<ast.AbstractRule> {\n    const ruleNames = new Set<string>();\n    const entryRule = getEntryRule(grammar);\n    if (!entryRule) {\n        return new Set(grammar.rules);\n    }\n\n    const topMostRules = [entryRule as ast.AbstractRule].concat(getHiddenRules(grammar));\n    for (const rule of topMostRules) {\n        ruleDfs(rule, ruleNames, allTerminals);\n    }\n\n    const rules = new Set<ast.AbstractRule>();\n    for (const rule of grammar.rules) {\n        if (ruleNames.has(rule.name) || (ast.isTerminalRule(rule) && rule.hidden)) {\n            rules.add(rule);\n        }\n    }\n    return rules;\n}\n\nfunction ruleDfs(rule: ast.AbstractRule, visitedSet: Set<string>, allTerminals: boolean): void {\n    visitedSet.add(rule.name);\n    streamAllContents(rule).forEach(node => {\n        if (ast.isRuleCall(node) || (allTerminals && ast.isTerminalRuleCall(node))) {\n            const refRule = node.rule.ref;\n            if (refRule && !visitedSet.has(refRule.name)) {\n                ruleDfs(refRule, visitedSet, allTerminals);\n            }\n        }\n    });\n}\n\n/**\n * Determines the grammar expression used to parse a cross-reference (usually a reference to a terminal rule).\n * A cross-reference can declare this expression explicitly in the form `[Type : Terminal]`, but if `Terminal`\n * is omitted, this function attempts to infer it from the name of the referenced `Type` (using `findNameAssignment`).\n *\n * Returns the grammar expression used to parse the given cross-reference, or `undefined` if it is not declared\n * and cannot be inferred.\n */\nexport function getCrossReferenceTerminal(crossRef: ast.CrossReference): ast.AbstractElement | undefined {\n    if (crossRef.terminal) {\n        return crossRef.terminal;\n    } else if (crossRef.type.ref) {\n        const nameAssigment = findNameAssignment(crossRef.type.ref);\n        return nameAssigment?.terminal;\n    }\n    return undefined;\n}\n\n/**\n * Determines whether the given terminal rule represents a comment. This is true if the rule is marked\n * as `hidden` and it does not match white space. This means every hidden token (i.e. excluded from the AST)\n * that contains visible characters is considered a comment.\n */\nexport function isCommentTerminal(terminalRule: ast.TerminalRule): boolean {\n    return terminalRule.hidden && !terminalRegex(terminalRule).test(' ');\n}\n\n/**\n * Find all CST nodes within the given node that contribute to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is an empty array.\n * @param property A property name of the constructed AST node. If this is undefined, the result is an empty array.\n */\nexport function findNodesForProperty(node: CstNode | undefined, property: string | undefined): CstNode[] {\n    if (!node || !property) {\n        return [];\n    }\n    return findNodesForPropertyInternal(node, property, node.astNode, true);\n}\n\n/**\n * Find a single CST node within the given node that contributes to the specified property.\n *\n * @param node A CST node in which to look for property assignments. If this is undefined, the result is `undefined`.\n * @param property A property name of the constructed AST node. If this is undefined, the result is `undefined`.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of assignments to the property, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForProperty(node: CstNode | undefined, property: string | undefined, index?: number): CstNode | undefined {\n    if (!node || !property) {\n        return undefined;\n    }\n    const nodes = findNodesForPropertyInternal(node, property, node.astNode, true);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nfunction findNodesForPropertyInternal(node: CstNode, property: string, element: AstNode | undefined, first: boolean): CstNode[] {\n    if (!first) {\n        const nodeFeature = getContainerOfType(node.grammarSource, ast.isAssignment);\n        if (nodeFeature && nodeFeature.feature === property) {\n            return [node];\n        }\n    }\n    if (isCompositeCstNode(node) && node.astNode === element) {\n        return node.content.flatMap(e => findNodesForPropertyInternal(e, property, element, false));\n    }\n    return [];\n}\n\n/**\n * Find all CST nodes within the given node that correspond to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is an empty array.\n * @param keyword A keyword as specified in the grammar.\n */\nexport function findNodesForKeyword(node: CstNode | undefined, keyword: string): CstNode[] {\n    if (!node) {\n        return [];\n    }\n    return findNodesForKeywordInternal(node, keyword, node?.astNode);\n}\n\n/**\n * Find a single CST node within the given node that corresponds to the specified keyword.\n *\n * @param node A CST node in which to look for keywords. If this is undefined, the result is `undefined`.\n * @param keyword A keyword as specified in the grammar.\n * @param index If no index is specified or the index is less than zero, the first found node is returned. If the\n *        specified index exceeds the number of keyword occurrences, the last found node is returned. Otherwise,\n *        the node with the specified index is returned.\n */\nexport function findNodeForKeyword(node: CstNode | undefined, keyword: string, index?: number): CstNode | undefined {\n    if (!node) {\n        return undefined;\n    }\n    const nodes = findNodesForKeywordInternal(node, keyword, node?.astNode);\n    if (nodes.length === 0) {\n        return undefined;\n    }\n    if (index !== undefined) {\n        index = Math.max(0, Math.min(index, nodes.length - 1));\n    } else {\n        index = 0;\n    }\n    return nodes[index];\n}\n\nexport function findNodesForKeywordInternal(node: CstNode, keyword: string, element: AstNode | undefined): CstNode[] {\n    if (node.astNode !== element) {\n        return [];\n    }\n    if (ast.isKeyword(node.grammarSource) && node.grammarSource.value === keyword) {\n        return [node];\n    }\n    const treeIterator = streamCst(node).iterator();\n    let result: IteratorResult<CstNode>;\n    const keywordNodes: CstNode[] = [];\n    do {\n        result = treeIterator.next();\n        if (!result.done) {\n            const childNode = result.value;\n            if (childNode.astNode === element) {\n                if (ast.isKeyword(childNode.grammarSource) && childNode.grammarSource.value === keyword) {\n                    keywordNodes.push(childNode);\n                }\n            } else {\n                treeIterator.prune();\n            }\n        }\n    } while (!result.done);\n    return keywordNodes;\n}\n\n/**\n * If the given CST node was parsed in the context of a property assignment, the respective `Assignment` grammar\n * node is returned. If no assignment is found, the result is `undefined`.\n *\n * @param cstNode A CST node for which to find a property assignment.\n */\nexport function findAssignment(cstNode: CstNode): ast.Assignment | undefined {\n    const astNode = cstNode.astNode;\n    // Only search until the ast node of the parent cst node is no longer the original ast node\n    // This would make us jump to a preceding rule call, which contains only unrelated assignments\n    while (astNode === cstNode.container?.astNode) {\n        const assignment = getContainerOfType(cstNode.grammarSource, ast.isAssignment);\n        if (assignment) {\n            return assignment;\n        }\n        cstNode = cstNode.container;\n    }\n    return undefined;\n}\n\n/**\n * Find an assignment to the `name` property for the given grammar type. This requires the `type` to be inferred\n * from a parser rule, and that rule must contain an assignment to the `name` property. In all other cases,\n * this function returns `undefined`.\n */\nexport function findNameAssignment(type: ast.AbstractType): ast.Assignment | undefined {\n    let startNode: AstNode = type;\n    if (ast.isInferredType(startNode)) {\n        // for inferred types, the location to start searching for the name-assignment is different\n        if (ast.isAction(startNode.$container)) {\n            // a type which is explicitly inferred by an action: investigate the sibbling of the Action node, i.e. start searching at the Action's parent\n            startNode = startNode.$container.$container!;\n        } else if (ast.isParserRule(startNode.$container)) {\n            // investigate the parser rule with the explicitly inferred type\n            startNode = startNode.$container;\n        } else {\n            assertUnreachable(startNode.$container);\n        }\n    }\n    return findNameAssignmentInternal(type, startNode, new Map());\n}\n\nfunction findNameAssignmentInternal(type: ast.AbstractType, startNode: AstNode, cache: Map<ast.AbstractType, ast.Assignment | undefined>): ast.Assignment | undefined {\n    // the cache is only required to prevent infinite loops\n    function go(node: AstNode, refType: ast.AbstractType): ast.Assignment | undefined {\n        let childAssignment: ast.Assignment | undefined = undefined;\n        const parentAssignment = getContainerOfType(node, ast.isAssignment);\n        // No parent assignment implies unassigned rule call\n        if (!parentAssignment) {\n            childAssignment = findNameAssignmentInternal(refType, refType, cache);\n        }\n        cache.set(type, childAssignment);\n        return childAssignment;\n    }\n\n    if (cache.has(type)) {\n        return cache.get(type);\n    }\n    cache.set(type, undefined);\n    for (const node of streamAllContents(startNode)) {\n        if (ast.isAssignment(node) && node.feature.toLowerCase() === 'name') {\n            cache.set(type, node);\n            return node;\n        } else if (ast.isRuleCall(node) && ast.isParserRule(node.rule.ref)) {\n            return go(node, node.rule.ref);\n        } else if (ast.isSimpleType(node) && node.typeRef?.ref) {\n            return go(node, node.typeRef.ref);\n        }\n    }\n    return undefined;\n}\n\nexport function getActionAtElement(element: ast.AbstractElement): ast.Action | undefined {\n    const parent = element.$container;\n    if (ast.isGroup(parent)) {\n        const elements = parent.elements;\n        const index = elements.indexOf(element);\n        for (let i = index - 1; i >= 0; i--) {\n            const item = elements[i];\n            if (ast.isAction(item)) {\n                return item;\n            } else {\n                const action = streamAllContents(elements[i]).find(ast.isAction);\n                if (action) {\n                    return action;\n                }\n            }\n        }\n    }\n    if (ast.isAbstractElement(parent)) {\n        return getActionAtElement(parent);\n    } else {\n        return undefined;\n    }\n}\n\nexport type Cardinality = '?' | '*' | '+' | undefined;\nexport type Operator = '=' | '+=' | '?=' | undefined;\n\nexport function isOptionalCardinality(cardinality?: Cardinality, element?: ast.AbstractElement): boolean {\n    return cardinality === '?' || cardinality === '*' || (ast.isGroup(element) && Boolean(element.guardCondition));\n}\n\nexport function isArrayCardinality(cardinality?: Cardinality): boolean {\n    return cardinality === '*' || cardinality === '+';\n}\n\nexport function isArrayOperator(operator?: Operator): boolean {\n    return operator === '+=';\n}\n\n/**\n * Determines whether the given parser rule is a _data type rule_, meaning that it has a\n * primitive return type like `number`, `boolean`, etc.\n */\nexport function isDataTypeRule(rule: ast.ParserRule): boolean {\n    return isDataTypeRuleInternal(rule, new Set());\n}\n\nfunction isDataTypeRuleInternal(rule: ast.ParserRule, visited: Set<ast.ParserRule>): boolean {\n    if (visited.has(rule)) {\n        return true;\n    } else {\n        visited.add(rule);\n    }\n    for (const node of streamAllContents(rule)) {\n        if (ast.isRuleCall(node)) {\n            if (!node.rule.ref) {\n                // RuleCall to unresolved rule. Don't assume `rule` is a DataType rule.\n                return false;\n            }\n            if (ast.isParserRule(node.rule.ref) && !isDataTypeRuleInternal(node.rule.ref, visited)) {\n                return false;\n            }\n        } else if (ast.isAssignment(node)) {\n            return false;\n        } else if (ast.isAction(node)) {\n            return false;\n        }\n    }\n    return Boolean(rule.definition);\n}\n\nexport function isDataType(type: ast.Type): boolean {\n    return isDataTypeInternal(type.type, new Set());\n}\n\nfunction isDataTypeInternal(type: ast.TypeDefinition, visited: Set<ast.TypeDefinition>): boolean {\n    if (visited.has(type)) {\n        return true;\n    } else {\n        visited.add(type);\n    }\n    if (ast.isArrayType(type)) {\n        return false;\n    } else if (ast.isReferenceType(type)) {\n        return false;\n    } else if (ast.isUnionType(type)) {\n        return type.types.every(e => isDataTypeInternal(e, visited));\n    } else if (ast.isSimpleType(type)) {\n        if (type.primitiveType !== undefined) {\n            return true;\n        } else if (type.stringType !== undefined) {\n            return true;\n        } else if (type.typeRef !== undefined) {\n            const ref = type.typeRef.ref;\n            if (ast.isType(ref)) {\n                return isDataTypeInternal(ref.type, visited);\n            } else {\n                return false;\n            }\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\nexport function getExplicitRuleType(rule: ast.ParserRule): string | undefined {\n    if (rule.inferredType) {\n        return rule.inferredType.name;\n    } else if (rule.dataType) {\n        return rule.dataType;\n    } else if (rule.returnType) {\n        const refType = rule.returnType.ref;\n        if(refType) {\n            // check if we need to check Action as return type\n            if (ast.isParserRule(refType)) {\n                return refType.name;\n            }  else if(ast.isInterface(refType) || ast.isType(refType)) {\n                return refType.name;\n            }\n        }\n    }\n    return undefined;\n}\n\nexport function getTypeName(type: ast.AbstractType | ast.Action): string {\n    if (ast.isParserRule(type)) {\n        return isDataTypeRule(type) ? type.name : getExplicitRuleType(type) ?? type.name;\n    } else if (ast.isInterface(type) || ast.isType(type) || ast.isReturnType(type)) {\n        return type.name;\n    } else if (ast.isAction(type)) {\n        const actionType = getActionType(type);\n        if (actionType) {\n            return actionType;\n        }\n    } else if (ast.isInferredType(type)) {\n        return type.name;\n    }\n    throw new Error('Cannot get name of Unknown Type');\n}\n\nexport function getActionType(action: ast.Action): string | undefined {\n    if (action.inferredType) {\n        return action.inferredType.name;\n    } else if (action.type?.ref) {\n        return getTypeName(action.type.ref);\n    }\n    return undefined; // not inferring and not referencing a valid type\n}\n\nexport function getRuleType(rule: ast.AbstractRule): string {\n    if (ast.isTerminalRule(rule)) {\n        return rule.type?.name ?? 'string';\n    } else {\n        return isDataTypeRule(rule) ? rule.name : getExplicitRuleType(rule) ?? rule.name;\n    }\n}\n\nexport function terminalRegex(terminalRule: ast.TerminalRule): RegExp {\n    const flags: Flags = {\n        s: false,\n        i: false,\n        u: false\n    };\n    const source = abstractElementToRegex(terminalRule.definition, flags);\n    const flagText = Object.entries(flags).filter(([, value]) => value).map(([name]) => name).join('');\n    return new RegExp(source, flagText);\n}\n\n// Using [\\s\\S]* allows to match everything, compared to . which doesn't match line terminators\nconst WILDCARD = /[\\s\\S]/.source;\n\ntype Flags = {\n    s: boolean;\n    i: boolean;\n    u: boolean;\n}\n\nfunction abstractElementToRegex(element: ast.AbstractElement, flags?: Flags): string {\n    if (ast.isTerminalAlternatives(element)) {\n        return terminalAlternativesToRegex(element);\n    } else if (ast.isTerminalGroup(element)) {\n        return terminalGroupToRegex(element);\n    } else if (ast.isCharacterRange(element)) {\n        return characterRangeToRegex(element);\n    } else if (ast.isTerminalRuleCall(element)) {\n        const rule = element.rule.ref;\n        if (!rule) {\n            throw new Error('Missing rule reference.');\n        }\n        return withCardinality(abstractElementToRegex(rule.definition), {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else if (ast.isNegatedToken(element)) {\n        return negateTokenToRegex(element);\n    } else if (ast.isUntilToken(element)) {\n        return untilTokenToRegex(element);\n    } else if (ast.isRegexToken(element)) {\n        const lastSlash = element.regex.lastIndexOf('/');\n        const source = element.regex.substring(1, lastSlash);\n        const regexFlags = element.regex.substring(lastSlash + 1);\n        if (flags) {\n            flags.i = regexFlags.includes('i');\n            flags.s = regexFlags.includes('s');\n            flags.u = regexFlags.includes('u');\n        }\n        return withCardinality(source, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead,\n            wrap: false\n        });\n    } else if (ast.isWildcard(element)) {\n        return withCardinality(WILDCARD, {\n            cardinality: element.cardinality,\n            lookahead: element.lookahead\n        });\n    } else {\n        throw new Error(`Invalid terminal element: ${element?.$type}`);\n    }\n}\n\nfunction terminalAlternativesToRegex(alternatives: ast.TerminalAlternatives): string {\n    return withCardinality(alternatives.elements.map(e => abstractElementToRegex(e)).join('|'), {\n        cardinality: alternatives.cardinality,\n        lookahead: alternatives.lookahead\n    });\n}\n\nfunction terminalGroupToRegex(group: ast.TerminalGroup): string {\n    return withCardinality(group.elements.map(e => abstractElementToRegex(e)).join(''), {\n        cardinality: group.cardinality,\n        lookahead: group.lookahead\n    });\n}\n\nfunction untilTokenToRegex(until: ast.UntilToken): string {\n    return withCardinality(`${WILDCARD}*?${abstractElementToRegex(until.terminal)}`, {\n        cardinality: until.cardinality,\n        lookahead: until.lookahead\n    });\n}\n\nfunction negateTokenToRegex(negate: ast.NegatedToken): string {\n    return withCardinality(`(?!${abstractElementToRegex(negate.terminal)})${WILDCARD}*?`, {\n        cardinality: negate.cardinality,\n        lookahead: negate.lookahead\n    });\n}\n\nfunction characterRangeToRegex(range: ast.CharacterRange): string {\n    if (range.right) {\n        return withCardinality(`[${keywordToRegex(range.left)}-${keywordToRegex(range.right)}]`, {\n            cardinality: range.cardinality,\n            lookahead: range.lookahead,\n            wrap: false\n        });\n    }\n    return withCardinality(keywordToRegex(range.left), {\n        cardinality: range.cardinality,\n        lookahead: range.lookahead,\n        wrap: false\n    });\n}\n\nfunction keywordToRegex(keyword: ast.Keyword): string {\n    return escapeRegExp(keyword.value);\n}\n\nfunction withCardinality(regex: string, options: {\n    cardinality?: string\n    wrap?: boolean\n    lookahead?: string\n}): string {\n    if (options.wrap !== false || options.lookahead) {\n        regex = `(${options.lookahead ?? ''}${regex})`;\n    }\n    if (options.cardinality) {\n        return `${regex}${options.cardinality}`;\n    }\n    return regex;\n}\n","// based on: https://github.com/petkaantonov/bluebird/blob/b97c0d2d487e8c5076e8bd897e0dcd4622d31846/src/util.js#L201-L216\nexport function toFastProperties(toBecomeFast: any) {\n  function FakeConstructor() {}\n\n  // If our object is used as a constructor, it would receive\n  FakeConstructor.prototype = toBecomeFast;\n  const fakeInstance = new (FakeConstructor as any)();\n\n  function fakeAccess() {\n    return typeof fakeInstance.bar;\n  }\n\n  // help V8 understand this is a \"real\" prototype by actually using\n  // the fake instance.\n  fakeAccess();\n  fakeAccess();\n\n  // Always true condition to suppress the Firefox warning of unreachable\n  // code after a return statement.\n  if (1) return toBecomeFast;\n\n  // Eval prevents optimization of this method (even though this is dead code)\n  // - https://esbuild.github.io/content-types/#direct-eval\n  /* istanbul ignore next */\n  // tslint:disable-next-line\n  (0, eval)(toBecomeFast);\n}\n","/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n      length = array.length;\n\n  if (start < 0) {\n    start = -start > length ? 0 : (length + start);\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : ((end - start) >>> 0);\n  start >>>= 0;\n\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\nexport default baseSlice;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the beginning.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.drop([1, 2, 3]);\n * // => [2, 3]\n *\n * _.drop([1, 2, 3], 2);\n * // => [3]\n *\n * _.drop([1, 2, 3], 5);\n * // => []\n *\n * _.drop([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction drop(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  return baseSlice(array, n < 0 ? 0 : n, length);\n}\n\nexport default drop;\n","import assignValue from './_assignValue.js';\nimport copyObject from './_copyObject.js';\nimport createAssigner from './_createAssigner.js';\nimport isArrayLike from './isArrayLike.js';\nimport isPrototype from './_isPrototype.js';\nimport keys from './keys.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own enumerable string keyed properties of source objects to the\n * destination object. Source objects are applied from left to right.\n * Subsequent sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object` and is loosely based on\n * [`Object.assign`](https://mdn.io/Object/assign).\n *\n * @static\n * @memberOf _\n * @since 0.10.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.assignIn\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * function Bar() {\n *   this.c = 3;\n * }\n *\n * Foo.prototype.b = 2;\n * Bar.prototype.d = 4;\n *\n * _.assign({ 'a': 0 }, new Foo, new Bar);\n * // => { 'a': 1, 'c': 3 }\n */\nvar assign = createAssigner(function(object, source) {\n  if (isPrototype(source) || isArrayLike(source)) {\n    copyObject(source, keys(source), object);\n    return;\n  }\n  for (var key in source) {\n    if (hasOwnProperty.call(source, key)) {\n      assignValue(object, key, source[key]);\n    }\n  }\n});\n\nexport default assign;\n","import arrayMap from './_arrayMap.js';\nimport baseIteratee from './_baseIteratee.js';\nimport basePickBy from './_basePickBy.js';\nimport getAllKeysIn from './_getAllKeysIn.js';\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n * truthy for. The predicate is invoked with two arguments: (value, key).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The source object.\n * @param {Function} [predicate=_.identity] The function invoked per property.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pickBy(object, _.isNumber);\n * // => { 'a': 1, 'c': 3 }\n */\nfunction pickBy(object, predicate) {\n  if (object == null) {\n    return {};\n  }\n  var props = arrayMap(getAllKeysIn(object), function(prop) {\n    return [prop];\n  });\n  predicate = baseIteratee(predicate);\n  return basePickBy(object, props, function(value, path) {\n    return predicate(value, path[0]);\n  });\n}\n\nexport default pickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar regexpTag = '[object RegExp]';\n\n/**\n * The base implementation of `_.isRegExp` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n */\nfunction baseIsRegExp(value) {\n  return isObjectLike(value) && baseGetTag(value) == regexpTag;\n}\n\nexport default baseIsRegExp;\n","import baseIsRegExp from './_baseIsRegExp.js';\nimport baseUnary from './_baseUnary.js';\nimport nodeUtil from './_nodeUtil.js';\n\n/* Node.js helper references. */\nvar nodeIsRegExp = nodeUtil && nodeUtil.isRegExp;\n\n/**\n * Checks if `value` is classified as a `RegExp` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.\n * @example\n *\n * _.isRegExp(/abc/);\n * // => true\n *\n * _.isRegExp('/abc/');\n * // => false\n */\nvar isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;\n\nexport default isRegExp;\n","import { assign, forEach, isRegExp, isString, map, pickBy } from \"lodash-es\";\nimport type {\n  IGASTVisitor,\n  IProduction,\n  IProductionWithOccurrence,\n  ISerializedGast,\n  TokenType,\n} from \"@chevrotain/types\";\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\n// TODO: duplicated code to avoid extracting another sub-package -- how to avoid?\nfunction hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nexport abstract class AbstractProduction<T extends IProduction = IProduction>\n  implements IProduction\n{\n  public get definition(): T[] {\n    return this._definition;\n  }\n  public set definition(value: T[]) {\n    this._definition = value;\n  }\n\n  constructor(protected _definition: T[]) {}\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    forEach(this.definition, (prod) => {\n      prod.accept(visitor);\n    });\n  }\n}\n\nexport class NonTerminal\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public nonTerminalName!: string;\n  public label?: string;\n  public referencedRule!: Rule;\n  public idx: number = 1;\n\n  constructor(options: {\n    nonTerminalName: string;\n    label?: string;\n    referencedRule?: Rule;\n    idx?: number;\n  }) {\n    super([]);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  set definition(definition: IProduction[]) {\n    // immutable\n  }\n\n  get definition(): IProduction[] {\n    if (this.referencedRule !== undefined) {\n      return this.referencedRule.definition;\n    }\n    return [];\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n    // don't visit children of a reference, we will get cyclic infinite loops if we do so\n  }\n}\n\nexport class Rule extends AbstractProduction {\n  public name!: string;\n  public orgText: string = \"\";\n\n  constructor(options: {\n    name: string;\n    definition: IProduction[];\n    orgText?: string;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternative extends AbstractProduction {\n  public ignoreAmbiguities: boolean = false;\n\n  constructor(options: {\n    definition: IProduction[];\n    ignoreAmbiguities?: boolean;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Option\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatory\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionMandatoryWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Repetition\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    idx?: number;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class RepetitionWithSeparator\n  extends AbstractProduction\n  implements IProductionWithOccurrence\n{\n  public separator!: TokenType;\n  public idx: number = 1;\n  public maxLookahead?: number;\n\n  constructor(options: {\n    definition: IProduction[];\n    separator: TokenType;\n    idx?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Alternation\n  extends AbstractProduction<Alternative>\n  implements IProductionWithOccurrence\n{\n  public idx: number = 1;\n  public ignoreAmbiguities: boolean = false;\n  public hasPredicates: boolean = false;\n  public maxLookahead?: number;\n\n  public get definition(): Alternative[] {\n    return this._definition;\n  }\n  public set definition(value: Alternative[]) {\n    this._definition = value;\n  }\n\n  constructor(options: {\n    definition: Alternative[];\n    idx?: number;\n    ignoreAmbiguities?: boolean;\n    hasPredicates?: boolean;\n    maxLookahead?: number;\n  }) {\n    super(options.definition);\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n}\n\nexport class Terminal implements IProductionWithOccurrence {\n  public terminalType!: TokenType;\n  public label?: string;\n  public idx: number = 1;\n\n  constructor(options: {\n    terminalType: TokenType;\n    label?: string;\n    idx?: number;\n  }) {\n    assign(\n      this,\n      pickBy(options, (v) => v !== undefined),\n    );\n  }\n\n  accept(visitor: IGASTVisitor): void {\n    visitor.visit(this);\n  }\n}\n\nexport interface ISerializedBasic extends ISerializedGast {\n  type:\n    | \"Alternative\"\n    | \"Option\"\n    | \"RepetitionMandatory\"\n    | \"Repetition\"\n    | \"Alternation\";\n  idx?: number;\n}\n\nexport interface ISerializedGastRule extends ISerializedGast {\n  type: \"Rule\";\n  name: string;\n  orgText: string;\n}\n\nexport interface ISerializedNonTerminal extends ISerializedGast {\n  type: \"NonTerminal\";\n  name: string;\n  label?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminal extends ISerializedGast {\n  type: \"Terminal\";\n  name: string;\n  terminalLabel?: string;\n  label?: string;\n  pattern?: string;\n  idx: number;\n}\n\nexport interface ISerializedTerminalWithSeparator extends ISerializedGast {\n  type: \"RepetitionMandatoryWithSeparator\" | \"RepetitionWithSeparator\";\n  idx: number;\n  separator: ISerializedTerminal;\n}\n\nexport type ISerializedGastAny =\n  | ISerializedBasic\n  | ISerializedGastRule\n  | ISerializedNonTerminal\n  | ISerializedTerminal\n  | ISerializedTerminalWithSeparator;\n\nexport function serializeGrammar(topRules: Rule[]): ISerializedGast[] {\n  return map(topRules, serializeProduction);\n}\n\nexport function serializeProduction(node: IProduction): ISerializedGast {\n  function convertDefinition(definition: IProduction[]): ISerializedGast[] {\n    return map(definition, serializeProduction);\n  }\n  /* istanbul ignore else */\n  if (node instanceof NonTerminal) {\n    const serializedNonTerminal: ISerializedNonTerminal = {\n      type: \"NonTerminal\",\n      name: node.nonTerminalName,\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedNonTerminal.label = node.label;\n    }\n\n    return serializedNonTerminal;\n  } else if (node instanceof Alternative) {\n    return <ISerializedBasic>{\n      type: \"Alternative\",\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Option) {\n    return <ISerializedBasic>{\n      type: \"Option\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatory) {\n    return <ISerializedBasic>{\n      type: \"RepetitionMandatory\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionMandatoryWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionMandatoryWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof RepetitionWithSeparator) {\n    return <ISerializedTerminalWithSeparator>{\n      type: \"RepetitionWithSeparator\",\n      idx: node.idx,\n      separator: <ISerializedTerminal>(\n        serializeProduction(new Terminal({ terminalType: node.separator }))\n      ),\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Repetition) {\n    return <ISerializedBasic>{\n      type: \"Repetition\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Alternation) {\n    return <ISerializedBasic>{\n      type: \"Alternation\",\n      idx: node.idx,\n      definition: convertDefinition(node.definition),\n    };\n  } else if (node instanceof Terminal) {\n    const serializedTerminal = <ISerializedTerminal>{\n      type: \"Terminal\",\n      name: node.terminalType.name,\n      label: tokenLabel(node.terminalType),\n      idx: node.idx,\n    };\n\n    if (isString(node.label)) {\n      serializedTerminal.terminalLabel = node.label;\n    }\n\n    const pattern = node.terminalType.PATTERN;\n    if (node.terminalType.PATTERN) {\n      serializedTerminal.pattern = isRegExp(pattern)\n        ? (<any>pattern).source\n        : pattern;\n    }\n\n    return serializedTerminal;\n  } else if (node instanceof Rule) {\n    return <ISerializedGastRule>{\n      type: \"Rule\",\n      name: node.name,\n      orgText: node.orgText,\n      definition: convertDefinition(node.definition),\n    };\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction } from \"@chevrotain/types\";\n\nexport abstract class GAstVisitor {\n  public visit(node: IProduction): any {\n    const nodeAny: any = node;\n    switch (nodeAny.constructor) {\n      case NonTerminal:\n        return this.visitNonTerminal(nodeAny);\n      case Alternative:\n        return this.visitAlternative(nodeAny);\n      case Option:\n        return this.visitOption(nodeAny);\n      case RepetitionMandatory:\n        return this.visitRepetitionMandatory(nodeAny);\n      case RepetitionMandatoryWithSeparator:\n        return this.visitRepetitionMandatoryWithSeparator(nodeAny);\n      case RepetitionWithSeparator:\n        return this.visitRepetitionWithSeparator(nodeAny);\n      case Repetition:\n        return this.visitRepetition(nodeAny);\n      case Alternation:\n        return this.visitAlternation(nodeAny);\n      case Terminal:\n        return this.visitTerminal(nodeAny);\n      case Rule:\n        return this.visitRule(nodeAny);\n      /* c8 ignore next 2 */\n      default:\n        throw Error(\"non exhaustive match\");\n    }\n  }\n\n  /* c8 ignore next */\n  public visitNonTerminal(node: NonTerminal): any {}\n\n  /* c8 ignore next */\n  public visitAlternative(node: Alternative): any {}\n\n  /* c8 ignore next */\n  public visitOption(node: Option): any {}\n\n  /* c8 ignore next */\n  public visitRepetition(node: Repetition): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionMandatory(node: RepetitionMandatory): any {}\n\n  /* c8 ignore next 3 */\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): any {}\n\n  /* c8 ignore next */\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): any {}\n\n  /* c8 ignore next */\n  public visitAlternation(node: Alternation): any {}\n\n  /* c8 ignore next */\n  public visitTerminal(node: Terminal): any {}\n\n  /* c8 ignore next */\n  public visitRule(node: Rule): any {}\n}\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.some` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n */\nfunction baseSome(collection, predicate) {\n  var result;\n\n  baseEach(collection, function(value, index, collection) {\n    result = predicate(value, index, collection);\n    return !result;\n  });\n  return !!result;\n}\n\nexport default baseSome;\n","import arraySome from './_arraySome.js';\nimport baseIteratee from './_baseIteratee.js';\nimport baseSome from './_baseSome.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **any** element of `collection`.\n * Iteration is stopped once `predicate` returns truthy. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if any element passes the predicate check,\n *  else `false`.\n * @example\n *\n * _.some([null, 0, 'yes', false], Boolean);\n * // => true\n *\n * var users = [\n *   { 'user': 'barney', 'active': true },\n *   { 'user': 'fred',   'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.some(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.some(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.some(users, 'active');\n * // => true\n */\nfunction some(collection, predicate, guard) {\n  var func = isArray(collection) ? arraySome : baseSome;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default some;\n","import baseIndexOf from './_baseIndexOf.js';\nimport isArrayLike from './isArrayLike.js';\nimport isString from './isString.js';\nimport toInteger from './toInteger.js';\nimport values from './values.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Checks if `value` is in `collection`. If `collection` is a string, it's\n * checked for a substring of `value`, otherwise\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * is used for equality comparisons. If `fromIndex` is negative, it's used as\n * the offset from the end of `collection`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object|string} collection The collection to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\n * @returns {boolean} Returns `true` if `value` is found, else `false`.\n * @example\n *\n * _.includes([1, 2, 3], 1);\n * // => true\n *\n * _.includes([1, 2, 3], 1, 2);\n * // => false\n *\n * _.includes({ 'a': 1, 'b': 2 }, 1);\n * // => true\n *\n * _.includes('abcd', 'bc');\n * // => true\n */\nfunction includes(collection, value, fromIndex, guard) {\n  collection = isArrayLike(collection) ? collection : values(collection);\n  fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;\n\n  var length = collection.length;\n  if (fromIndex < 0) {\n    fromIndex = nativeMax(length + fromIndex, 0);\n  }\n  return isString(collection)\n    ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\n    : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\n}\n\nexport default includes;\n","/**\n * A specialized version of `_.every` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n */\nfunction arrayEvery(array, predicate) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (!predicate(array[index], index, array)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default arrayEvery;\n","import baseEach from './_baseEach.js';\n\n/**\n * The base implementation of `_.every` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`\n */\nfunction baseEvery(collection, predicate) {\n  var result = true;\n  baseEach(collection, function(value, index, collection) {\n    result = !!predicate(value, index, collection);\n    return result;\n  });\n  return result;\n}\n\nexport default baseEvery;\n","import arrayEvery from './_arrayEvery.js';\nimport baseEvery from './_baseEvery.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport isIterateeCall from './_isIterateeCall.js';\n\n/**\n * Checks if `predicate` returns truthy for **all** elements of `collection`.\n * Iteration is stopped once `predicate` returns falsey. The predicate is\n * invoked with three arguments: (value, index|key, collection).\n *\n * **Note:** This method returns `true` for\n * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because\n * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of\n * elements of empty collections.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {boolean} Returns `true` if all elements pass the predicate check,\n *  else `false`.\n * @example\n *\n * _.every([true, 1, null, 'yes'], Boolean);\n * // => false\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': false }\n * ];\n *\n * // The `_.matches` iteratee shorthand.\n * _.every(users, { 'user': 'barney', 'active': false });\n * // => false\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.every(users, ['active', false]);\n * // => true\n *\n * // The `_.property` iteratee shorthand.\n * _.every(users, 'active');\n * // => false\n */\nfunction every(collection, predicate, guard) {\n  var func = isArray(collection) ? arrayEvery : baseEvery;\n  if (guard && isIterateeCall(collection, predicate, guard)) {\n    predicate = undefined;\n  }\n  return func(collection, baseIteratee(predicate, 3));\n}\n\nexport default every;\n","import { every, includes, some } from \"lodash-es\";\nimport {\n  AbstractProduction,\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"./model.js\";\nimport type { IProduction, IProductionWithOccurrence } from \"@chevrotain/types\";\n\nexport function isSequenceProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return (\n    prod instanceof Alternative ||\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionMandatory ||\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod instanceof RepetitionWithSeparator ||\n    prod instanceof Terminal ||\n    prod instanceof Rule\n  );\n}\n\nexport function isOptionalProd(\n  prod: IProduction,\n  alreadyVisited: NonTerminal[] = [],\n): boolean {\n  const isDirectlyOptional =\n    prod instanceof Option ||\n    prod instanceof Repetition ||\n    prod instanceof RepetitionWithSeparator;\n  if (isDirectlyOptional) {\n    return true;\n  }\n\n  // note that this can cause infinite loop if one optional empty TOP production has a cyclic dependency with another\n  // empty optional top rule\n  // may be indirectly optional ((A?B?C?) | (D?E?F?))\n  if (prod instanceof Alternation) {\n    // for OR its enough for just one of the alternatives to be optional\n    return some((<Alternation>prod).definition, (subProd: IProduction) => {\n      return isOptionalProd(subProd, alreadyVisited);\n    });\n  } else if (prod instanceof NonTerminal && includes(alreadyVisited, prod)) {\n    // avoiding stack overflow due to infinite recursion\n    return false;\n  } else if (prod instanceof AbstractProduction) {\n    if (prod instanceof NonTerminal) {\n      alreadyVisited.push(prod);\n    }\n    return every(\n      (<AbstractProduction>prod).definition,\n      (subProd: IProduction) => {\n        return isOptionalProd(subProd, alreadyVisited);\n      },\n    );\n  } else {\n    return false;\n  }\n}\n\nexport function isBranchingProd(\n  prod: IProduction,\n): prod is { definition: IProduction[] } & IProduction {\n  return prod instanceof Alternation;\n}\n\nexport function getProductionDslName(prod: IProductionWithOccurrence): string {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    return \"SUBRULE\";\n  } else if (prod instanceof Option) {\n    return \"OPTION\";\n  } else if (prod instanceof Alternation) {\n    return \"OR\";\n  } else if (prod instanceof RepetitionMandatory) {\n    return \"AT_LEAST_ONE\";\n  } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n    return \"AT_LEAST_ONE_SEP\";\n  } else if (prod instanceof RepetitionWithSeparator) {\n    return \"MANY_SEP\";\n  } else if (prod instanceof Repetition) {\n    return \"MANY\";\n  } else if (prod instanceof Terminal) {\n    return \"CONSUME\";\n    /* c8 ignore next 3 */\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n","import { drop, forEach } from \"lodash-es\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction } from \"@chevrotain/types\";\n\n/**\n *  A Grammar Walker that computes the \"remaining\" grammar \"after\" a productions in the grammar.\n */\nexport abstract class RestWalker {\n  walk(prod: { definition: IProduction[] }, prevRest: any[] = []): void {\n    forEach(prod.definition, (subProd: IProduction, index) => {\n      const currRest = drop(prod.definition, index + 1);\n      /* istanbul ignore else */\n      if (subProd instanceof NonTerminal) {\n        this.walkProdRef(subProd, currRest, prevRest);\n      } else if (subProd instanceof Terminal) {\n        this.walkTerminal(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternative) {\n        this.walkFlat(subProd, currRest, prevRest);\n      } else if (subProd instanceof Option) {\n        this.walkOption(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatory) {\n        this.walkAtLeastOne(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionMandatoryWithSeparator) {\n        this.walkAtLeastOneSep(subProd, currRest, prevRest);\n      } else if (subProd instanceof RepetitionWithSeparator) {\n        this.walkManySep(subProd, currRest, prevRest);\n      } else if (subProd instanceof Repetition) {\n        this.walkMany(subProd, currRest, prevRest);\n      } else if (subProd instanceof Alternation) {\n        this.walkOr(subProd, currRest, prevRest);\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {}\n\n  walkFlat(\n    flatProd: Alternative,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABCDEF => after the D the rest is EF\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(flatProd, <any>fullOrRest);\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)?F => after the (DE)? the rest is F\n    const fullOrRest = currRest.concat(prevRest);\n    this.walk(optionProd, <any>fullOrRest);\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)+F => after the (DE)+ the rest is (DE)?F\n    const fullAtLeastOneRest: IProduction[] = [\n      new Option({ definition: atLeastOneProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(atLeastOneProd, fullAtLeastOneRest);\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC DE(,DE)* F => after the (,DE)+ the rest is (,DE)?F\n    const fullAtLeastOneSepRest = restForRepetitionWithSeparator(\n      atLeastOneSepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(atLeastOneSepProd, fullAtLeastOneSepRest);\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(DE)*F => after the (DE)* the rest is (DE)?F\n    const fullManyRest: IProduction[] = [\n      new Option({ definition: manyProd.definition }),\n    ].concat(<any>currRest, <any>prevRest);\n    this.walk(manyProd, fullManyRest);\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC (DE(,DE)*)? F => after the (,DE)* the rest is (,DE)?F\n    const fullManySepRest = restForRepetitionWithSeparator(\n      manySepProd,\n      currRest,\n      prevRest,\n    );\n    this.walk(manySepProd, fullManySepRest);\n  }\n\n  walkOr(\n    orProd: Alternation,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // ABC(D|E|F)G => when finding the (D|E|F) the rest is G\n    const fullOrRest = currRest.concat(prevRest);\n    // walk all different alternatives\n    forEach(orProd.definition, (alt) => {\n      // wrapping each alternative in a single definition wrapper\n      // to avoid errors in computing the rest of that alternative in the invocation to computeInProdFollows\n      // (otherwise for OR([alt1,alt2]) alt2 will be considered in 'rest' of alt1\n      const prodWrapper = new Alternative({ definition: [alt] });\n      this.walk(prodWrapper, <any>fullOrRest);\n    });\n  }\n}\n\nfunction restForRepetitionWithSeparator(\n  repSepProd: RepetitionWithSeparator,\n  currRest: IProduction[],\n  prevRest: IProduction[],\n) {\n  const repSepRest = [\n    new Option({\n      definition: [\n        new Terminal({ terminalType: repSepProd.separator }) as IProduction,\n      ].concat(repSepProd.definition),\n    }) as IProduction,\n  ];\n  const fullRepSepRest: IProduction[] = repSepRest.concat(currRest, prevRest);\n  return fullRepSepRest;\n}\n","import baseUniq from './_baseUniq.js';\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nexport default uniq;\n","import { flatten, map, uniq } from \"lodash-es\";\nimport {\n  isBranchingProd,\n  isOptionalProd,\n  isSequenceProd,\n  NonTerminal,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\nexport function first(prod: IProduction): TokenType[] {\n  /* istanbul ignore else */\n  if (prod instanceof NonTerminal) {\n    // this could in theory cause infinite loops if\n    // (1) prod A refs prod B.\n    // (2) prod B refs prod A\n    // (3) AB can match the empty set\n    // in other words a cycle where everything is optional so the first will keep\n    // looking ahead for the next optional part and will never exit\n    // currently there is no safeguard for this unique edge case because\n    // (1) not sure a grammar in which this can happen is useful for anything (productive)\n    return first((<NonTerminal>prod).referencedRule);\n  } else if (prod instanceof Terminal) {\n    return firstForTerminal(<Terminal>prod);\n  } else if (isSequenceProd(prod)) {\n    return firstForSequence(prod);\n  } else if (isBranchingProd(prod)) {\n    return firstForBranching(prod);\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function firstForSequence(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  let firstSet: TokenType[] = [];\n  const seq = prod.definition;\n  let nextSubProdIdx = 0;\n  let hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  let currSubProd;\n  // so we enter the loop at least once (if the definition is not empty\n  let isLastInnerProdOptional = true;\n  // scan a sequence until it's end or until we have found a NONE optional production in it\n  while (hasInnerProdsRemaining && isLastInnerProdOptional) {\n    currSubProd = seq[nextSubProdIdx];\n    isLastInnerProdOptional = isOptionalProd(currSubProd);\n    firstSet = firstSet.concat(first(currSubProd));\n    nextSubProdIdx = nextSubProdIdx + 1;\n    hasInnerProdsRemaining = seq.length > nextSubProdIdx;\n  }\n\n  return uniq(firstSet);\n}\n\nexport function firstForBranching(prod: {\n  definition: IProduction[];\n}): TokenType[] {\n  const allAlternativesFirsts: TokenType[][] = map(\n    prod.definition,\n    (innerProd) => {\n      return first(innerProd);\n    },\n  );\n  return uniq(flatten<TokenType>(allAlternativesFirsts));\n}\n\nexport function firstForTerminal(terminal: Terminal): TokenType[] {\n  return [terminal.terminalType];\n}\n","// TODO: can this be removed? where is it used?\nexport const IN = \"_~IN~_\";\n","import { RestWalker } from \"./rest.js\";\nimport { first } from \"./first.js\";\nimport { assign, forEach } from \"lodash-es\";\nimport { IN } from \"../constants.js\";\nimport { Alternative, NonTerminal, Rule, Terminal } from \"@chevrotain/gast\";\nimport { IProduction, TokenType } from \"@chevrotain/types\";\n\n// This ResyncFollowsWalker computes all of the follows required for RESYNC\n// (skipping reference production).\nexport class ResyncFollowsWalker extends RestWalker {\n  public follows: Record<string, TokenType[]> = {};\n\n  constructor(private topProd: Rule) {\n    super();\n  }\n\n  startWalking(): Record<string, TokenType[]> {\n    this.walk(this.topProd);\n    return this.follows;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // do nothing! just like in the public sector after 13:00\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    const followName =\n      buildBetweenProdsFollowPrefix(refProd.referencedRule, refProd.idx) +\n      this.topProd.name;\n    const fullRest: IProduction[] = currRest.concat(prevRest);\n    const restProd = new Alternative({ definition: fullRest });\n    const t_in_topProd_follows = first(restProd);\n    this.follows[followName] = t_in_topProd_follows;\n  }\n}\n\nexport function computeAllProdsFollows(\n  topProductions: Rule[],\n): Record<string, TokenType[]> {\n  const reSyncFollows = {};\n\n  forEach(topProductions, (topProd) => {\n    const currRefsFollow = new ResyncFollowsWalker(topProd).startWalking();\n    assign(reSyncFollows, currRefsFollow);\n  });\n  return reSyncFollows;\n}\n\nexport function buildBetweenProdsFollowPrefix(\n  inner: Rule,\n  occurenceInParent: number,\n): string {\n  return inner.name + occurenceInParent + IN;\n}\n\nexport function buildInProdFollowPrefix(terminal: Terminal): string {\n  const terminalName = terminal.terminalType.name;\n  return terminalName + terminal.idx + IN;\n}\n","/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that negates the result of the predicate `func`. The\n * `func` predicate is invoked with the `this` binding and arguments of the\n * created function.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Function\n * @param {Function} predicate The predicate to negate.\n * @returns {Function} Returns the new negated function.\n * @example\n *\n * function isEven(n) {\n *   return n % 2 == 0;\n * }\n *\n * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));\n * // => [1, 3, 5]\n */\nfunction negate(predicate) {\n  if (typeof predicate != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  return function() {\n    var args = arguments;\n    switch (args.length) {\n      case 0: return !predicate.call(this);\n      case 1: return !predicate.call(this, args[0]);\n      case 2: return !predicate.call(this, args[0], args[1]);\n      case 3: return !predicate.call(this, args[0], args[1], args[2]);\n    }\n    return !predicate.apply(this, args);\n  };\n}\n\nexport default negate;\n","import arrayFilter from './_arrayFilter.js';\nimport baseFilter from './_baseFilter.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\nimport negate from './negate.js';\n\n/**\n * The opposite of `_.filter`; this method returns the elements of `collection`\n * that `predicate` does **not** return truthy for.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [predicate=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n * @see _.filter\n * @example\n *\n * var users = [\n *   { 'user': 'barney', 'age': 36, 'active': false },\n *   { 'user': 'fred',   'age': 40, 'active': true }\n * ];\n *\n * _.reject(users, function(o) { return !o.active; });\n * // => objects for ['fred']\n *\n * // The `_.matches` iteratee shorthand.\n * _.reject(users, { 'age': 40, 'active': true });\n * // => objects for ['barney']\n *\n * // The `_.matchesProperty` iteratee shorthand.\n * _.reject(users, ['active', false]);\n * // => objects for ['fred']\n *\n * // The `_.property` iteratee shorthand.\n * _.reject(users, 'active');\n * // => objects for ['barney']\n */\nfunction reject(collection, predicate) {\n  var func = isArray(collection) ? arrayFilter : baseFilter;\n  return func(collection, negate(baseIteratee(predicate, 3)));\n}\n\nexport default reject;\n","import baseIndexOf from './_baseIndexOf.js';\nimport toInteger from './toInteger.js';\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Gets the index at which the first occurrence of `value` is found in `array`\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. If `fromIndex` is negative, it's used as the\n * offset from the end of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} [fromIndex=0] The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * _.indexOf([1, 2, 1, 2], 2);\n * // => 1\n *\n * // Search from the `fromIndex`.\n * _.indexOf([1, 2, 1, 2], 2, 2);\n * // => 3\n */\nfunction indexOf(array, value, fromIndex) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return -1;\n  }\n  var index = fromIndex == null ? 0 : toInteger(fromIndex);\n  if (index < 0) {\n    index = nativeMax(length + index, 0);\n  }\n  return baseIndexOf(array, value, index);\n}\n\nexport default indexOf;\n","import SetCache from './_SetCache.js';\nimport arrayIncludes from './_arrayIncludes.js';\nimport arrayIncludesWith from './_arrayIncludesWith.js';\nimport arrayMap from './_arrayMap.js';\nimport baseUnary from './_baseUnary.js';\nimport cacheHas from './_cacheHas.js';\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of methods like `_.difference` without support\n * for excluding multiple arrays or iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      isCommon = true,\n      length = array.length,\n      result = [],\n      valuesLength = values.length;\n\n  if (!length) {\n    return result;\n  }\n  if (iteratee) {\n    values = arrayMap(values, baseUnary(iteratee));\n  }\n  if (comparator) {\n    includes = arrayIncludesWith;\n    isCommon = false;\n  }\n  else if (values.length >= LARGE_ARRAY_SIZE) {\n    includes = cacheHas;\n    isCommon = false;\n    values = new SetCache(values);\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee == null ? value : iteratee(value);\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === computed) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (!includes(values, computed, comparator)) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nexport default baseDifference;\n","import baseDifference from './_baseDifference.js';\nimport baseFlatten from './_baseFlatten.js';\nimport baseRest from './_baseRest.js';\nimport isArrayLikeObject from './isArrayLikeObject.js';\n\n/**\n * Creates an array of `array` values not included in the other given arrays\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons. The order and references of result values are\n * determined by the first array.\n *\n * **Note:** Unlike `_.pullAll`, this method returns a new array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {...Array} [values] The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n * @see _.without, _.xor\n * @example\n *\n * _.difference([2, 1], [2, 3]);\n * // => [1]\n */\nvar difference = baseRest(function(array, values) {\n  return isArrayLikeObject(array)\n    ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))\n    : [];\n});\n\nexport default difference;\n","/**\n * Creates an array with all falsey values removed. The values `false`, `null`,\n * `0`, `\"\"`, `undefined`, and `NaN` are falsey.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to compact.\n * @returns {Array} Returns the new array of filtered values.\n * @example\n *\n * _.compact([0, 1, false, 2, '', 3]);\n * // => [1, 2, 3]\n */\nfunction compact(array) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      resIndex = 0,\n      result = [];\n\n  while (++index < length) {\n    var value = array[index];\n    if (value) {\n      result[resIndex++] = value;\n    }\n  }\n  return result;\n}\n\nexport default compact;\n","/**\n * Gets the first element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @alias first\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the first element of `array`.\n * @example\n *\n * _.head([1, 2, 3]);\n * // => 1\n *\n * _.head([]);\n * // => undefined\n */\nfunction head(array) {\n  return (array && array.length) ? array[0] : undefined;\n}\n\nexport default head;\n","export function PRINT_ERROR(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js */\n  if (console && console.error) {\n    console.error(`Error: ${msg}`);\n  }\n}\n\nexport function PRINT_WARNING(msg: string) {\n  /* istanbul ignore else - can't override global.console in node.js*/\n  if (console && console.warn) {\n    // TODO: modify docs accordingly\n    console.warn(`Warning: ${msg}`);\n  }\n}\n","import {\n  Alternative,\n  Assertion,\n  Atom,\n  Disjunction,\n  RegExpParser,\n  RegExpPattern,\n} from \"@chevrotain/regexp-to-ast\";\n\nlet regExpAstCache: { [regex: string]: RegExpPattern } = {};\nconst regExpParser = new RegExpParser();\n\n// this should be moved to regexp-to-ast\nexport type ASTNode =\n  | RegExpPattern\n  | Disjunction\n  | Alternative\n  | Assertion\n  | Atom;\n\nexport function getRegExpAst(regExp: RegExp): RegExpPattern {\n  const regExpStr = regExp.toString();\n  if (regExpAstCache.hasOwnProperty(regExpStr)) {\n    return regExpAstCache[regExpStr];\n  } else {\n    const regExpAst = regExpParser.pattern(regExpStr);\n    regExpAstCache[regExpStr] = regExpAst;\n    return regExpAst;\n  }\n}\n\nexport function clearRegExpParserCache() {\n  regExpAstCache = {};\n}\n","import {\n  Alternative,\n  Atom,\n  BaseRegExpVisitor,\n  Character,\n  Disjunction,\n  Group,\n  Set,\n} from \"@chevrotain/regexp-to-ast\";\nimport { every, find, forEach, includes, isArray, values } from \"lodash-es\";\nimport { PRINT_ERROR, PRINT_WARNING } from \"@chevrotain/utils\";\nimport { ASTNode, getRegExpAst } from \"./reg_exp_parser.js\";\nimport { charCodeToOptimizedIndex, minOptimizationVal } from \"./lexer.js\";\n\nconst complementErrorMessage =\n  \"Complement Sets are not supported for first char optimization\";\nexport const failedOptimizationPrefixMsg =\n  'Unable to use \"first char\" lexer optimizations:\\n';\n\nexport function getOptimizedStartCodesIndices(\n  regExp: RegExp,\n  ensureOptimizations = false,\n): number[] {\n  try {\n    const ast = getRegExpAst(regExp);\n    const firstChars = firstCharOptimizedIndices(\n      ast.value,\n      {},\n      ast.flags.ignoreCase,\n    );\n    return firstChars;\n  } catch (e) {\n    /* istanbul ignore next */\n    // Testing this relies on the regexp-to-ast library having a bug... */\n    // TODO: only the else branch needs to be ignored, try to fix with newer prettier / tsc\n    if (e.message === complementErrorMessage) {\n      if (ensureOptimizations) {\n        PRINT_WARNING(\n          `${failedOptimizationPrefixMsg}` +\n            `\\tUnable to optimize: < ${regExp.toString()} >\\n` +\n            \"\\tComplement Sets cannot be automatically optimized.\\n\" +\n            \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#COMPLEMENT for details.\",\n        );\n      }\n    } else {\n      let msgSuffix = \"\";\n      if (ensureOptimizations) {\n        msgSuffix =\n          \"\\n\\tThis will disable the lexer's first char optimizations.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#REGEXP_PARSING for details.\";\n      }\n      PRINT_ERROR(\n        `${failedOptimizationPrefixMsg}\\n` +\n          `\\tFailed parsing: < ${regExp.toString()} >\\n` +\n          `\\tUsing the @chevrotain/regexp-to-ast library\\n` +\n          \"\\tPlease open an issue at: https://github.com/chevrotain/chevrotain/issues\" +\n          msgSuffix,\n      );\n    }\n  }\n\n  return [];\n}\n\nexport function firstCharOptimizedIndices(\n  ast: ASTNode,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n): number[] {\n  switch (ast.type) {\n    case \"Disjunction\":\n      for (let i = 0; i < ast.value.length; i++) {\n        firstCharOptimizedIndices(ast.value[i], result, ignoreCase);\n      }\n      break;\n    case \"Alternative\":\n      const terms = ast.value;\n      for (let i = 0; i < terms.length; i++) {\n        const term = terms[i];\n\n        // skip terms that cannot effect the first char results\n        switch (term.type) {\n          case \"EndAnchor\":\n          // A group back reference cannot affect potential starting char.\n          // because if a back reference is the first production than automatically\n          // the group being referenced has had to come BEFORE so its codes have already been added\n          case \"GroupBackReference\":\n          // assertions do not affect potential starting codes\n          case \"Lookahead\":\n          case \"NegativeLookahead\":\n          case \"StartAnchor\":\n          case \"WordBoundary\":\n          case \"NonWordBoundary\":\n            continue;\n        }\n\n        const atom = term;\n        switch (atom.type) {\n          case \"Character\":\n            addOptimizedIdxToResult(atom.value, result, ignoreCase);\n            break;\n          case \"Set\":\n            if (atom.complement === true) {\n              throw Error(complementErrorMessage);\n            }\n            forEach(atom.value, (code) => {\n              if (typeof code === \"number\") {\n                addOptimizedIdxToResult(code, result, ignoreCase);\n              } else {\n                // range\n                const range = code as any;\n                // cannot optimize when ignoreCase is\n                if (ignoreCase === true) {\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n                }\n                // Optimization (2 orders of magnitude less work for very large ranges)\n                else {\n                  // handle unoptimized values\n                  for (\n                    let rangeCode = range.from;\n                    rangeCode <= range.to && rangeCode < minOptimizationVal;\n                    rangeCode++\n                  ) {\n                    addOptimizedIdxToResult(rangeCode, result, ignoreCase);\n                  }\n\n                  // Less common charCode where we optimize for faster init time, by using larger \"buckets\"\n                  if (range.to >= minOptimizationVal) {\n                    const minUnOptVal =\n                      range.from >= minOptimizationVal\n                        ? range.from\n                        : minOptimizationVal;\n                    const maxUnOptVal = range.to;\n                    const minOptIdx = charCodeToOptimizedIndex(minUnOptVal);\n                    const maxOptIdx = charCodeToOptimizedIndex(maxUnOptVal);\n\n                    for (\n                      let currOptIdx = minOptIdx;\n                      currOptIdx <= maxOptIdx;\n                      currOptIdx++\n                    ) {\n                      result[currOptIdx] = currOptIdx;\n                    }\n                  }\n                }\n              }\n            });\n            break;\n          case \"Group\":\n            firstCharOptimizedIndices(atom.value, result, ignoreCase);\n            break;\n          /* istanbul ignore next */\n          default:\n            throw Error(\"Non Exhaustive Match\");\n        }\n\n        // reached a mandatory production, no more **start** codes can be found on this alternative\n        const isOptionalQuantifier =\n          atom.quantifier !== undefined && atom.quantifier.atLeast === 0;\n        if (\n          // A group may be optional due to empty contents /(?:)/\n          // or if everything inside it is optional /((a)?)/\n          (atom.type === \"Group\" && isWholeOptional(atom) === false) ||\n          // If this term is not a group it may only be optional if it has an optional quantifier\n          (atom.type !== \"Group\" && isOptionalQuantifier === false)\n        ) {\n          break;\n        }\n      }\n      break;\n    /* istanbul ignore next */\n    default:\n      throw Error(\"non exhaustive match!\");\n  }\n\n  // console.log(Object.keys(result).length)\n  return values(result);\n}\n\nfunction addOptimizedIdxToResult(\n  code: number,\n  result: { [charCode: number]: number },\n  ignoreCase: boolean,\n) {\n  const optimizedCharIdx = charCodeToOptimizedIndex(code);\n  result[optimizedCharIdx] = optimizedCharIdx;\n\n  if (ignoreCase === true) {\n    handleIgnoreCase(code, result);\n  }\n}\n\nfunction handleIgnoreCase(\n  code: number,\n  result: { [charCode: number]: number },\n) {\n  const char = String.fromCharCode(code);\n  const upperChar = char.toUpperCase();\n  /* istanbul ignore else */\n  if (upperChar !== char) {\n    const optimizedCharIdx = charCodeToOptimizedIndex(upperChar.charCodeAt(0));\n    result[optimizedCharIdx] = optimizedCharIdx;\n  } else {\n    const lowerChar = char.toLowerCase();\n    if (lowerChar !== char) {\n      const optimizedCharIdx = charCodeToOptimizedIndex(\n        lowerChar.charCodeAt(0),\n      );\n      result[optimizedCharIdx] = optimizedCharIdx;\n    }\n  }\n}\n\nfunction findCode(setNode: Set, targetCharCodes: number[]) {\n  return find(setNode.value, (codeOrRange) => {\n    if (typeof codeOrRange === \"number\") {\n      return includes(targetCharCodes, codeOrRange);\n    } else {\n      // range\n      const range = <any>codeOrRange;\n      return (\n        find(\n          targetCharCodes,\n          (targetCode) => range.from <= targetCode && targetCode <= range.to,\n        ) !== undefined\n      );\n    }\n  });\n}\n\nfunction isWholeOptional(ast: any): boolean {\n  const quantifier = (ast as Atom).quantifier;\n  if (quantifier && quantifier.atLeast === 0) {\n    return true;\n  }\n\n  if (!ast.value) {\n    return false;\n  }\n\n  return isArray(ast.value)\n    ? every(ast.value, isWholeOptional)\n    : isWholeOptional(ast.value);\n}\n\nclass CharCodeFinder extends BaseRegExpVisitor {\n  found: boolean = false;\n\n  constructor(private targetCharCodes: number[]) {\n    super();\n  }\n\n  visitChildren(node: ASTNode) {\n    // No need to keep looking...\n    if (this.found === true) {\n      return;\n    }\n\n    // switch lookaheads as they do not actually consume any characters thus\n    // finding a charCode at lookahead context does not mean that regexp can actually contain it in a match.\n    switch (node.type) {\n      case \"Lookahead\":\n        this.visitLookahead(node);\n        return;\n      case \"NegativeLookahead\":\n        this.visitNegativeLookahead(node);\n        return;\n    }\n\n    super.visitChildren(node);\n  }\n\n  visitCharacter(node: Character) {\n    if (includes(this.targetCharCodes, node.value)) {\n      this.found = true;\n    }\n  }\n\n  visitSet(node: Set) {\n    if (node.complement) {\n      if (findCode(node, this.targetCharCodes) === undefined) {\n        this.found = true;\n      }\n    } else {\n      if (findCode(node, this.targetCharCodes) !== undefined) {\n        this.found = true;\n      }\n    }\n  }\n}\n\nexport function canMatchCharCode(\n  charCodes: number[],\n  pattern: RegExp | string,\n) {\n  if (pattern instanceof RegExp) {\n    const ast = getRegExpAst(pattern);\n    const charCodeFinder = new CharCodeFinder(charCodes);\n    charCodeFinder.visit(ast);\n    return charCodeFinder.found;\n  } else {\n    return (\n      find(<any>pattern, (char) => {\n        return includes(charCodes, (<string>char).charCodeAt(0));\n      }) !== undefined\n    );\n  }\n}\n","import { BaseRegExpVisitor } from \"@chevrotain/regexp-to-ast\";\nimport {\n  IRegExpExec,\n  Lexer,\n  LexerDefinitionErrorType,\n} from \"./lexer_public.js\";\nimport {\n  compact,\n  defaults,\n  difference,\n  filter,\n  find,\n  first,\n  flatten,\n  forEach,\n  has,\n  includes,\n  indexOf,\n  isArray,\n  isEmpty,\n  isFunction,\n  isRegExp,\n  isString,\n  isUndefined,\n  keys,\n  map,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport { PRINT_ERROR } from \"@chevrotain/utils\";\nimport {\n  canMatchCharCode,\n  failedOptimizationPrefixMsg,\n  getOptimizedStartCodesIndices,\n} from \"./reg_exp.js\";\nimport {\n  ILexerDefinitionError,\n  ILineTerminatorsTester,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { getRegExpAst } from \"./reg_exp_parser.js\";\n\nconst PATTERN = \"PATTERN\";\nexport const DEFAULT_MODE = \"defaultMode\";\nexport const MODES = \"modes\";\n\nexport interface IPatternConfig {\n  pattern: IRegExpExec | string;\n  longerAlt: number[] | undefined;\n  canLineTerminator: boolean;\n  isCustom: boolean;\n  short: number | false;\n  group: string | undefined | false;\n  push: string | undefined;\n  pop: boolean;\n  tokenType: TokenType;\n  tokenTypeIdx: number;\n}\n\nexport interface IAnalyzeResult {\n  patternIdxToConfig: IPatternConfig[];\n  charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] };\n  emptyGroups: { [groupName: string]: IToken[] };\n  hasCustom: boolean;\n  canBeOptimized: boolean;\n}\n\nexport let SUPPORT_STICKY =\n  typeof (<any>new RegExp(\"(?:)\")).sticky === \"boolean\";\n\nexport function disableSticky() {\n  SUPPORT_STICKY = false;\n}\n\nexport function enableSticky() {\n  SUPPORT_STICKY = true;\n}\n\nexport function analyzeTokenTypes(\n  tokenTypes: TokenType[],\n  options: {\n    positionTracking?: \"full\" | \"onlyStart\" | \"onlyOffset\";\n    ensureOptimizations?: boolean;\n    lineTerminatorCharacters?: (number | string)[];\n    // TODO: should `useSticky` be an argument here?\n    useSticky?: boolean;\n    safeMode?: boolean;\n    tracer?: (msg: string, action: () => void) => void;\n  },\n): IAnalyzeResult {\n  options = defaults(options, {\n    useSticky: SUPPORT_STICKY,\n    debug: false as boolean,\n    safeMode: false as boolean,\n    positionTracking: \"full\",\n    lineTerminatorCharacters: [\"\\r\", \"\\n\"],\n    tracer: (msg: string, action: Function) => action(),\n  });\n\n  const tracer = options.tracer!;\n\n  tracer(\"initCharCodeToOptimizedIndexMap\", () => {\n    initCharCodeToOptimizedIndexMap();\n  });\n\n  let onlyRelevantTypes: TokenType[];\n  tracer(\"Reject Lexer.NA\", () => {\n    onlyRelevantTypes = reject(tokenTypes, (currType) => {\n      return currType[PATTERN] === Lexer.NA;\n    });\n  });\n\n  let hasCustom = false;\n  let allTransformedPatterns: (IRegExpExec | string)[];\n  tracer(\"Transform Patterns\", () => {\n    hasCustom = false;\n    allTransformedPatterns = map(\n      onlyRelevantTypes,\n      (currType): IRegExpExec | string => {\n        const currPattern = currType[PATTERN];\n\n        /* istanbul ignore else */\n        if (isRegExp(currPattern)) {\n          const regExpSource = currPattern.source;\n          if (\n            regExpSource.length === 1 &&\n            // only these regExp meta characters which can appear in a length one regExp\n            regExpSource !== \"^\" &&\n            regExpSource !== \"$\" &&\n            regExpSource !== \".\" &&\n            !currPattern.ignoreCase\n          ) {\n            return regExpSource;\n          } else if (\n            regExpSource.length === 2 &&\n            regExpSource[0] === \"\\\\\" &&\n            // not a meta character\n            !includes(\n              [\n                \"d\",\n                \"D\",\n                \"s\",\n                \"S\",\n                \"t\",\n                \"r\",\n                \"n\",\n                \"t\",\n                \"0\",\n                \"c\",\n                \"b\",\n                \"B\",\n                \"f\",\n                \"v\",\n                \"w\",\n                \"W\",\n              ],\n              regExpSource[1],\n            )\n          ) {\n            // escaped meta Characters: /\\+/ /\\[/\n            // or redundant escaping: /\\a/\n            // without the escaping \"\\\"\n            return regExpSource[1];\n          } else {\n            return options.useSticky\n              ? addStickyFlag(currPattern)\n              : addStartOfInput(currPattern);\n          }\n        } else if (isFunction(currPattern)) {\n          hasCustom = true;\n          // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n          return { exec: currPattern };\n        } else if (typeof currPattern === \"object\") {\n          hasCustom = true;\n          // ICustomPattern\n          return currPattern;\n        } else if (typeof currPattern === \"string\") {\n          if (currPattern.length === 1) {\n            return currPattern;\n          } else {\n            const escapedRegExpString = currPattern.replace(\n              /[\\\\^$.*+?()[\\]{}|]/g,\n              \"\\\\$&\",\n            );\n            const wrappedRegExp = new RegExp(escapedRegExpString);\n            return options.useSticky\n              ? addStickyFlag(wrappedRegExp)\n              : addStartOfInput(wrappedRegExp);\n          }\n        } else {\n          throw Error(\"non exhaustive match\");\n        }\n      },\n    );\n  });\n\n  let patternIdxToType: number[];\n  let patternIdxToGroup: (string | undefined | false)[];\n  let patternIdxToLongerAltIdxArr: (number[] | undefined)[];\n  let patternIdxToPushMode: (string | undefined)[];\n  let patternIdxToPopMode: boolean[];\n  tracer(\"misc mapping\", () => {\n    patternIdxToType = map(\n      onlyRelevantTypes,\n      (currType) => currType.tokenTypeIdx!,\n    );\n\n    patternIdxToGroup = map(onlyRelevantTypes, (clazz: any) => {\n      const groupName = clazz.GROUP;\n      /* istanbul ignore next */\n      if (groupName === Lexer.SKIPPED) {\n        return undefined;\n      } else if (isString(groupName)) {\n        return groupName;\n      } else if (isUndefined(groupName)) {\n        return false;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    });\n\n    patternIdxToLongerAltIdxArr = map(onlyRelevantTypes, (clazz: any) => {\n      const longerAltType = clazz.LONGER_ALT;\n\n      if (longerAltType) {\n        const longerAltIdxArr = isArray(longerAltType)\n          ? map(longerAltType, (type: any) => indexOf(onlyRelevantTypes, type))\n          : [indexOf(onlyRelevantTypes, longerAltType)];\n        return longerAltIdxArr;\n      }\n    });\n\n    patternIdxToPushMode = map(\n      onlyRelevantTypes,\n      (clazz: any) => clazz.PUSH_MODE,\n    );\n\n    patternIdxToPopMode = map(onlyRelevantTypes, (clazz: any) =>\n      has(clazz, \"POP_MODE\"),\n    );\n  });\n\n  let patternIdxToCanLineTerminator: boolean[];\n  tracer(\"Line Terminator Handling\", () => {\n    const lineTerminatorCharCodes = getCharCodes(\n      options.lineTerminatorCharacters!,\n    );\n    patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => false);\n    if (options.positionTracking !== \"onlyOffset\") {\n      patternIdxToCanLineTerminator = map(onlyRelevantTypes, (tokType) => {\n        if (has(tokType, \"LINE_BREAKS\")) {\n          return !!tokType.LINE_BREAKS;\n        } else {\n          return (\n            checkLineBreaksIssues(tokType, lineTerminatorCharCodes) === false &&\n            canMatchCharCode(\n              lineTerminatorCharCodes,\n              tokType.PATTERN as RegExp | string,\n            )\n          );\n        }\n      });\n    }\n  });\n\n  let patternIdxToIsCustom: boolean[];\n  let patternIdxToShort: (number | false)[];\n  let emptyGroups!: { [groupName: string]: IToken[] };\n  let patternIdxToConfig!: IPatternConfig[];\n  tracer(\"Misc Mapping #2\", () => {\n    patternIdxToIsCustom = map(onlyRelevantTypes, isCustomPattern);\n    patternIdxToShort = map(allTransformedPatterns, isShortPattern);\n\n    emptyGroups = reduce(\n      onlyRelevantTypes,\n      (acc, clazz: any) => {\n        const groupName = clazz.GROUP;\n        if (isString(groupName) && !(groupName === Lexer.SKIPPED)) {\n          acc[groupName] = [];\n        }\n        return acc;\n      },\n      {} as { [groupName: string]: IToken[] },\n    );\n\n    patternIdxToConfig = map(\n      allTransformedPatterns,\n      (x, idx): IPatternConfig => {\n        return {\n          pattern: allTransformedPatterns[idx],\n          longerAlt: patternIdxToLongerAltIdxArr[idx],\n          canLineTerminator: patternIdxToCanLineTerminator[idx],\n          isCustom: patternIdxToIsCustom[idx],\n          short: patternIdxToShort[idx],\n          group: patternIdxToGroup[idx],\n          push: patternIdxToPushMode[idx],\n          pop: patternIdxToPopMode[idx],\n          tokenTypeIdx: patternIdxToType[idx],\n          tokenType: onlyRelevantTypes[idx],\n        };\n      },\n    );\n  });\n\n  let canBeOptimized = true;\n  let charCodeToPatternIdxToConfig: { [charCode: number]: IPatternConfig[] } =\n    [];\n\n  if (!options.safeMode) {\n    tracer(\"First Char Optimization\", () => {\n      charCodeToPatternIdxToConfig = reduce(\n        onlyRelevantTypes,\n        (result, currTokType, idx) => {\n          if (typeof currTokType.PATTERN === \"string\") {\n            const charCode = currTokType.PATTERN.charCodeAt(0);\n            const optimizedIdx = charCodeToOptimizedIndex(charCode);\n            addToMapOfArrays(result, optimizedIdx, patternIdxToConfig[idx]);\n          } else if (isArray(currTokType.START_CHARS_HINT)) {\n            let lastOptimizedIdx: number;\n            forEach(currTokType.START_CHARS_HINT, (charOrInt) => {\n              const charCode =\n                typeof charOrInt === \"string\"\n                  ? charOrInt.charCodeAt(0)\n                  : charOrInt;\n              const currOptimizedIdx = charCodeToOptimizedIndex(charCode);\n              // Avoid adding the config multiple times\n              /* istanbul ignore else */\n              // - Difficult to check this scenario effects as it is only a performance\n              //   optimization that does not change correctness\n              if (lastOptimizedIdx !== currOptimizedIdx) {\n                lastOptimizedIdx = currOptimizedIdx;\n                addToMapOfArrays(\n                  result,\n                  currOptimizedIdx,\n                  patternIdxToConfig[idx],\n                );\n              }\n            });\n          } else if (isRegExp(currTokType.PATTERN)) {\n            if (currTokType.PATTERN.unicode) {\n              canBeOptimized = false;\n              if (options.ensureOptimizations) {\n                PRINT_ERROR(\n                  `${failedOptimizationPrefixMsg}` +\n                    `\\tUnable to analyze < ${currTokType.PATTERN.toString()} > pattern.\\n` +\n                    \"\\tThe regexp unicode flag is not currently supported by the regexp-to-ast library.\\n\" +\n                    \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                    \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNICODE_OPTIMIZE\",\n                );\n              }\n            } else {\n              const optimizedCodes = getOptimizedStartCodesIndices(\n                currTokType.PATTERN,\n                options.ensureOptimizations,\n              );\n              /* istanbul ignore if */\n              // start code will only be empty given an empty regExp or failure of regexp-to-ast library\n              // the first should be a different validation and the second cannot be tested.\n              if (isEmpty(optimizedCodes)) {\n                // we cannot understand what codes may start possible matches\n                // The optimization correctness requires knowing start codes for ALL patterns.\n                // Not actually sure this is an error, no debug message\n                canBeOptimized = false;\n              }\n              forEach(optimizedCodes, (code) => {\n                addToMapOfArrays(result, code, patternIdxToConfig[idx]);\n              });\n            }\n          } else {\n            if (options.ensureOptimizations) {\n              PRINT_ERROR(\n                `${failedOptimizationPrefixMsg}` +\n                  `\\tTokenType: <${currTokType.name}> is using a custom token pattern without providing <start_chars_hint> parameter.\\n` +\n                  \"\\tThis will disable the lexer's first char optimizations.\\n\" +\n                  \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_OPTIMIZE\",\n              );\n            }\n            canBeOptimized = false;\n          }\n\n          return result;\n        },\n        [] as { [charCode: number]: IPatternConfig[] },\n      );\n    });\n  }\n\n  return {\n    emptyGroups: emptyGroups,\n    patternIdxToConfig: patternIdxToConfig,\n    charCodeToPatternIdxToConfig: charCodeToPatternIdxToConfig,\n    hasCustom: hasCustom,\n    canBeOptimized: canBeOptimized,\n  };\n}\n\nexport function validatePatterns(\n  tokenTypes: TokenType[],\n  validModesNames: string[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n\n  const missingResult = findMissingPatterns(tokenTypes);\n  errors = errors.concat(missingResult.errors);\n\n  const invalidResult = findInvalidPatterns(missingResult.valid);\n  const validTokenTypes = invalidResult.valid;\n  errors = errors.concat(invalidResult.errors);\n\n  errors = errors.concat(validateRegExpPattern(validTokenTypes));\n\n  errors = errors.concat(findInvalidGroupType(validTokenTypes));\n\n  errors = errors.concat(\n    findModesThatDoNotExist(validTokenTypes, validModesNames),\n  );\n\n  errors = errors.concat(findUnreachablePatterns(validTokenTypes));\n\n  return errors;\n}\n\nfunction validateRegExpPattern(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  let errors: ILexerDefinitionError[] = [];\n  const withRegExpPatterns = filter(tokenTypes, (currTokType) =>\n    isRegExp(currTokType[PATTERN]),\n  );\n\n  errors = errors.concat(findEndOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findStartOfInputAnchor(withRegExpPatterns));\n\n  errors = errors.concat(findUnsupportedFlags(withRegExpPatterns));\n\n  errors = errors.concat(findDuplicatePatterns(withRegExpPatterns));\n\n  errors = errors.concat(findEmptyMatchRegExps(withRegExpPatterns));\n\n  return errors;\n}\n\nexport interface ILexerFilterResult {\n  errors: ILexerDefinitionError[];\n  valid: TokenType[];\n}\n\nexport function findMissingPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithMissingPattern = filter(tokenTypes, (currType) => {\n    return !has(currType, PATTERN);\n  });\n\n  const errors = map(tokenTypesWithMissingPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- missing static 'PATTERN' property\",\n      type: LexerDefinitionErrorType.MISSING_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithMissingPattern);\n  return { errors, valid };\n}\n\nexport function findInvalidPatterns(\n  tokenTypes: TokenType[],\n): ILexerFilterResult {\n  const tokenTypesWithInvalidPattern = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return (\n      !isRegExp(pattern) &&\n      !isFunction(pattern) &&\n      !has(pattern, \"exec\") &&\n      !isString(pattern)\n    );\n  });\n\n  const errors = map(tokenTypesWithInvalidPattern, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' can only be a RegExp, a\" +\n        \" Function matching the {CustomPatternMatcherFunc} type or an Object matching the {ICustomPattern} interface.\",\n      type: LexerDefinitionErrorType.INVALID_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  const valid = difference(tokenTypes, tokenTypesWithInvalidPattern);\n  return { errors, valid };\n}\n\nconst end_of_input = /[^\\\\][$]/;\n\nexport function findEndOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class EndAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitEndAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN;\n\n    try {\n      const regexpAst = getRegExpAst(pattern as RegExp);\n      const endAnchorVisitor = new EndAnchorFinder();\n      endAnchorVisitor.visit(regexpAst);\n\n      return endAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return end_of_input.test((pattern as RegExp).source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain end of input anchor '$'\\n\" +\n        \"\\tSee chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.EOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findEmptyMatchRegExps(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const matchesEmptyString = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    return pattern.test(\"\");\n  });\n\n  const errors = map(matchesEmptyString, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' must not match an empty string\",\n      type: LexerDefinitionErrorType.EMPTY_MATCH_PATTERN,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nconst start_of_input = /[^\\\\[][\\^]|^\\^/;\n\nexport function findStartOfInputAnchor(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  class StartAnchorFinder extends BaseRegExpVisitor {\n    found = false;\n\n    visitStartAnchor(node: unknown) {\n      this.found = true;\n    }\n  }\n\n  const invalidRegex = filter(tokenTypes, (currType) => {\n    const pattern = currType.PATTERN as RegExp;\n    try {\n      const regexpAst = getRegExpAst(pattern);\n      const startAnchorVisitor = new StartAnchorFinder();\n      startAnchorVisitor.visit(regexpAst);\n\n      return startAnchorVisitor.found;\n    } catch (e) {\n      // old behavior in case of runtime exceptions with regexp-to-ast.\n      /* istanbul ignore next - cannot ensure an error in regexp-to-ast*/\n      return start_of_input.test(pattern.source);\n    }\n  });\n\n  const errors = map(invalidRegex, (currType) => {\n    return {\n      message:\n        \"Unexpected RegExp Anchor Error:\\n\" +\n        \"\\tToken Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' cannot contain start of input anchor '^'\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#ANCHORS\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.SOI_ANCHOR_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnsupportedFlags(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidFlags = filter(tokenTypes, (currType) => {\n    const pattern = currType[PATTERN];\n    return pattern instanceof RegExp && (pattern.multiline || pattern.global);\n  });\n\n  const errors = map(invalidFlags, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'PATTERN' may NOT contain global('g') or multiline('m')\",\n      type: LexerDefinitionErrorType.UNSUPPORTED_FLAGS_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\n// This can only test for identical duplicate RegExps, not semantically equivalent ones.\nexport function findDuplicatePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const found: TokenType[] = [];\n  let identicalPatterns = map(tokenTypes, (outerType: any) => {\n    return reduce(\n      tokenTypes,\n      (result, innerType) => {\n        if (\n          outerType.PATTERN.source === (innerType.PATTERN as RegExp).source &&\n          !includes(found, innerType) &&\n          innerType.PATTERN !== Lexer.NA\n        ) {\n          // this avoids duplicates in the result, each Token Type may only appear in one \"set\"\n          // in essence we are creating Equivalence classes on equality relation.\n          found.push(innerType);\n          result.push(innerType);\n          return result;\n        }\n        return result;\n      },\n      [] as TokenType[],\n    );\n  });\n\n  identicalPatterns = compact(identicalPatterns);\n\n  const duplicatePatterns = filter(identicalPatterns, (currIdenticalSet) => {\n    return currIdenticalSet.length > 1;\n  });\n\n  const errors = map(duplicatePatterns, (setOfIdentical: any) => {\n    const tokenTypeNames = map(setOfIdentical, (currType: any) => {\n      return currType.name;\n    });\n\n    const dupPatternSrc = (<any>first(setOfIdentical)).PATTERN;\n    return {\n      message:\n        `The same RegExp pattern ->${dupPatternSrc}<-` +\n        `has been used in all of the following Token Types: ${tokenTypeNames.join(\n          \", \",\n        )} <-`,\n      type: LexerDefinitionErrorType.DUPLICATE_PATTERNS_FOUND,\n      tokenTypes: setOfIdentical,\n    };\n  });\n\n  return errors;\n}\n\nexport function findInvalidGroupType(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const invalidTypes = filter(tokenTypes, (clazz: any) => {\n    if (!has(clazz, \"GROUP\")) {\n      return false;\n    }\n    const group = clazz.GROUP;\n\n    return group !== Lexer.SKIPPED && group !== Lexer.NA && !isString(group);\n  });\n\n  const errors = map(invalidTypes, (currType) => {\n    return {\n      message:\n        \"Token Type: ->\" +\n        currType.name +\n        \"<- static 'GROUP' can only be Lexer.SKIPPED/Lexer.NA/A String\",\n      type: LexerDefinitionErrorType.INVALID_GROUP_TYPE_FOUND,\n      tokenTypes: [currType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findModesThatDoNotExist(\n  tokenTypes: TokenType[],\n  validModes: string[],\n): ILexerDefinitionError[] {\n  const invalidModes = filter(tokenTypes, (clazz: any) => {\n    return (\n      clazz.PUSH_MODE !== undefined && !includes(validModes, clazz.PUSH_MODE)\n    );\n  });\n\n  const errors = map(invalidModes, (tokType) => {\n    const msg =\n      `Token Type: ->${tokType.name}<- static 'PUSH_MODE' value cannot refer to a Lexer Mode ->${tokType.PUSH_MODE}<-` +\n      `which does not exist`;\n    return {\n      message: msg,\n      type: LexerDefinitionErrorType.PUSH_MODE_DOES_NOT_EXIST,\n      tokenTypes: [tokType],\n    };\n  });\n\n  return errors;\n}\n\nexport function findUnreachablePatterns(\n  tokenTypes: TokenType[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  const canBeTested = reduce(\n    tokenTypes,\n    (result, tokType, idx) => {\n      const pattern = tokType.PATTERN;\n\n      if (pattern === Lexer.NA) {\n        return result;\n      }\n\n      // a more comprehensive validation for all forms of regExps would require\n      // deeper regExp analysis capabilities\n      if (isString(pattern)) {\n        result.push({ str: pattern, idx, tokenType: tokType });\n      } else if (isRegExp(pattern) && noMetaChar(pattern)) {\n        result.push({ str: pattern.source, idx, tokenType: tokType });\n      }\n      return result;\n    },\n    [] as { str: string; idx: number; tokenType: TokenType }[],\n  );\n\n  forEach(tokenTypes, (tokType, testIdx) => {\n    forEach(canBeTested, ({ str, idx, tokenType }) => {\n      if (testIdx < idx && testTokenType(str, tokType.PATTERN)) {\n        const msg =\n          `Token: ->${tokenType.name}<- can never be matched.\\n` +\n          `Because it appears AFTER the Token Type ->${tokType.name}<-` +\n          `in the lexer's definition.\\n` +\n          `See https://chevrotain.io/docs/guide/resolving_lexer_errors.html#UNREACHABLE`;\n        errors.push({\n          message: msg,\n          type: LexerDefinitionErrorType.UNREACHABLE_PATTERN,\n          tokenTypes: [tokType, tokenType],\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nfunction testTokenType(str: string, pattern: any): boolean {\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    const regExpArray = pattern.exec(str);\n    return regExpArray !== null && regExpArray.index === 0;\n  } else if (isFunction(pattern)) {\n    // maintain the API of custom patterns\n    return pattern(str, 0, [], {});\n  } else if (has(pattern, \"exec\")) {\n    // maintain the API of custom patterns\n    return pattern.exec(str, 0, [], {});\n  } else if (typeof pattern === \"string\") {\n    return pattern === str;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction noMetaChar(regExp: RegExp): boolean {\n  //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp\n  const metaChars = [\n    \".\",\n    \"\\\\\",\n    \"[\",\n    \"]\",\n    \"|\",\n    \"^\",\n    \"$\",\n    \"(\",\n    \")\",\n    \"?\",\n    \"*\",\n    \"+\",\n    \"{\",\n  ];\n  return (\n    find(metaChars, (char) => regExp.source.indexOf(char) !== -1) === undefined\n  );\n}\n\nexport function addStartOfInput(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"i\" : \"\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`^(?:${pattern.source})`, flags);\n}\n\nexport function addStickyFlag(pattern: RegExp): RegExp {\n  const flags = pattern.ignoreCase ? \"iy\" : \"y\";\n  // always wrapping in a none capturing group preceded by '^' to make sure matching can only work on start of input.\n  // duplicate/redundant start of input markers have no meaning (/^^^^A/ === /^A/)\n  return new RegExp(`${pattern.source}`, flags);\n}\n\nexport function performRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const errors: ILexerDefinitionError[] = [];\n\n  // some run time checks to help the end users.\n  if (!has(lexerDefinition, DEFAULT_MODE)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        DEFAULT_MODE +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n    });\n  }\n  if (!has(lexerDefinition, MODES)) {\n    errors.push({\n      message:\n        \"A MultiMode Lexer cannot be initialized without a <\" +\n        MODES +\n        \"> property in its definition\\n\",\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n    });\n  }\n\n  if (\n    has(lexerDefinition, MODES) &&\n    has(lexerDefinition, DEFAULT_MODE) &&\n    !has(lexerDefinition.modes, lexerDefinition.defaultMode)\n  ) {\n    errors.push({\n      message:\n        `A MultiMode Lexer cannot be initialized with a ${DEFAULT_MODE}: <${lexerDefinition.defaultMode}>` +\n        `which does not exist\\n`,\n      type: LexerDefinitionErrorType.MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n    });\n  }\n\n  if (has(lexerDefinition, MODES)) {\n    forEach(lexerDefinition.modes, (currModeValue, currModeName) => {\n      forEach(currModeValue, (currTokType, currIdx) => {\n        if (isUndefined(currTokType)) {\n          errors.push({\n            message:\n              `A Lexer cannot be initialized using an undefined Token Type. Mode:` +\n              `<${currModeName}> at index: <${currIdx}>\\n`,\n            type: LexerDefinitionErrorType.LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n          });\n        } else if (has(currTokType, \"LONGER_ALT\")) {\n          const longerAlt = isArray(currTokType.LONGER_ALT)\n            ? currTokType.LONGER_ALT\n            : [currTokType.LONGER_ALT];\n          forEach(longerAlt, (currLongerAlt) => {\n            if (\n              !isUndefined(currLongerAlt) &&\n              !includes(currModeValue, currLongerAlt)\n            ) {\n              errors.push({\n                message: `A MultiMode Lexer cannot be initialized with a longer_alt <${currLongerAlt.name}> on token <${currTokType.name}> outside of mode <${currModeName}>\\n`,\n                type: LexerDefinitionErrorType.MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n              });\n            }\n          });\n        }\n      });\n    });\n  }\n\n  return errors;\n}\n\nexport function performWarningRuntimeChecks(\n  lexerDefinition: IMultiModeLexerDefinition,\n  trackLines: boolean,\n  lineTerminatorCharacters: (number | string)[],\n): ILexerDefinitionError[] {\n  const warnings = [];\n  let hasAnyLineBreak = false;\n  const allTokenTypes = compact(flatten(values(lexerDefinition.modes)));\n\n  const concreteTokenTypes = reject(\n    allTokenTypes,\n    (currType) => currType[PATTERN] === Lexer.NA,\n  );\n  const terminatorCharCodes = getCharCodes(lineTerminatorCharacters);\n  if (trackLines) {\n    forEach(concreteTokenTypes, (tokType) => {\n      const currIssue = checkLineBreaksIssues(tokType, terminatorCharCodes);\n      if (currIssue !== false) {\n        const message = buildLineBreakIssueMessage(tokType, currIssue);\n        const warningDescriptor = {\n          message,\n          type: currIssue.issue,\n          tokenType: tokType,\n        };\n        warnings.push(warningDescriptor);\n      } else {\n        // we don't want to attempt to scan if the user explicitly specified the line_breaks option.\n        if (has(tokType, \"LINE_BREAKS\")) {\n          if (tokType.LINE_BREAKS === true) {\n            hasAnyLineBreak = true;\n          }\n        } else {\n          if (\n            canMatchCharCode(terminatorCharCodes, tokType.PATTERN as RegExp)\n          ) {\n            hasAnyLineBreak = true;\n          }\n        }\n      }\n    });\n  }\n\n  if (trackLines && !hasAnyLineBreak) {\n    warnings.push({\n      message:\n        \"Warning: No LINE_BREAKS Found.\\n\" +\n        \"\\tThis Lexer has been defined to track line and column information,\\n\" +\n        \"\\tBut none of the Token Types can be identified as matching a line terminator.\\n\" +\n        \"\\tSee https://chevrotain.io/docs/guide/resolving_lexer_errors.html#LINE_BREAKS \\n\" +\n        \"\\tfor details.\",\n      type: LexerDefinitionErrorType.NO_LINE_BREAKS_FLAGS,\n    });\n  }\n  return warnings;\n}\n\nexport function cloneEmptyGroups(emptyGroups: {\n  [groupName: string]: IToken;\n}): { [groupName: string]: IToken } {\n  const clonedResult: any = {};\n  const groupKeys = keys(emptyGroups);\n\n  forEach(groupKeys, (currKey) => {\n    const currGroupValue = emptyGroups[currKey];\n\n    /* istanbul ignore else */\n    if (isArray(currGroupValue)) {\n      clonedResult[currKey] = [];\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  });\n\n  return clonedResult;\n}\n\n// TODO: refactor to avoid duplication\nexport function isCustomPattern(tokenType: TokenType): boolean {\n  const pattern = tokenType.PATTERN;\n  /* istanbul ignore else */\n  if (isRegExp(pattern)) {\n    return false;\n  } else if (isFunction(pattern)) {\n    // CustomPatternMatcherFunc - custom patterns do not require any transformations, only wrapping in a RegExp Like object\n    return true;\n  } else if (has(pattern, \"exec\")) {\n    // ICustomPattern\n    return true;\n  } else if (isString(pattern)) {\n    return false;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function isShortPattern(pattern: any): number | false {\n  if (isString(pattern) && pattern.length === 1) {\n    return pattern.charCodeAt(0);\n  } else {\n    return false;\n  }\n}\n\n/**\n * Faster than using a RegExp for default newline detection during lexing.\n */\nexport const LineTerminatorOptimizedTester: ILineTerminatorsTester = {\n  // implements /\\n|\\r\\n?/g.test\n  test: function (text) {\n    const len = text.length;\n    for (let i = this.lastIndex; i < len; i++) {\n      const c = text.charCodeAt(i);\n      if (c === 10) {\n        this.lastIndex = i + 1;\n        return true;\n      } else if (c === 13) {\n        if (text.charCodeAt(i + 1) === 10) {\n          this.lastIndex = i + 2;\n        } else {\n          this.lastIndex = i + 1;\n        }\n        return true;\n      }\n    }\n    return false;\n  },\n\n  lastIndex: 0,\n};\n\nfunction checkLineBreaksIssues(\n  tokType: TokenType,\n  lineTerminatorCharCodes: number[],\n):\n  | {\n      issue:\n        | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n        | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n      errMsg?: string;\n    }\n  | false {\n  if (has(tokType, \"LINE_BREAKS\")) {\n    // if the user explicitly declared the line_breaks option we will respect their choice\n    // and assume it is correct.\n    return false;\n  } else {\n    /* istanbul ignore else */\n    if (isRegExp(tokType.PATTERN)) {\n      try {\n        // TODO: why is the casting suddenly needed?\n        canMatchCharCode(lineTerminatorCharCodes, tokType.PATTERN as RegExp);\n      } catch (e) {\n        /* istanbul ignore next - to test this we would have to mock <canMatchCharCode> to throw an error */\n        return {\n          issue: LexerDefinitionErrorType.IDENTIFY_TERMINATOR,\n          errMsg: (e as Error).message,\n        };\n      }\n      return false;\n    } else if (isString(tokType.PATTERN)) {\n      // string literal patterns can always be analyzed to detect line terminator usage\n      return false;\n    } else if (isCustomPattern(tokType)) {\n      // custom token types\n      return { issue: LexerDefinitionErrorType.CUSTOM_LINE_BREAK };\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n}\n\nexport function buildLineBreakIssueMessage(\n  tokType: TokenType,\n  details: {\n    issue:\n      | LexerDefinitionErrorType.IDENTIFY_TERMINATOR\n      | LexerDefinitionErrorType.CUSTOM_LINE_BREAK;\n    errMsg?: string;\n  },\n): string {\n  /* istanbul ignore else */\n  if (details.issue === LexerDefinitionErrorType.IDENTIFY_TERMINATOR) {\n    return (\n      \"Warning: unable to identify line terminator usage in pattern.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      `\\t Root cause: ${details.errMsg}.\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#IDENTIFY_TERMINATOR\"\n    );\n  } else if (details.issue === LexerDefinitionErrorType.CUSTOM_LINE_BREAK) {\n    return (\n      \"Warning: A Custom Token Pattern should specify the <line_breaks> option.\\n\" +\n      `\\tThe problem is in the <${tokType.name}> Token Type\\n` +\n      \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#CUSTOM_LINE_BREAK\"\n    );\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nfunction getCharCodes(charsOrCodes: (number | string)[]): number[] {\n  const charCodes = map(charsOrCodes, (numOrString) => {\n    if (isString(numOrString)) {\n      return numOrString.charCodeAt(0);\n    } else {\n      return numOrString;\n    }\n  });\n\n  return charCodes;\n}\n\nfunction addToMapOfArrays<T>(\n  map: Record<number, T[]>,\n  key: number,\n  value: T,\n): void {\n  if (map[key] === undefined) {\n    map[key] = [value];\n  } else {\n    map[key].push(value);\n  }\n}\n\nexport const minOptimizationVal = 256;\n\n/**\n * We are mapping charCode above ASCI (256) into buckets each in the size of 256.\n * This is because ASCI are the most common start chars so each one of those will get its own\n * possible token configs vector.\n *\n * Tokens starting with charCodes \"above\" ASCI are uncommon, so we can \"afford\"\n * to place these into buckets of possible token configs, What we gain from\n * this is avoiding the case of creating an optimization 'charCodeToPatternIdxToConfig'\n * which would contain 10,000+ arrays of small size (e.g unicode Identifiers scenario).\n * Our 'charCodeToPatternIdxToConfig' max size will now be:\n * 256 + (2^16 / 2^8) - 1 === 511\n *\n * note the hack for fast division integer part extraction\n * See: https://stackoverflow.com/a/4228528\n */\nlet charCodeToOptimizedIdxMap: number[] = [];\nexport function charCodeToOptimizedIndex(charCode: number): number {\n  return charCode < minOptimizationVal\n    ? charCode\n    : charCodeToOptimizedIdxMap[charCode];\n}\n\n/**\n * This is a compromise between cold start / hot running performance\n * Creating this array takes ~3ms on a modern machine,\n * But if we perform the computation at runtime as needed the CSS Lexer benchmark\n * performance degrades by ~10%\n *\n * TODO: Perhaps it should be lazy initialized only if a charCode > 255 is used.\n */\nfunction initCharCodeToOptimizedIndexMap() {\n  if (isEmpty(charCodeToOptimizedIdxMap)) {\n    charCodeToOptimizedIdxMap = new Array(65536);\n    for (let i = 0; i < 65536; i++) {\n      charCodeToOptimizedIdxMap[i] = i > 255 ? 255 + ~~(i / 255) : i;\n    }\n  }\n}\n","export function timer<T>(func: () => T): { time: number; value: T } {\n  const start = new Date().getTime();\n  const val = func();\n  const end = new Date().getTime();\n  const total = end - start;\n  return { time: total, value: val };\n}\n","import {\n  clone,\n  compact,\n  difference,\n  flatten,\n  forEach,\n  has,\n  includes,\n  isArray,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport { IToken, TokenType } from \"@chevrotain/types\";\n\nexport function tokenStructuredMatcher(\n  tokInstance: IToken,\n  tokConstructor: TokenType,\n) {\n  const instanceType = tokInstance.tokenTypeIdx;\n  if (instanceType === tokConstructor.tokenTypeIdx) {\n    return true;\n  } else {\n    return (\n      tokConstructor.isParent === true &&\n      tokConstructor.categoryMatchesMap![instanceType] === true\n    );\n  }\n}\n\n// Optimized tokenMatcher in case our grammar does not use token categories\n// Being so tiny it is much more likely to be in-lined and this avoid the function call overhead\nexport function tokenStructuredMatcherNoCategories(\n  token: IToken,\n  tokType: TokenType,\n) {\n  return token.tokenTypeIdx === tokType.tokenTypeIdx;\n}\n\nexport let tokenShortNameIdx = 1;\nexport const tokenIdxToClass: { [tokenIdx: number]: TokenType } = {};\n\nexport function augmentTokenTypes(tokenTypes: TokenType[]): void {\n  // collect the parent Token Types as well.\n  const tokenTypesAndParents = expandCategories(tokenTypes);\n\n  // add required tokenType and categoryMatches properties\n  assignTokenDefaultProps(tokenTypesAndParents);\n\n  // fill up the categoryMatches\n  assignCategoriesMapProp(tokenTypesAndParents);\n  assignCategoriesTokensProp(tokenTypesAndParents);\n\n  forEach(tokenTypesAndParents, (tokType) => {\n    tokType.isParent = tokType.categoryMatches!.length > 0;\n  });\n}\n\nexport function expandCategories(tokenTypes: TokenType[]): TokenType[] {\n  let result = clone(tokenTypes);\n\n  let categories = tokenTypes;\n  let searching = true;\n  while (searching) {\n    categories = compact(\n      flatten(map(categories, (currTokType) => currTokType.CATEGORIES)),\n    );\n\n    const newCategories = difference(categories, result);\n\n    result = result.concat(newCategories);\n\n    if (isEmpty(newCategories)) {\n      searching = false;\n    } else {\n      categories = newCategories;\n    }\n  }\n  return result;\n}\n\nexport function assignTokenDefaultProps(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    if (!hasShortKeyProperty(currTokType)) {\n      tokenIdxToClass[tokenShortNameIdx] = currTokType;\n      (<any>currTokType).tokenTypeIdx = tokenShortNameIdx++;\n    }\n\n    // CATEGORIES? : TokenType | TokenType[]\n    if (\n      hasCategoriesProperty(currTokType) &&\n      !isArray(currTokType.CATEGORIES)\n      // &&\n      // !isUndefined(currTokType.CATEGORIES.PATTERN)\n    ) {\n      currTokType.CATEGORIES = [currTokType.CATEGORIES as unknown as TokenType];\n    }\n\n    if (!hasCategoriesProperty(currTokType)) {\n      currTokType.CATEGORIES = [];\n    }\n\n    if (!hasExtendingTokensTypesProperty(currTokType)) {\n      currTokType.categoryMatches = [];\n    }\n\n    if (!hasExtendingTokensTypesMapProperty(currTokType)) {\n      currTokType.categoryMatchesMap = {};\n    }\n  });\n}\n\nexport function assignCategoriesTokensProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    // avoid duplications\n    currTokType.categoryMatches = [];\n    forEach(currTokType.categoryMatchesMap!, (val, key) => {\n      currTokType.categoryMatches!.push(\n        tokenIdxToClass[key as unknown as number].tokenTypeIdx!,\n      );\n    });\n  });\n}\n\nexport function assignCategoriesMapProp(tokenTypes: TokenType[]): void {\n  forEach(tokenTypes, (currTokType) => {\n    singleAssignCategoriesToksMap([], currTokType);\n  });\n}\n\nexport function singleAssignCategoriesToksMap(\n  path: TokenType[],\n  nextNode: TokenType,\n): void {\n  forEach(path, (pathNode) => {\n    nextNode.categoryMatchesMap![pathNode.tokenTypeIdx!] = true;\n  });\n\n  forEach(nextNode.CATEGORIES, (nextCategory) => {\n    const newPath = path.concat(nextNode);\n    // avoids infinite loops due to cyclic categories.\n    if (!includes(newPath, nextCategory)) {\n      singleAssignCategoriesToksMap(newPath, nextCategory);\n    }\n  });\n}\n\nexport function hasShortKeyProperty(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n\nexport function hasCategoriesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"CATEGORIES\");\n}\n\nexport function hasExtendingTokensTypesProperty(tokType: TokenType): boolean {\n  return has(tokType, \"categoryMatches\");\n}\n\nexport function hasExtendingTokensTypesMapProperty(\n  tokType: TokenType,\n): boolean {\n  return has(tokType, \"categoryMatchesMap\");\n}\n\nexport function isTokenType(tokType: TokenType): boolean {\n  return has(tokType, \"tokenTypeIdx\");\n}\n","import { ILexerErrorMessageProvider, IToken } from \"@chevrotain/types\";\n\nexport const defaultLexerErrorProvider: ILexerErrorMessageProvider = {\n  buildUnableToPopLexerModeMessage(token: IToken): string {\n    return `Unable to pop Lexer Mode after encountering Token ->${token.image}<- The Mode Stack is empty`;\n  },\n\n  buildUnexpectedCharactersMessage(\n    fullText: string,\n    startOffset: number,\n    length: number,\n    line?: number,\n    column?: number,\n  ): string {\n    return (\n      `unexpected character: ->${fullText.charAt(\n        startOffset,\n      )}<- at offset: ${startOffset},` + ` skipped ${length} characters.`\n    );\n  },\n};\n","import {\n  analyzeTokenTypes,\n  charCodeToOptimizedIndex,\n  cloneEmptyGroups,\n  DEFAULT_MODE,\n  IAnalyzeResult,\n  IPatternConfig,\n  LineTerminatorOptimizedTester,\n  performRuntimeChecks,\n  performWarningRuntimeChecks,\n  SUPPORT_STICKY,\n  validatePatterns,\n} from \"./lexer.js\";\nimport {\n  assign,\n  clone,\n  forEach,\n  identity,\n  isArray,\n  isEmpty,\n  isUndefined,\n  keys,\n  last,\n  map,\n  noop,\n  reduce,\n  reject,\n} from \"lodash-es\";\nimport { PRINT_WARNING, timer, toFastProperties } from \"@chevrotain/utils\";\nimport { augmentTokenTypes } from \"./tokens.js\";\nimport {\n  CustomPatternMatcherFunc,\n  CustomPatternMatcherReturn,\n  ILexerConfig,\n  ILexerDefinitionError,\n  ILexingError,\n  IMultiModeLexerDefinition,\n  IToken,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { defaultLexerErrorProvider } from \"./lexer_errors_public.js\";\nimport { clearRegExpParserCache } from \"./reg_exp_parser.js\";\n\nexport interface ILexingResult {\n  tokens: IToken[];\n  groups: { [groupName: string]: IToken[] };\n  errors: ILexingError[];\n}\n\nexport enum LexerDefinitionErrorType {\n  MISSING_PATTERN,\n  INVALID_PATTERN,\n  EOI_ANCHOR_FOUND,\n  UNSUPPORTED_FLAGS_FOUND,\n  DUPLICATE_PATTERNS_FOUND,\n  INVALID_GROUP_TYPE_FOUND,\n  PUSH_MODE_DOES_NOT_EXIST,\n  MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE,\n  MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY,\n  MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST,\n  LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED,\n  SOI_ANCHOR_FOUND,\n  EMPTY_MATCH_PATTERN,\n  NO_LINE_BREAKS_FLAGS,\n  UNREACHABLE_PATTERN,\n  IDENTIFY_TERMINATOR,\n  CUSTOM_LINE_BREAK,\n  MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE,\n}\n\nexport interface IRegExpExec {\n  exec: CustomPatternMatcherFunc;\n}\n\nconst DEFAULT_LEXER_CONFIG: Required<ILexerConfig> = {\n  deferDefinitionErrorsHandling: false,\n  positionTracking: \"full\",\n  lineTerminatorsPattern: /\\n|\\r\\n?/g,\n  lineTerminatorCharacters: [\"\\n\", \"\\r\"],\n  ensureOptimizations: false,\n  safeMode: false,\n  errorMessageProvider: defaultLexerErrorProvider,\n  traceInitPerf: false,\n  skipValidations: false,\n  recoveryEnabled: true,\n};\n\nObject.freeze(DEFAULT_LEXER_CONFIG);\n\nexport class Lexer {\n  public static SKIPPED =\n    \"This marks a skipped Token pattern, this means each token identified by it will\" +\n    \"be consumed and then thrown into oblivion, this can be used to for example to completely ignore whitespace.\";\n\n  public static NA = /NOT_APPLICABLE/;\n  public lexerDefinitionErrors: ILexerDefinitionError[] = [];\n  public lexerDefinitionWarning: ILexerDefinitionError[] = [];\n\n  protected patternIdxToConfig: Record<string, IPatternConfig[]> = {};\n  protected charCodeToPatternIdxToConfig: {\n    [modeName: string]: { [charCode: number]: IPatternConfig[] };\n  } = {};\n\n  protected modes: string[] = [];\n  protected defaultMode!: string;\n  protected emptyGroups: { [groupName: string]: IToken } = {};\n\n  private config: Required<ILexerConfig>;\n  private trackStartLines: boolean = true;\n  private trackEndLines: boolean = true;\n  private hasCustom: boolean = false;\n  private canModeBeOptimized: Record<string, boolean> = {};\n\n  private traceInitPerf!: boolean | number;\n  private traceInitMaxIdent!: number;\n  private traceInitIndent: number;\n\n  constructor(\n    protected lexerDefinition: TokenType[] | IMultiModeLexerDefinition,\n    config: ILexerConfig = DEFAULT_LEXER_CONFIG,\n  ) {\n    if (typeof config === \"boolean\") {\n      throw Error(\n        \"The second argument to the Lexer constructor is now an ILexerConfig Object.\\n\" +\n          \"a boolean 2nd argument is no longer supported\",\n      );\n    }\n\n    // todo: defaults func?\n    this.config = assign({}, DEFAULT_LEXER_CONFIG, config) as any;\n\n    const traceInitVal = this.config.traceInitPerf;\n    if (traceInitVal === true) {\n      this.traceInitMaxIdent = Infinity;\n      this.traceInitPerf = true;\n    } else if (typeof traceInitVal === \"number\") {\n      this.traceInitMaxIdent = traceInitVal;\n      this.traceInitPerf = true;\n    }\n    this.traceInitIndent = -1;\n\n    this.TRACE_INIT(\"Lexer Constructor\", () => {\n      let actualDefinition!: IMultiModeLexerDefinition;\n      let hasOnlySingleMode = true;\n      this.TRACE_INIT(\"Lexer Config handling\", () => {\n        if (\n          this.config.lineTerminatorsPattern ===\n          DEFAULT_LEXER_CONFIG.lineTerminatorsPattern\n        ) {\n          // optimized built-in implementation for the defaults definition of lineTerminators\n          this.config.lineTerminatorsPattern = LineTerminatorOptimizedTester;\n        } else {\n          if (\n            this.config.lineTerminatorCharacters ===\n            DEFAULT_LEXER_CONFIG.lineTerminatorCharacters\n          ) {\n            throw Error(\n              \"Error: Missing <lineTerminatorCharacters> property on the Lexer config.\\n\" +\n                \"\\tFor details See: https://chevrotain.io/docs/guide/resolving_lexer_errors.html#MISSING_LINE_TERM_CHARS\",\n            );\n          }\n        }\n\n        if (config.safeMode && config.ensureOptimizations) {\n          throw Error(\n            '\"safeMode\" and \"ensureOptimizations\" flags are mutually exclusive.',\n          );\n        }\n\n        this.trackStartLines = /full|onlyStart/i.test(\n          this.config.positionTracking,\n        );\n        this.trackEndLines = /full/i.test(this.config.positionTracking);\n\n        // Convert SingleModeLexerDefinition into a IMultiModeLexerDefinition.\n        if (isArray(lexerDefinition)) {\n          actualDefinition = {\n            modes: { defaultMode: clone(lexerDefinition) },\n            defaultMode: DEFAULT_MODE,\n          };\n        } else {\n          // no conversion needed, input should already be a IMultiModeLexerDefinition\n          hasOnlySingleMode = false;\n          actualDefinition = clone(<IMultiModeLexerDefinition>lexerDefinition);\n        }\n      });\n\n      if (this.config.skipValidations === false) {\n        this.TRACE_INIT(\"performRuntimeChecks\", () => {\n          this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n            performRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n\n        this.TRACE_INIT(\"performWarningRuntimeChecks\", () => {\n          this.lexerDefinitionWarning = this.lexerDefinitionWarning.concat(\n            performWarningRuntimeChecks(\n              actualDefinition,\n              this.trackStartLines,\n              this.config.lineTerminatorCharacters,\n            ),\n          );\n        });\n      }\n\n      // for extra robustness to avoid throwing an none informative error message\n      actualDefinition.modes = actualDefinition.modes\n        ? actualDefinition.modes\n        : {};\n\n      // an error of undefined TokenTypes will be detected in \"performRuntimeChecks\" above.\n      // this transformation is to increase robustness in the case of partially invalid lexer definition.\n      forEach(actualDefinition.modes, (currModeValue, currModeName) => {\n        actualDefinition.modes[currModeName] = reject<TokenType>(\n          currModeValue,\n          (currTokType) => isUndefined(currTokType),\n        );\n      });\n\n      const allModeNames = keys(actualDefinition.modes);\n\n      forEach(\n        actualDefinition.modes,\n        (currModDef: TokenType[], currModName) => {\n          this.TRACE_INIT(`Mode: <${currModName}> processing`, () => {\n            this.modes.push(currModName);\n\n            if (this.config.skipValidations === false) {\n              this.TRACE_INIT(`validatePatterns`, () => {\n                this.lexerDefinitionErrors = this.lexerDefinitionErrors.concat(\n                  validatePatterns(currModDef, allModeNames),\n                );\n              });\n            }\n\n            // If definition errors were encountered, the analysis phase may fail unexpectedly/\n            // Considering a lexer with definition errors may never be used, there is no point\n            // to performing the analysis anyhow...\n            if (isEmpty(this.lexerDefinitionErrors)) {\n              augmentTokenTypes(currModDef);\n\n              let currAnalyzeResult!: IAnalyzeResult;\n              this.TRACE_INIT(`analyzeTokenTypes`, () => {\n                currAnalyzeResult = analyzeTokenTypes(currModDef, {\n                  lineTerminatorCharacters:\n                    this.config.lineTerminatorCharacters,\n                  positionTracking: config.positionTracking,\n                  ensureOptimizations: config.ensureOptimizations,\n                  safeMode: config.safeMode,\n                  tracer: this.TRACE_INIT,\n                });\n              });\n\n              this.patternIdxToConfig[currModName] =\n                currAnalyzeResult.patternIdxToConfig;\n\n              this.charCodeToPatternIdxToConfig[currModName] =\n                currAnalyzeResult.charCodeToPatternIdxToConfig;\n\n              this.emptyGroups = assign(\n                {},\n                this.emptyGroups,\n                currAnalyzeResult.emptyGroups,\n              ) as any;\n\n              this.hasCustom = currAnalyzeResult.hasCustom || this.hasCustom;\n\n              this.canModeBeOptimized[currModName] =\n                currAnalyzeResult.canBeOptimized;\n            }\n          });\n        },\n      );\n\n      this.defaultMode = actualDefinition.defaultMode;\n\n      if (\n        !isEmpty(this.lexerDefinitionErrors) &&\n        !this.config.deferDefinitionErrorsHandling\n      ) {\n        const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n          return error.message;\n        });\n        const allErrMessagesString = allErrMessages.join(\n          \"-----------------------\\n\",\n        );\n        throw new Error(\n          \"Errors detected in definition of Lexer:\\n\" + allErrMessagesString,\n        );\n      }\n\n      // Only print warning if there are no errors, This will avoid pl\n      forEach(this.lexerDefinitionWarning, (warningDescriptor) => {\n        PRINT_WARNING(warningDescriptor.message);\n      });\n\n      this.TRACE_INIT(\"Choosing sub-methods implementations\", () => {\n        // Choose the relevant internal implementations for this specific parser.\n        // These implementations should be in-lined by the JavaScript engine\n        // to provide optimal performance in each scenario.\n        if (SUPPORT_STICKY) {\n          this.chopInput = <any>identity;\n          this.match = this.matchWithTest;\n        } else {\n          this.updateLastIndex = noop;\n          this.match = this.matchWithExec;\n        }\n\n        if (hasOnlySingleMode) {\n          this.handleModes = noop;\n        }\n\n        if (this.trackStartLines === false) {\n          this.computeNewColumn = identity;\n        }\n\n        if (this.trackEndLines === false) {\n          this.updateTokenEndLineColumnLocation = noop;\n        }\n\n        if (/full/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createFullToken;\n        } else if (/onlyStart/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createStartOnlyToken;\n        } else if (/onlyOffset/i.test(this.config.positionTracking)) {\n          this.createTokenInstance = this.createOffsetOnlyToken;\n        } else {\n          throw Error(\n            `Invalid <positionTracking> config option: \"${this.config.positionTracking}\"`,\n          );\n        }\n\n        if (this.hasCustom) {\n          this.addToken = this.addTokenUsingPush;\n          this.handlePayload = this.handlePayloadWithCustom;\n        } else {\n          this.addToken = this.addTokenUsingMemberAccess;\n          this.handlePayload = this.handlePayloadNoCustom;\n        }\n      });\n\n      this.TRACE_INIT(\"Failed Optimization Warnings\", () => {\n        const unOptimizedModes = reduce(\n          this.canModeBeOptimized,\n          (cannotBeOptimized, canBeOptimized, modeName) => {\n            if (canBeOptimized === false) {\n              cannotBeOptimized.push(modeName);\n            }\n            return cannotBeOptimized;\n          },\n          [] as string[],\n        );\n\n        if (config.ensureOptimizations && !isEmpty(unOptimizedModes)) {\n          throw Error(\n            `Lexer Modes: < ${unOptimizedModes.join(\n              \", \",\n            )} > cannot be optimized.\\n` +\n              '\\t Disable the \"ensureOptimizations\" lexer config flag to silently ignore this and run the lexer in an un-optimized mode.\\n' +\n              \"\\t Or inspect the console log for details on how to resolve these issues.\",\n          );\n        }\n      });\n\n      this.TRACE_INIT(\"clearRegExpParserCache\", () => {\n        clearRegExpParserCache();\n      });\n\n      this.TRACE_INIT(\"toFastProperties\", () => {\n        toFastProperties(this);\n      });\n    });\n  }\n\n  public tokenize(\n    text: string,\n    initialMode: string = this.defaultMode,\n  ): ILexingResult {\n    if (!isEmpty(this.lexerDefinitionErrors)) {\n      const allErrMessages = map(this.lexerDefinitionErrors, (error) => {\n        return error.message;\n      });\n      const allErrMessagesString = allErrMessages.join(\n        \"-----------------------\\n\",\n      );\n      throw new Error(\n        \"Unable to Tokenize because Errors detected in definition of Lexer:\\n\" +\n          allErrMessagesString,\n      );\n    }\n\n    return this.tokenizeInternal(text, initialMode);\n  }\n\n  // There is quite a bit of duplication between this and \"tokenizeInternalLazy\"\n  // This is intentional due to performance considerations.\n  // this method also used quite a bit of `!` none null assertions because it is too optimized\n  // for `tsc` to always understand it is \"safe\"\n  private tokenizeInternal(text: string, initialMode: string): ILexingResult {\n    let i,\n      j,\n      k,\n      matchAltImage,\n      longerAlt,\n      matchedImage: string | null,\n      payload,\n      altPayload,\n      imageLength,\n      group,\n      tokType,\n      newToken: IToken,\n      errLength,\n      droppedChar,\n      msg,\n      match;\n    const orgText = text;\n    const orgLength = orgText.length;\n    let offset = 0;\n    let matchedTokensIndex = 0;\n    // initializing the tokensArray to the \"guessed\" size.\n    // guessing too little will still reduce the number of array re-sizes on pushes.\n    // guessing too large (Tested by guessing x4 too large) may cost a bit more of memory\n    // but would still have a faster runtime by avoiding (All but one) array resizing.\n    const guessedNumberOfTokens = this.hasCustom\n      ? 0 // will break custom token pattern APIs the matchedTokens array will contain undefined elements.\n      : Math.floor(text.length / 10);\n    const matchedTokens = new Array(guessedNumberOfTokens);\n    const errors: ILexingError[] = [];\n    let line = this.trackStartLines ? 1 : undefined;\n    let column = this.trackStartLines ? 1 : undefined;\n    const groups: any = cloneEmptyGroups(this.emptyGroups);\n    const trackLines = this.trackStartLines;\n    const lineTerminatorPattern = this.config.lineTerminatorsPattern;\n\n    let currModePatternsLength = 0;\n    let patternIdxToConfig: IPatternConfig[] = [];\n    let currCharCodeToPatternIdxToConfig: {\n      [charCode: number]: IPatternConfig[];\n    } = [];\n\n    const modeStack: string[] = [];\n\n    const emptyArray: IPatternConfig[] = [];\n    Object.freeze(emptyArray);\n    let getPossiblePatterns!: (charCode: number) => IPatternConfig[];\n\n    function getPossiblePatternsSlow() {\n      return patternIdxToConfig;\n    }\n\n    function getPossiblePatternsOptimized(charCode: number): IPatternConfig[] {\n      const optimizedCharIdx = charCodeToOptimizedIndex(charCode);\n      const possiblePatterns =\n        currCharCodeToPatternIdxToConfig[optimizedCharIdx];\n      if (possiblePatterns === undefined) {\n        return emptyArray;\n      } else {\n        return possiblePatterns;\n      }\n    }\n\n    const pop_mode = (popToken: IToken) => {\n      // TODO: perhaps avoid this error in the edge case there is no more input?\n      if (\n        modeStack.length === 1 &&\n        // if we have both a POP_MODE and a PUSH_MODE this is in-fact a \"transition\"\n        // So no error should occur.\n        popToken.tokenType.PUSH_MODE === undefined\n      ) {\n        // if we try to pop the last mode there lexer will no longer have ANY mode.\n        // thus the pop is ignored, an error will be created and the lexer will continue parsing in the previous mode.\n        const msg =\n          this.config.errorMessageProvider.buildUnableToPopLexerModeMessage(\n            popToken,\n          );\n\n        errors.push({\n          offset: popToken.startOffset,\n          line: popToken.startLine,\n          column: popToken.startColumn,\n          length: popToken.image.length,\n          message: msg,\n        });\n      } else {\n        modeStack.pop();\n        const newMode = last(modeStack)!;\n        patternIdxToConfig = this.patternIdxToConfig[newMode];\n        currCharCodeToPatternIdxToConfig =\n          this.charCodeToPatternIdxToConfig[newMode];\n        currModePatternsLength = patternIdxToConfig.length;\n        const modeCanBeOptimized =\n          this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n        if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n          getPossiblePatterns = getPossiblePatternsOptimized;\n        } else {\n          getPossiblePatterns = getPossiblePatternsSlow;\n        }\n      }\n    };\n\n    function push_mode(this: Lexer, newMode: string) {\n      modeStack.push(newMode);\n      currCharCodeToPatternIdxToConfig =\n        this.charCodeToPatternIdxToConfig[newMode];\n\n      patternIdxToConfig = this.patternIdxToConfig[newMode];\n      currModePatternsLength = patternIdxToConfig.length;\n\n      currModePatternsLength = patternIdxToConfig.length;\n      const modeCanBeOptimized =\n        this.canModeBeOptimized[newMode] && this.config.safeMode === false;\n\n      if (currCharCodeToPatternIdxToConfig && modeCanBeOptimized) {\n        getPossiblePatterns = getPossiblePatternsOptimized;\n      } else {\n        getPossiblePatterns = getPossiblePatternsSlow;\n      }\n    }\n\n    // this pattern seems to avoid a V8 de-optimization, although that de-optimization does not\n    // seem to matter performance wise.\n    push_mode.call(this, initialMode);\n\n    let currConfig!: IPatternConfig;\n\n    const recoveryEnabled = this.config.recoveryEnabled;\n\n    while (offset < orgLength) {\n      matchedImage = null;\n\n      const nextCharCode = orgText.charCodeAt(offset);\n      const chosenPatternIdxToConfig = getPossiblePatterns(nextCharCode);\n      const chosenPatternsLength = chosenPatternIdxToConfig.length;\n\n      for (i = 0; i < chosenPatternsLength; i++) {\n        currConfig = chosenPatternIdxToConfig[i];\n        const currPattern = currConfig.pattern;\n        payload = null;\n\n        // manually in-lined because > 600 chars won't be in-lined in V8\n        const singleCharCode = currConfig.short;\n        if (singleCharCode !== false) {\n          if (nextCharCode === singleCharCode) {\n            // single character string\n            matchedImage = currPattern as string;\n          }\n        } else if (currConfig.isCustom === true) {\n          match = (currPattern as IRegExpExec).exec(\n            orgText,\n            offset,\n            matchedTokens,\n            groups,\n          );\n          if (match !== null) {\n            matchedImage = match[0];\n            if ((match as CustomPatternMatcherReturn).payload !== undefined) {\n              payload = (match as CustomPatternMatcherReturn).payload;\n            }\n          } else {\n            matchedImage = null;\n          }\n        } else {\n          this.updateLastIndex(currPattern as RegExp, offset);\n          matchedImage = this.match(currPattern as RegExp, text, offset);\n        }\n\n        if (matchedImage !== null) {\n          // even though this pattern matched we must try a another longer alternative.\n          // this can be used to prioritize keywords over identifiers\n          longerAlt = currConfig.longerAlt;\n          if (longerAlt !== undefined) {\n            // TODO: micro optimize, avoid extra prop access\n            // by saving/linking longerAlt on the original config?\n            const longerAltLength = longerAlt.length;\n            for (k = 0; k < longerAltLength; k++) {\n              const longerAltConfig = patternIdxToConfig[longerAlt[k]];\n              const longerAltPattern = longerAltConfig.pattern;\n              altPayload = null;\n\n              // single Char can never be a longer alt so no need to test it.\n              // manually in-lined because > 600 chars won't be in-lined in V8\n              if (longerAltConfig.isCustom === true) {\n                match = (longerAltPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                );\n                if (match !== null) {\n                  matchAltImage = match[0];\n                  if (\n                    (match as CustomPatternMatcherReturn).payload !== undefined\n                  ) {\n                    altPayload = (match as CustomPatternMatcherReturn).payload;\n                  }\n                } else {\n                  matchAltImage = null;\n                }\n              } else {\n                this.updateLastIndex(longerAltPattern as RegExp, offset);\n                matchAltImage = this.match(\n                  longerAltPattern as RegExp,\n                  text,\n                  offset,\n                );\n              }\n\n              if (matchAltImage && matchAltImage.length > matchedImage.length) {\n                matchedImage = matchAltImage;\n                payload = altPayload;\n                currConfig = longerAltConfig;\n                // Exit the loop early after matching one of the longer alternatives\n                // The first matched alternative takes precedence\n                break;\n              }\n            }\n          }\n          break;\n        }\n      }\n\n      // successful match\n      if (matchedImage !== null) {\n        imageLength = matchedImage.length;\n        group = currConfig.group;\n        if (group !== undefined) {\n          tokType = currConfig.tokenTypeIdx;\n          // TODO: \"offset + imageLength\" and the new column may be computed twice in case of \"full\" location information inside\n          // createFullToken method\n          newToken = this.createTokenInstance(\n            matchedImage,\n            offset,\n            tokType,\n            currConfig.tokenType,\n            line,\n            column,\n            imageLength,\n          );\n\n          this.handlePayload(newToken, payload);\n\n          // TODO: optimize NOOP in case there are no special groups?\n          if (group === false) {\n            matchedTokensIndex = this.addToken(\n              matchedTokens,\n              matchedTokensIndex,\n              newToken,\n            );\n          } else {\n            groups[group].push(newToken);\n          }\n        }\n        text = this.chopInput(text, imageLength);\n        offset = offset + imageLength;\n\n        // TODO: with newlines the column may be assigned twice\n        column = this.computeNewColumn(column!, imageLength);\n\n        if (trackLines === true && currConfig.canLineTerminator === true) {\n          let numOfLTsInMatch = 0;\n          let foundTerminator;\n          let lastLTEndOffset: number;\n          lineTerminatorPattern.lastIndex = 0;\n          do {\n            foundTerminator = lineTerminatorPattern.test(matchedImage);\n            if (foundTerminator === true) {\n              lastLTEndOffset = lineTerminatorPattern.lastIndex - 1;\n              numOfLTsInMatch++;\n            }\n          } while (foundTerminator === true);\n\n          if (numOfLTsInMatch !== 0) {\n            line = line! + numOfLTsInMatch;\n            column = imageLength - lastLTEndOffset!;\n            this.updateTokenEndLineColumnLocation(\n              newToken!,\n              group!,\n              lastLTEndOffset!,\n              numOfLTsInMatch,\n              line,\n              column,\n              imageLength,\n            );\n          }\n        }\n        // will be NOOP if no modes present\n        this.handleModes(currConfig, pop_mode, push_mode, newToken!);\n      } else {\n        // error recovery, drop characters until we identify a valid token's start point\n        const errorStartOffset = offset;\n        const errorLine = line;\n        const errorColumn = column;\n        let foundResyncPoint = recoveryEnabled === false;\n\n        while (foundResyncPoint === false && offset < orgLength) {\n          // Identity Func (when sticky flag is enabled)\n          text = this.chopInput(text, 1);\n          offset++;\n          for (j = 0; j < currModePatternsLength; j++) {\n            const currConfig = patternIdxToConfig[j];\n            const currPattern = currConfig.pattern;\n\n            // manually in-lined because > 600 chars won't be in-lined in V8\n            const singleCharCode = currConfig.short;\n            if (singleCharCode !== false) {\n              if (orgText.charCodeAt(offset) === singleCharCode) {\n                // single character string\n                foundResyncPoint = true;\n              }\n            } else if (currConfig.isCustom === true) {\n              foundResyncPoint =\n                (currPattern as IRegExpExec).exec(\n                  orgText,\n                  offset,\n                  matchedTokens,\n                  groups,\n                ) !== null;\n            } else {\n              this.updateLastIndex(currPattern as RegExp, offset);\n              foundResyncPoint = (currPattern as RegExp).exec(text) !== null;\n            }\n\n            if (foundResyncPoint === true) {\n              break;\n            }\n          }\n        }\n\n        errLength = offset - errorStartOffset;\n        column = this.computeNewColumn(column!, errLength);\n        // at this point we either re-synced or reached the end of the input text\n        msg = this.config.errorMessageProvider.buildUnexpectedCharactersMessage(\n          orgText,\n          errorStartOffset,\n          errLength,\n          errorLine,\n          errorColumn,\n        );\n        errors.push({\n          offset: errorStartOffset,\n          line: errorLine,\n          column: errorColumn,\n          length: errLength,\n          message: msg,\n        });\n\n        if (recoveryEnabled === false) {\n          break;\n        }\n      }\n    }\n\n    // if we do have custom patterns which push directly into the\n    // TODO: custom tokens should not push directly??\n    if (!this.hasCustom) {\n      // if we guessed a too large size for the tokens array this will shrink it to the right size.\n      matchedTokens.length = matchedTokensIndex;\n    }\n\n    return {\n      tokens: matchedTokens,\n      groups: groups,\n      errors: errors,\n    };\n  }\n\n  private handleModes(\n    config: IPatternConfig,\n    pop_mode: (tok: IToken) => void,\n    push_mode: (this: Lexer, pushMode: string) => void,\n    newToken: IToken,\n  ) {\n    if (config.pop === true) {\n      // need to save the PUSH_MODE property as if the mode is popped\n      // patternIdxToPopMode is updated to reflect the new mode after popping the stack\n      const pushMode = config.push;\n      pop_mode(newToken);\n      if (pushMode !== undefined) {\n        push_mode.call(this, pushMode);\n      }\n    } else if (config.push !== undefined) {\n      push_mode.call(this, config.push);\n    }\n  }\n\n  private chopInput(text: string, length: number): string {\n    return text.substring(length);\n  }\n\n  private updateLastIndex(regExp: RegExp, newLastIndex: number): void {\n    regExp.lastIndex = newLastIndex;\n  }\n\n  // TODO: decrease this under 600 characters? inspect stripping comments option in TSC compiler\n  private updateTokenEndLineColumnLocation(\n    newToken: IToken,\n    group: string | false,\n    lastLTIdx: number,\n    numOfLTsInMatch: number,\n    line: number,\n    column: number,\n    imageLength: number,\n  ): void {\n    let lastCharIsLT, fixForEndingInLT;\n    if (group !== undefined) {\n      // a none skipped multi line Token, need to update endLine/endColumn\n      lastCharIsLT = lastLTIdx === imageLength - 1;\n      fixForEndingInLT = lastCharIsLT ? -1 : 0;\n      if (!(numOfLTsInMatch === 1 && lastCharIsLT === true)) {\n        // if a token ends in a LT that last LT only affects the line numbering of following Tokens\n        newToken.endLine = line + fixForEndingInLT;\n        // the last LT in a token does not affect the endColumn either as the [columnStart ... columnEnd)\n        // inclusive to exclusive range.\n        newToken.endColumn = column - 1 + -fixForEndingInLT;\n      }\n      // else single LT in the last character of a token, no need to modify the endLine/EndColumn\n    }\n  }\n\n  private computeNewColumn(oldColumn: number, imageLength: number) {\n    return oldColumn + imageLength;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private createTokenInstance!: (...args: any[]) => IToken;\n\n  private createOffsetOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n  ) {\n    return {\n      image,\n      startOffset,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createStartOnlyToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n  ) {\n    return {\n      image,\n      startOffset,\n      startLine,\n      startColumn,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  private createFullToken(\n    image: string,\n    startOffset: number,\n    tokenTypeIdx: number,\n    tokenType: TokenType,\n    startLine: number,\n    startColumn: number,\n    imageLength: number,\n  ): IToken {\n    return {\n      image,\n      startOffset,\n      endOffset: startOffset + imageLength - 1,\n      startLine,\n      endLine: startLine,\n      startColumn,\n      endColumn: startColumn + imageLength - 1,\n      tokenTypeIdx,\n      tokenType,\n    };\n  }\n\n  // Place holder, will be replaced by the correct variant according to the locationTracking option at runtime.\n  /* istanbul ignore next - place holder */\n  private addToken!: (\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ) => number;\n\n  private addTokenUsingPush(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector.push(tokenToAdd);\n    return index;\n  }\n\n  private addTokenUsingMemberAccess(\n    tokenVector: IToken[],\n    index: number,\n    tokenToAdd: IToken,\n  ): number {\n    tokenVector[index] = tokenToAdd;\n    index++;\n    return index;\n  }\n\n  // Place holder, will be replaced by the correct variant according to the hasCustom flag option at runtime.\n  private handlePayload: (token: IToken, payload: any) => void;\n\n  private handlePayloadNoCustom(token: IToken, payload: any): void {}\n\n  private handlePayloadWithCustom(token: IToken, payload: any): void {\n    if (payload !== null) {\n      token.payload = payload;\n    }\n  }\n\n  // place holder to be replaced with chosen alternative at runtime\n  private match!: (\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ) => string | null;\n\n  private matchWithTest(\n    pattern: RegExp,\n    text: string,\n    offset: number,\n  ): string | null {\n    const found = pattern.test(text);\n    if (found === true) {\n      return text.substring(offset, pattern.lastIndex);\n    }\n    return null;\n  }\n\n  private matchWithExec(pattern: RegExp, text: string): string | null {\n    const regExpArray = pattern.exec(text);\n    return regExpArray !== null ? regExpArray[0] : null;\n  }\n\n  // Duplicated from the parser's perf trace trait to allow future extraction\n  // of the lexer to a separate package.\n  TRACE_INIT = <T>(phaseDesc: string, phaseImpl: () => T): T => {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  };\n}\n","import { has, isString, isUndefined } from \"lodash-es\";\nimport { Lexer } from \"./lexer_public.js\";\nimport { augmentTokenTypes, tokenStructuredMatcher } from \"./tokens.js\";\nimport { IToken, ITokenConfig, TokenType } from \"@chevrotain/types\";\n\nexport function tokenLabel(tokType: TokenType): string {\n  if (hasTokenLabel(tokType)) {\n    return tokType.LABEL;\n  } else {\n    return tokType.name;\n  }\n}\n\nexport function tokenName(tokType: TokenType): string {\n  return tokType.name;\n}\n\nexport function hasTokenLabel(\n  obj: TokenType,\n): obj is TokenType & Pick<Required<TokenType>, \"LABEL\"> {\n  return isString(obj.LABEL) && obj.LABEL !== \"\";\n}\n\nconst PARENT = \"parent\";\nconst CATEGORIES = \"categories\";\nconst LABEL = \"label\";\nconst GROUP = \"group\";\nconst PUSH_MODE = \"push_mode\";\nconst POP_MODE = \"pop_mode\";\nconst LONGER_ALT = \"longer_alt\";\nconst LINE_BREAKS = \"line_breaks\";\nconst START_CHARS_HINT = \"start_chars_hint\";\n\nexport function createToken(config: ITokenConfig): TokenType {\n  return createTokenInternal(config);\n}\n\nfunction createTokenInternal(config: ITokenConfig): TokenType {\n  const pattern = config.pattern;\n\n  const tokenType: TokenType = <any>{};\n  tokenType.name = config.name;\n\n  if (!isUndefined(pattern)) {\n    tokenType.PATTERN = pattern;\n  }\n\n  if (has(config, PARENT)) {\n    throw (\n      \"The parent property is no longer supported.\\n\" +\n      \"See: https://github.com/chevrotain/chevrotain/issues/564#issuecomment-349062346 for details.\"\n    );\n  }\n\n  if (has(config, CATEGORIES)) {\n    // casting to ANY as this will be fixed inside `augmentTokenTypes``\n    tokenType.CATEGORIES = <any>config[CATEGORIES];\n  }\n\n  augmentTokenTypes([tokenType]);\n\n  if (has(config, LABEL)) {\n    tokenType.LABEL = config[LABEL];\n  }\n\n  if (has(config, GROUP)) {\n    tokenType.GROUP = config[GROUP];\n  }\n\n  if (has(config, POP_MODE)) {\n    tokenType.POP_MODE = config[POP_MODE];\n  }\n\n  if (has(config, PUSH_MODE)) {\n    tokenType.PUSH_MODE = config[PUSH_MODE];\n  }\n\n  if (has(config, LONGER_ALT)) {\n    tokenType.LONGER_ALT = config[LONGER_ALT];\n  }\n\n  if (has(config, LINE_BREAKS)) {\n    tokenType.LINE_BREAKS = config[LINE_BREAKS];\n  }\n\n  if (has(config, START_CHARS_HINT)) {\n    tokenType.START_CHARS_HINT = config[START_CHARS_HINT];\n  }\n\n  return tokenType;\n}\n\nexport const EOF = createToken({ name: \"EOF\", pattern: Lexer.NA });\naugmentTokenTypes([EOF]);\n\nexport function createTokenInstance(\n  tokType: TokenType,\n  image: string,\n  startOffset: number,\n  endOffset: number,\n  startLine: number,\n  endLine: number,\n  startColumn: number,\n  endColumn: number,\n): IToken {\n  return {\n    image,\n    startOffset,\n    endOffset,\n    startLine,\n    endLine,\n    startColumn,\n    endColumn,\n    tokenTypeIdx: (<any>tokType).tokenTypeIdx,\n    tokenType: tokType,\n  };\n}\n\nexport function tokenMatcher(token: IToken, tokType: TokenType): boolean {\n  return tokenStructuredMatcher(token, tokType);\n}\n","import { hasTokenLabel, tokenLabel } from \"../scan/tokens_public.js\";\nimport { first, map, reduce } from \"lodash-es\";\nimport {\n  Alternation,\n  getProductionDslName,\n  NonTerminal,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IParserErrorMessageProvider,\n  IProductionWithOccurrence,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n} from \"./grammar/types.js\";\n\nexport const defaultParserErrorProvider: IParserErrorMessageProvider = {\n  buildMismatchTokenMessage({ expected, actual, previous, ruleName }): string {\n    const hasLabel = hasTokenLabel(expected);\n    const expectedMsg = hasLabel\n      ? `--> ${tokenLabel(expected)} <--`\n      : `token of type --> ${expected.name} <--`;\n\n    const msg = `Expecting ${expectedMsg} but found --> '${actual.image}' <--`;\n\n    return msg;\n  },\n\n  buildNotAllInputParsedMessage({ firstRedundant, ruleName }): string {\n    return \"Redundant input, expecting EOF but found: \" + firstRedundant.image;\n  },\n\n  buildNoViableAltMessage({\n    expectedPathsPerAlt,\n    actual,\n    previous,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const allLookAheadPaths = reduce(\n        expectedPathsPerAlt,\n        (result, currAltPaths) => result.concat(currAltPaths),\n        [] as TokenType[][],\n      );\n      const nextValidTokenSequences = map(\n        allLookAheadPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \", \",\n          )}]`,\n      );\n      const nextValidSequenceItems = map(\n        nextValidTokenSequences,\n        (itemMsg, idx) => `  ${idx + 1}. ${itemMsg}`,\n      );\n      const calculatedDescription = `one of these possible Token sequences:\\n${nextValidSequenceItems.join(\n        \"\\n\",\n      )}`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n\n  buildEarlyExitMessage({\n    expectedIterationPaths,\n    actual,\n    customUserDescription,\n    ruleName,\n  }): string {\n    const errPrefix = \"Expecting: \";\n    // TODO: issue: No Viable Alternative Error may have incomplete details. #502\n    const actualText = first(actual)!.image;\n    const errSuffix = \"\\nbut found: '\" + actualText + \"'\";\n\n    if (customUserDescription) {\n      return errPrefix + customUserDescription + errSuffix;\n    } else {\n      const nextValidTokenSequences = map(\n        expectedIterationPaths,\n        (currPath) =>\n          `[${map(currPath, (currTokenType) => tokenLabel(currTokenType)).join(\n            \",\",\n          )}]`,\n      );\n      const calculatedDescription =\n        `expecting at least one iteration which starts with one of these possible Token sequences::\\n  ` +\n        `<${nextValidTokenSequences.join(\" ,\")}>`;\n\n      return errPrefix + calculatedDescription + errSuffix;\n    }\n  },\n};\n\nObject.freeze(defaultParserErrorProvider);\n\nexport const defaultGrammarResolverErrorProvider: IGrammarResolverErrorMessageProvider =\n  {\n    buildRuleNotFoundError(\n      topLevelRule: Rule,\n      undefinedRule: NonTerminal,\n    ): string {\n      const msg =\n        \"Invalid grammar, reference to a rule which is not defined: ->\" +\n        undefinedRule.nonTerminalName +\n        \"<-\\n\" +\n        \"inside top level rule: ->\" +\n        topLevelRule.name +\n        \"<-\";\n      return msg;\n    },\n  };\n\nexport const defaultGrammarValidatorErrorProvider: IGrammarValidatorErrorMessageProvider =\n  {\n    buildDuplicateFoundError(\n      topLevelRule: Rule,\n      duplicateProds: IProductionWithOccurrence[],\n    ): string {\n      function getExtraProductionArgument(\n        prod: IProductionWithOccurrence,\n      ): string {\n        if (prod instanceof Terminal) {\n          return prod.terminalType.name;\n        } else if (prod instanceof NonTerminal) {\n          return prod.nonTerminalName;\n        } else {\n          return \"\";\n        }\n      }\n\n      const topLevelName = topLevelRule.name;\n      const duplicateProd = first(duplicateProds)!;\n      const index = duplicateProd.idx;\n      const dslName = getProductionDslName(duplicateProd);\n      const extraArgument = getExtraProductionArgument(duplicateProd);\n\n      const hasExplicitIndex = index > 0;\n      let msg = `->${dslName}${hasExplicitIndex ? index : \"\"}<- ${\n        extraArgument ? `with argument: ->${extraArgument}<-` : \"\"\n      }\n                  appears more than once (${\n                    duplicateProds.length\n                  } times) in the top level rule: ->${topLevelName}<-.                  \n                  For further details see: https://chevrotain.io/docs/FAQ.html#NUMERICAL_SUFFIXES \n                  `;\n\n      // white space trimming time! better to trim afterwards as it allows to use WELL formatted multi line template strings...\n      msg = msg.replace(/[ \\t]+/g, \" \");\n      msg = msg.replace(/\\s\\s+/g, \"\\n\");\n\n      return msg;\n    },\n\n    buildNamespaceConflictError(rule: Rule): string {\n      const errMsg =\n        `Namespace conflict found in grammar.\\n` +\n        `The grammar has both a Terminal(Token) and a Non-Terminal(Rule) named: <${rule.name}>.\\n` +\n        `To resolve this make sure each Terminal and Non-Terminal names are unique\\n` +\n        `This is easy to accomplish by using the convention that Terminal names start with an uppercase letter\\n` +\n        `and Non-Terminal names start with a lower case letter.`;\n\n      return errMsg;\n    },\n\n    buildAlternationPrefixAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currTok) =>\n        tokenLabel(currTok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      const errMsg =\n        `Ambiguous alternatives: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> due to common lookahead prefix\\n` +\n        `in <OR${occurrence}> inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n` +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#COMMON_PREFIX\\n` +\n        `For Further details.`;\n\n      return errMsg;\n    },\n\n    buildAlternationAmbiguityError(options: {\n      topLevelRule: Rule;\n      prefixPath: TokenType[];\n      ambiguityIndices: number[];\n      alternation: Alternation;\n    }): string {\n      const pathMsg = map(options.prefixPath, (currtok) =>\n        tokenLabel(currtok),\n      ).join(\", \");\n      const occurrence =\n        options.alternation.idx === 0 ? \"\" : options.alternation.idx;\n      let currMessage =\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\n          \" ,\",\n        )}> in <OR${occurrence}>` +\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`;\n\n      currMessage =\n        currMessage +\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\n        `For Further details.`;\n      return currMessage;\n    },\n\n    buildEmptyRepetitionError(options: {\n      topLevelRule: Rule;\n      repetition: IProductionWithOccurrence;\n    }): string {\n      let dslName = getProductionDslName(options.repetition);\n      if (options.repetition.idx !== 0) {\n        dslName += options.repetition.idx;\n      }\n\n      const errMsg =\n        `The repetition <${dslName}> within Rule <${options.topLevelRule.name}> can never consume any tokens.\\n` +\n        `This could lead to an infinite loop.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildTokenNameError(options: {\n      tokenType: TokenType;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildEmptyAlternationError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n      emptyChoiceIdx: number;\n    }): string {\n      const errMsg =\n        `Ambiguous empty alternative: <${options.emptyChoiceIdx + 1}>` +\n        ` in <OR${options.alternation.idx}> inside <${options.topLevelRule.name}> Rule.\\n` +\n        `Only the last alternative may be an empty alternative.`;\n\n      return errMsg;\n    },\n\n    buildTooManyAlternativesError(options: {\n      topLevelRule: Rule;\n      alternation: Alternation;\n    }): string {\n      const errMsg =\n        `An Alternation cannot have more than 256 alternatives:\\n` +\n        `<OR${options.alternation.idx}> inside <${\n          options.topLevelRule.name\n        }> Rule.\\n has ${\n          options.alternation.definition.length + 1\n        } alternatives.`;\n\n      return errMsg;\n    },\n\n    buildLeftRecursionError(options: {\n      topLevelRule: Rule;\n      leftRecursionPath: Rule[];\n    }): string {\n      const ruleName = options.topLevelRule.name;\n      const pathNames = map(\n        options.leftRecursionPath,\n        (currRule) => currRule.name,\n      );\n      const leftRecursivePath = `${ruleName} --> ${pathNames\n        .concat([ruleName])\n        .join(\" --> \")}`;\n      const errMsg =\n        `Left Recursion found in grammar.\\n` +\n        `rule: <${ruleName}> can be invoked from itself (directly or indirectly)\\n` +\n        `without consuming any Tokens. The grammar path that causes this is: \\n ${leftRecursivePath}\\n` +\n        ` To fix this refactor your grammar to remove the left recursion.\\n` +\n        `see: https://en.wikipedia.org/wiki/LL_parser#Left_factoring.`;\n\n      return errMsg;\n    },\n\n    // TODO: remove - `errors_public` from nyc.config.js exclude\n    //       once this method is fully removed from this file\n    buildInvalidRuleNameError(options: {\n      topLevelRule: Rule;\n      expectedPattern: RegExp;\n    }): string {\n      /* istanbul ignore next */\n      return \"deprecated\";\n    },\n\n    buildDuplicateRuleNameError(options: {\n      topLevelRule: Rule | string;\n      grammarName: string;\n    }): string {\n      let ruleName;\n      if (options.topLevelRule instanceof Rule) {\n        ruleName = options.topLevelRule.name;\n      } else {\n        ruleName = options.topLevelRule;\n      }\n\n      const errMsg = `Duplicate definition, rule: ->${ruleName}<- is already defined in the grammar: ->${options.grammarName}<-`;\n\n      return errMsg;\n    },\n  };\n","import {\n  IParserUnresolvedRefDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport { forEach, values } from \"lodash-es\";\nimport { GAstVisitor, NonTerminal, Rule } from \"@chevrotain/gast\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\n\nexport function resolveGrammar(\n  topLevels: Record<string, Rule>,\n  errMsgProvider: IGrammarResolverErrorMessageProvider,\n): IParserDefinitionError[] {\n  const refResolver = new GastRefResolverVisitor(topLevels, errMsgProvider);\n  refResolver.resolveRefs();\n  return refResolver.errors;\n}\n\nexport class GastRefResolverVisitor extends GAstVisitor {\n  public errors: IParserUnresolvedRefDefinitionError[] = [];\n  private currTopLevel: Rule;\n\n  constructor(\n    private nameToTopRule: Record<string, Rule>,\n    private errMsgProvider: IGrammarResolverErrorMessageProvider,\n  ) {\n    super();\n  }\n\n  public resolveRefs(): void {\n    forEach(values(this.nameToTopRule), (prod) => {\n      this.currTopLevel = prod;\n      prod.accept(this);\n    });\n  }\n\n  public visitNonTerminal(node: NonTerminal): void {\n    const ref = this.nameToTopRule[node.nonTerminalName];\n\n    if (!ref) {\n      const msg = this.errMsgProvider.buildRuleNotFoundError(\n        this.currTopLevel,\n        node,\n      );\n      this.errors.push({\n        message: msg,\n        type: ParserDefinitionErrorType.UNRESOLVED_SUBRULE_REF,\n        ruleName: this.currTopLevel.name,\n        unresolvedRefName: node.nonTerminalName,\n      });\n    } else {\n      node.referencedRule = ref;\n    }\n  }\n}\n","import baseFlatten from './_baseFlatten.js';\nimport map from './map.js';\n\n/**\n * Creates a flattened array of values by running each element in `collection`\n * thru `iteratee` and flattening the mapped results. The iteratee is invoked\n * with three arguments: (value, index|key, collection).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * function duplicate(n) {\n *   return [n, n];\n * }\n *\n * _.flatMap([1, 2], duplicate);\n * // => [1, 1, 2, 2]\n */\nfunction flatMap(collection, iteratee) {\n  return baseFlatten(map(collection, iteratee), 1);\n}\n\nexport default flatMap;\n","/**\n * A specialized version of `baseAggregator` for arrays.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction arrayAggregator(array, setter, iteratee, accumulator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    var value = array[index];\n    setter(accumulator, value, iteratee(value), array);\n  }\n  return accumulator;\n}\n\nexport default arrayAggregator;\n","import baseEach from './_baseEach.js';\n\n/**\n * Aggregates elements of `collection` on `accumulator` with keys transformed\n * by `iteratee` and values set by `setter`.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} setter The function to set `accumulator` values.\n * @param {Function} iteratee The iteratee to transform keys.\n * @param {Object} accumulator The initial aggregated object.\n * @returns {Function} Returns `accumulator`.\n */\nfunction baseAggregator(collection, setter, iteratee, accumulator) {\n  baseEach(collection, function(value, key, collection) {\n    setter(accumulator, value, iteratee(value), collection);\n  });\n  return accumulator;\n}\n\nexport default baseAggregator;\n","import arrayAggregator from './_arrayAggregator.js';\nimport baseAggregator from './_baseAggregator.js';\nimport baseIteratee from './_baseIteratee.js';\nimport isArray from './isArray.js';\n\n/**\n * Creates a function like `_.groupBy`.\n *\n * @private\n * @param {Function} setter The function to set accumulator values.\n * @param {Function} [initializer] The accumulator object initializer.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee) {\n    var func = isArray(collection) ? arrayAggregator : baseAggregator,\n        accumulator = initializer ? initializer() : {};\n\n    return func(collection, setter, baseIteratee(iteratee, 2), accumulator);\n  };\n}\n\nexport default createAggregator;\n","import baseAssignValue from './_baseAssignValue.js';\nimport createAggregator from './_createAggregator.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an object composed of keys generated from the results of running\n * each element of `collection` thru `iteratee`. The order of grouped values\n * is determined by the order they occur in `collection`. The corresponding\n * value of each key is an array of elements responsible for generating the\n * key. The iteratee is invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The iteratee to transform keys.\n * @returns {Object} Returns the composed aggregate object.\n * @example\n *\n * _.groupBy([6.1, 4.2, 6.3], Math.floor);\n * // => { '4': [4.2], '6': [6.1, 6.3] }\n *\n * // The `_.property` iteratee shorthand.\n * _.groupBy(['one', 'two', 'three'], 'length');\n * // => { '3': ['one', 'two'], '5': ['three'] }\n */\nvar groupBy = createAggregator(function(result, value, key) {\n  if (hasOwnProperty.call(result, key)) {\n    result[key].push(value);\n  } else {\n    baseAssignValue(result, key, [value]);\n  }\n});\n\nexport default groupBy;\n","import baseSlice from './_baseSlice.js';\nimport toInteger from './toInteger.js';\n\n/**\n * Creates a slice of `array` with `n` elements dropped from the end.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Array\n * @param {Array} array The array to query.\n * @param {number} [n=1] The number of elements to drop.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the slice of `array`.\n * @example\n *\n * _.dropRight([1, 2, 3]);\n * // => [1, 2]\n *\n * _.dropRight([1, 2, 3], 2);\n * // => [1]\n *\n * _.dropRight([1, 2, 3], 5);\n * // => []\n *\n * _.dropRight([1, 2, 3], 0);\n * // => [1, 2, 3]\n */\nfunction dropRight(array, n, guard) {\n  var length = array == null ? 0 : array.length;\n  if (!length) {\n    return [];\n  }\n  n = (guard || n === undefined) ? 1 : toInteger(n);\n  n = length - n;\n  return baseSlice(array, 0, n < 0 ? 0 : n);\n}\n\nexport default dropRight;\n","import {\n  clone,\n  drop,\n  dropRight,\n  first as _first,\n  forEach,\n  isEmpty,\n  last,\n} from \"lodash-es\";\nimport { first } from \"./first.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { TokenMatcher } from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  IGrammarPath,\n  IProduction,\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport abstract class AbstractNextPossibleTokensWalker extends RestWalker {\n  protected possibleTokTypes: TokenType[] = [];\n  protected ruleStack: string[];\n  protected occurrenceStack: number[];\n\n  protected nextProductionName = \"\";\n  protected nextProductionOccurrence = 0;\n  protected found = false;\n  protected isAtEndOfPath = false;\n\n  constructor(\n    protected topProd: Rule,\n    protected path: IGrammarPath,\n  ) {\n    super();\n  }\n\n  startWalking(): TokenType[] {\n    this.found = false;\n\n    if (this.path.ruleStack[0] !== this.topProd.name) {\n      throw Error(\"The path does not start with the walker's top Rule!\");\n    }\n\n    // immutable for the win\n    this.ruleStack = clone(this.path.ruleStack).reverse(); // intelij bug requires assertion\n    this.occurrenceStack = clone(this.path.occurrenceStack).reverse(); // intelij bug requires assertion\n\n    // already verified that the first production is valid, we now seek the 2nd production\n    this.ruleStack.pop();\n    this.occurrenceStack.pop();\n\n    this.updateExpectedNext();\n    this.walk(this.topProd);\n\n    return this.possibleTokTypes;\n  }\n\n  walk(\n    prod: { definition: IProduction[] },\n    prevRest: IProduction[] = [],\n  ): void {\n    // stop scanning once we found the path\n    if (!this.found) {\n      super.walk(prod, prevRest);\n    }\n  }\n\n  walkProdRef(\n    refProd: NonTerminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    // found the next production, need to keep walking in it\n    if (\n      refProd.referencedRule.name === this.nextProductionName &&\n      refProd.idx === this.nextProductionOccurrence\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      this.updateExpectedNext();\n      this.walk(refProd.referencedRule, <any>fullRest);\n    }\n  }\n\n  updateExpectedNext(): void {\n    // need to consume the Terminal\n    if (isEmpty(this.ruleStack)) {\n      // must reset nextProductionXXX to avoid walking down another Top Level production while what we are\n      // really seeking is the last Terminal...\n      this.nextProductionName = \"\";\n      this.nextProductionOccurrence = 0;\n      this.isAtEndOfPath = true;\n    } else {\n      this.nextProductionName = this.ruleStack.pop()!;\n      this.nextProductionOccurrence = this.occurrenceStack.pop()!;\n    }\n  }\n}\n\nexport class NextAfterTokenWalker extends AbstractNextPossibleTokensWalker {\n  private nextTerminalName = \"\";\n  private nextTerminalOccurrence = 0;\n\n  constructor(\n    topProd: Rule,\n    protected path: ITokenGrammarPath,\n  ) {\n    super(topProd, path);\n    this.nextTerminalName = this.path.lastTok.name;\n    this.nextTerminalOccurrence = this.path.lastTokOccurrence;\n  }\n\n  walkTerminal(\n    terminal: Terminal,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      this.isAtEndOfPath &&\n      terminal.terminalType.name === this.nextTerminalName &&\n      terminal.idx === this.nextTerminalOccurrence &&\n      !this.found\n    ) {\n      const fullRest = currRest.concat(prevRest);\n      const restProd = new Alternative({ definition: fullRest });\n      this.possibleTokTypes = first(restProd);\n      this.found = true;\n    }\n  }\n}\n\nexport type AlternativesFirstTokens = TokenType[][];\n\nexport interface IFirstAfterRepetition {\n  token: TokenType | undefined;\n  occurrence: number | undefined;\n  isEndOfRule: boolean | undefined;\n}\n\n/**\n * This walker only \"walks\" a single \"TOP\" level in the Grammar Ast, this means\n * it never \"follows\" production refs\n */\nexport class AbstractNextTerminalAfterProductionWalker extends RestWalker {\n  protected result: IFirstAfterRepetition = {\n    token: undefined,\n    occurrence: undefined,\n    isEndOfRule: undefined,\n  };\n\n  constructor(\n    protected topRule: Rule,\n    protected occurrence: number,\n  ) {\n    super();\n  }\n\n  startWalking(): IFirstAfterRepetition {\n    this.walk(this.topRule);\n    return this.result;\n  }\n}\n\nexport class NextTerminalAfterManyWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manyProd.idx === this.occurrence) {\n      const firstAfterMany = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterMany === undefined;\n      if (firstAfterMany instanceof Terminal) {\n        this.result.token = firstAfterMany.terminalType;\n        this.result.occurrence = firstAfterMany.idx;\n      }\n    } else {\n      super.walkMany(manyProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterManySepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (manySepProd.idx === this.occurrence) {\n      const firstAfterManySep = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterManySep === undefined;\n      if (firstAfterManySep instanceof Terminal) {\n        this.result.token = firstAfterManySep.terminalType;\n        this.result.occurrence = firstAfterManySep.idx;\n      }\n    } else {\n      super.walkManySep(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport class NextTerminalAfterAtLeastOneWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atLeastOneProd.idx === this.occurrence) {\n      const firstAfterAtLeastOne = _first(currRest.concat(prevRest));\n      this.result.isEndOfRule = firstAfterAtLeastOne === undefined;\n      if (firstAfterAtLeastOne instanceof Terminal) {\n        this.result.token = firstAfterAtLeastOne.terminalType;\n        this.result.occurrence = firstAfterAtLeastOne.idx;\n      }\n    } else {\n      super.walkAtLeastOne(atLeastOneProd, currRest, prevRest);\n    }\n  }\n}\n\n// TODO: reduce code duplication in the AfterWalkers\nexport class NextTerminalAfterAtLeastOneSepWalker extends AbstractNextTerminalAfterProductionWalker {\n  walkAtLeastOneSep(\n    atleastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (atleastOneSepProd.idx === this.occurrence) {\n      const firstAfterfirstAfterAtLeastOneSep = _first(\n        currRest.concat(prevRest),\n      );\n      this.result.isEndOfRule = firstAfterfirstAfterAtLeastOneSep === undefined;\n      if (firstAfterfirstAfterAtLeastOneSep instanceof Terminal) {\n        this.result.token = firstAfterfirstAfterAtLeastOneSep.terminalType;\n        this.result.occurrence = firstAfterfirstAfterAtLeastOneSep.idx;\n      }\n    } else {\n      super.walkAtLeastOneSep(atleastOneSepProd, currRest, prevRest);\n    }\n  }\n}\n\nexport interface PartialPathAndSuffixes {\n  partialPath: TokenType[];\n  suffixDef: IProduction[];\n}\n\nexport function possiblePathsFrom(\n  targetDef: IProduction[],\n  maxLength: number,\n  currPath: TokenType[] = [],\n): PartialPathAndSuffixes[] {\n  // avoid side effects\n  currPath = clone(currPath);\n  let result: PartialPathAndSuffixes[] = [];\n  let i = 0;\n\n  // TODO: avoid inner funcs\n  function remainingPathWith(nextDef: IProduction[]) {\n    return nextDef.concat(drop(targetDef, i + 1));\n  }\n\n  // TODO: avoid inner funcs\n  function getAlternativesForProd(definition: IProduction[]) {\n    const alternatives = possiblePathsFrom(\n      remainingPathWith(definition),\n      maxLength,\n      currPath,\n    );\n    return result.concat(alternatives);\n  }\n\n  /**\n   * Mandatory productions will halt the loop as the paths computed from their recursive calls will already contain the\n   * following (rest) of the targetDef.\n   *\n   * For optional productions (Option/Repetition/...) the loop will continue to represent the paths that do not include the\n   * the optional production.\n   */\n  while (currPath.length < maxLength && i < targetDef.length) {\n    const prod = targetDef[i];\n\n    /* istanbul ignore else */\n    if (prod instanceof Alternative) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof NonTerminal) {\n      return getAlternativesForProd(prod.definition);\n    } else if (prod instanceof Option) {\n      result = getAlternativesForProd(prod.definition);\n    } else if (prod instanceof RepetitionMandatory) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      const newDef = [\n        new Alternative({ definition: prod.definition }),\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ];\n      return getAlternativesForProd(newDef);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: [new Terminal({ terminalType: prod.separator })].concat(\n            <any>prod.definition,\n          ),\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Repetition) {\n      const newDef = prod.definition.concat([\n        new Repetition({\n          definition: prod.definition,\n        }),\n      ]);\n      result = getAlternativesForProd(newDef);\n    } else if (prod instanceof Alternation) {\n      forEach(prod.definition, (currAlt) => {\n        // TODO: this is a limited check for empty alternatives\n        //   It would prevent a common case of infinite loops during parser initialization.\n        //   However **in-directly** empty alternatives may still cause issues.\n        if (isEmpty(currAlt.definition) === false) {\n          result = getAlternativesForProd(currAlt.definition);\n        }\n      });\n      return result;\n    } else if (prod instanceof Terminal) {\n      currPath.push(prod.terminalType);\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n\n    i++;\n  }\n  result.push({\n    partialPath: currPath,\n    suffixDef: drop(targetDef, i),\n  });\n\n  return result;\n}\n\ninterface IPathToExamine {\n  idx: number;\n  def: IProduction[];\n  ruleStack: string[];\n  occurrenceStack: number[];\n}\n\nexport function nextPossibleTokensAfter(\n  initialDef: IProduction[],\n  tokenVector: IToken[],\n  tokMatcher: TokenMatcher,\n  maxLookAhead: number,\n): ISyntacticContentAssistPath[] {\n  const EXIT_NON_TERMINAL: any = \"EXIT_NONE_TERMINAL\";\n  // to avoid creating a new Array each time.\n  const EXIT_NON_TERMINAL_ARR = [EXIT_NON_TERMINAL];\n  const EXIT_ALTERNATIVE: any = \"EXIT_ALTERNATIVE\";\n  let foundCompletePath = false;\n\n  const tokenVectorLength = tokenVector.length;\n  const minimalAlternativesIndex = tokenVectorLength - maxLookAhead - 1;\n\n  const result: ISyntacticContentAssistPath[] = [];\n\n  const possiblePaths: IPathToExamine[] = [];\n  possiblePaths.push({\n    idx: -1,\n    def: initialDef,\n    ruleStack: [],\n    occurrenceStack: [],\n  });\n\n  while (!isEmpty(possiblePaths)) {\n    const currPath = possiblePaths.pop()!;\n\n    // skip alternatives if no more results can be found (assuming deterministic grammar with fixed lookahead)\n    if (currPath === EXIT_ALTERNATIVE) {\n      if (\n        foundCompletePath &&\n        last(possiblePaths)!.idx <= minimalAlternativesIndex\n      ) {\n        // remove irrelevant alternative\n        possiblePaths.pop();\n      }\n      continue;\n    }\n\n    const currDef = currPath.def;\n    const currIdx = currPath.idx;\n    const currRuleStack = currPath.ruleStack;\n    const currOccurrenceStack = currPath.occurrenceStack;\n\n    // For Example: an empty path could exist in a valid grammar in the case of an EMPTY_ALT\n    if (isEmpty(currDef)) {\n      continue;\n    }\n\n    const prod = currDef[0];\n    /* istanbul ignore else */\n    if (prod === EXIT_NON_TERMINAL) {\n      const nextPath = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: dropRight(currRuleStack),\n        occurrenceStack: dropRight(currOccurrenceStack),\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Terminal) {\n      /* istanbul ignore else */\n      if (currIdx < tokenVectorLength - 1) {\n        const nextIdx = currIdx + 1;\n        const actualToken = tokenVector[nextIdx];\n        if (tokMatcher!(actualToken, prod.terminalType)) {\n          const nextPath = {\n            idx: nextIdx,\n            def: drop(currDef),\n            ruleStack: currRuleStack,\n            occurrenceStack: currOccurrenceStack,\n          };\n          possiblePaths.push(nextPath);\n        }\n        // end of the line\n      } else if (currIdx === tokenVectorLength - 1) {\n        // IGNORE ABOVE ELSE\n        result.push({\n          nextTokenType: prod.terminalType,\n          nextTokenOccurrence: prod.idx,\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        });\n        foundCompletePath = true;\n      } else {\n        throw Error(\"non exhaustive match\");\n      }\n    } else if (prod instanceof NonTerminal) {\n      const newRuleStack = clone(currRuleStack);\n      newRuleStack.push(prod.nonTerminalName);\n\n      const newOccurrenceStack = clone(currOccurrenceStack);\n      newOccurrenceStack.push(prod.idx);\n\n      const nextPath = {\n        idx: currIdx,\n        def: prod.definition.concat(EXIT_NON_TERMINAL_ARR, drop(currDef)),\n        ruleStack: newRuleStack,\n        occurrenceStack: newOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof Option) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const nextPathWith = {\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof RepetitionMandatory) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const secondIteration = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\n      // TODO:(THE NEW operators here take a while...) (convert once?)\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const secondIteration = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([secondIteration], drop(currDef));\n      const nextPath = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPath);\n    } else if (prod instanceof RepetitionWithSeparator) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      const separatorGast = new Terminal({\n        terminalType: prod.separator,\n      });\n      const nthRepetition = new Repetition({\n        definition: [<any>separatorGast].concat(prod.definition),\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Repetition) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      const nextPathWithout = {\n        idx: currIdx,\n        def: drop(currDef),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWithout);\n      // required marker to avoid backtracking paths whose higher priority alternatives already matched\n      possiblePaths.push(EXIT_ALTERNATIVE);\n\n      // TODO: an empty repetition will cause infinite loops here, will the parser detect this in selfAnalysis?\n      const nthRepetition = new Repetition({\n        definition: prod.definition,\n        idx: prod.idx,\n      });\n      const nextDef = prod.definition.concat([nthRepetition], drop(currDef));\n      const nextPathWith = {\n        idx: currIdx,\n        def: nextDef,\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      };\n      possiblePaths.push(nextPathWith);\n    } else if (prod instanceof Alternation) {\n      // the order of alternatives is meaningful, FILO (Last path will be traversed first).\n      for (let i = prod.definition.length - 1; i >= 0; i--) {\n        const currAlt: any = prod.definition[i];\n        const currAltPath = {\n          idx: currIdx,\n          def: currAlt.definition.concat(drop(currDef)),\n          ruleStack: currRuleStack,\n          occurrenceStack: currOccurrenceStack,\n        };\n        possiblePaths.push(currAltPath);\n        possiblePaths.push(EXIT_ALTERNATIVE);\n      }\n    } else if (prod instanceof Alternative) {\n      possiblePaths.push({\n        idx: currIdx,\n        def: prod.definition.concat(drop(currDef)),\n        ruleStack: currRuleStack,\n        occurrenceStack: currOccurrenceStack,\n      });\n    } else if (prod instanceof Rule) {\n      // last because we should only encounter at most a single one of these per invocation.\n      possiblePaths.push(\n        expandTopLevelRule(prod, currIdx, currRuleStack, currOccurrenceStack),\n      );\n    } else {\n      throw Error(\"non exhaustive match\");\n    }\n  }\n  return result;\n}\n\nfunction expandTopLevelRule(\n  topRule: Rule,\n  currIdx: number,\n  currRuleStack: string[],\n  currOccurrenceStack: number[],\n): IPathToExamine {\n  const newRuleStack = clone(currRuleStack);\n  newRuleStack.push(topRule.name);\n\n  const newCurrOccurrenceStack = clone(currOccurrenceStack);\n  // top rule is always assumed to have been called with occurrence index 1\n  newCurrOccurrenceStack.push(1);\n\n  return {\n    idx: currIdx,\n    def: topRule.definition,\n    ruleStack: newRuleStack,\n    occurrenceStack: newCurrOccurrenceStack,\n  };\n}\n","import { every, flatten, forEach, has, isEmpty, map, reduce } from \"lodash-es\";\nimport { possiblePathsFrom } from \"./interpreter.js\";\nimport { RestWalker } from \"./rest.js\";\nimport { Predicate, TokenMatcher } from \"../parser/parser.js\";\nimport {\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../scan/tokens.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n} from \"@chevrotain/gast\";\nimport {\n  BaseParser,\n  IOrAlt,\n  IProduction,\n  IProductionWithOccurrence,\n  LookaheadProductionType,\n  LookaheadSequence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\n\nexport enum PROD_TYPE {\n  OPTION,\n  REPETITION,\n  REPETITION_MANDATORY,\n  REPETITION_MANDATORY_WITH_SEPARATOR,\n  REPETITION_WITH_SEPARATOR,\n  ALTERNATION,\n}\n\nexport function getProdType(\n  prod: IProduction | LookaheadProductionType,\n): PROD_TYPE {\n  /* istanbul ignore else */\n  if (prod instanceof Option || prod === \"Option\") {\n    return PROD_TYPE.OPTION;\n  } else if (prod instanceof Repetition || prod === \"Repetition\") {\n    return PROD_TYPE.REPETITION;\n  } else if (\n    prod instanceof RepetitionMandatory ||\n    prod === \"RepetitionMandatory\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY;\n  } else if (\n    prod instanceof RepetitionMandatoryWithSeparator ||\n    prod === \"RepetitionMandatoryWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR;\n  } else if (\n    prod instanceof RepetitionWithSeparator ||\n    prod === \"RepetitionWithSeparator\"\n  ) {\n    return PROD_TYPE.REPETITION_WITH_SEPARATOR;\n  } else if (prod instanceof Alternation || prod === \"Alternation\") {\n    return PROD_TYPE.ALTERNATION;\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n}\n\nexport function getLookaheadPaths(options: {\n  occurrence: number;\n  rule: Rule;\n  prodType: LookaheadProductionType;\n  maxLookahead: number;\n}): LookaheadSequence[] {\n  const { occurrence, rule, prodType, maxLookahead } = options;\n  const type = getProdType(prodType);\n  if (type === PROD_TYPE.ALTERNATION) {\n    return getLookaheadPathsForOr(occurrence, rule, maxLookahead);\n  } else {\n    return getLookaheadPathsForOptionalProd(\n      occurrence,\n      rule,\n      type,\n      maxLookahead,\n    );\n  }\n}\n\nexport function buildLookaheadFuncForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  maxLookahead: number,\n  hasPredicates: boolean,\n  dynamicTokensEnabled: boolean,\n  laFuncBuilder: Function,\n): (orAlts?: IOrAlt<any>[]) => number | undefined {\n  const lookAheadPaths = getLookaheadPathsForOr(\n    occurrence,\n    ruleGrammar,\n    maxLookahead,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return laFuncBuilder(\n    lookAheadPaths,\n    hasPredicates,\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\n/**\n *  When dealing with an Optional production (OPTION/MANY/2nd iteration of AT_LEAST_ONE/...) we need to compare\n *  the lookahead \"inside\" the production and the lookahead immediately \"after\" it in the same top level rule (context free).\n *\n *  Example: given a production:\n *  ABC(DE)?DF\n *\n *  The optional '(DE)?' should only be entered if we see 'DE'. a single Token 'D' is not sufficient to distinguish between the two\n *  alternatives.\n *\n *  @returns A Lookahead function which will return true IFF the parser should parse the Optional production.\n */\nexport function buildLookaheadFuncForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  dynamicTokensEnabled: boolean,\n  prodType: PROD_TYPE,\n  lookaheadBuilder: (\n    lookAheadSequence: LookaheadSequence,\n    tokenMatcher: TokenMatcher,\n    dynamicTokensEnabled: boolean,\n  ) => () => boolean,\n): () => boolean {\n  const lookAheadPaths = getLookaheadPathsForOptionalProd(\n    occurrence,\n    ruleGrammar,\n    prodType,\n    k,\n  );\n\n  const tokenMatcher = areTokenCategoriesNotUsed(lookAheadPaths)\n    ? tokenStructuredMatcherNoCategories\n    : tokenStructuredMatcher;\n\n  return lookaheadBuilder(\n    lookAheadPaths[0],\n    tokenMatcher,\n    dynamicTokensEnabled,\n  );\n}\n\nexport type Alternative = TokenType[][];\n\nexport function buildAlternativesLookAheadFunc(\n  alts: LookaheadSequence[],\n  hasPredicates: boolean,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): (orAlts: IOrAlt<any>[]) => number | undefined {\n  const numOfAlts = alts.length;\n  const areAllOneTokenLookahead = every(alts, (currAlt) => {\n    return every(currAlt, (currPath) => {\n      return currPath.length === 1;\n    });\n  });\n\n  // This version takes into account the predicates as well.\n  if (hasPredicates) {\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (\n      this: BaseParser,\n      orAlts: IOrAlt<any>[],\n    ): number | undefined {\n      // unfortunately the predicates must be extracted every single time\n      // as they cannot be cached due to references to parameters(vars) which are no longer valid.\n      // note that in the common case of no predicates, no cpu time will be wasted on this (see else block)\n      const predicates: (Predicate | undefined)[] = map(\n        orAlts,\n        (currAlt) => currAlt.GATE,\n      );\n\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n\n        const currPredicate = predicates[t];\n        if (currPredicate !== undefined && currPredicate.call(this) === false) {\n          // if the predicate does not match there is no point in checking the paths\n          continue;\n        }\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  } else if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    // optimized (common) case of all the lookaheads paths requiring only\n    // a single token lookahead. These Optimizations cannot work if dynamically defined Tokens are used.\n    const singleTokenAlts = map(alts, (currAlt) => {\n      return flatten(currAlt);\n    });\n\n    const choiceToAlt = reduce(\n      singleTokenAlts,\n      (result, currAlt, idx) => {\n        forEach(currAlt, (currTokType) => {\n          if (!has(result, currTokType.tokenTypeIdx!)) {\n            result[currTokType.tokenTypeIdx!] = idx;\n          }\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            if (!has(result, currExtendingType)) {\n              result[currExtendingType] = idx;\n            }\n          });\n        });\n        return result;\n      },\n      {} as Record<number, number>,\n    );\n\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number {\n      const nextToken = this.LA(1);\n      return choiceToAlt[nextToken.tokenTypeIdx];\n    };\n  } else {\n    // optimized lookahead without needing to check the predicates at all.\n    // this causes code duplication which is intentional to improve performance.\n    /**\n     * @returns {number} - The chosen alternative index\n     */\n    return function (this: BaseParser): number | undefined {\n      for (let t = 0; t < numOfAlts; t++) {\n        const currAlt = alts[t];\n        const currNumOfPaths = currAlt.length;\n        nextPath: for (let j = 0; j < currNumOfPaths; j++) {\n          const currPath = currAlt[j];\n          const currPathLength = currPath.length;\n          for (let i = 0; i < currPathLength; i++) {\n            const nextToken = this.LA(i + 1);\n            if (tokenMatcher(nextToken, currPath[i]) === false) {\n              // mismatch in current path\n              // try the next pth\n              continue nextPath;\n            }\n          }\n          // found a full path that matches.\n          // this will also work for an empty ALT as the loop will be skipped\n          return t;\n        }\n        // none of the paths for the current alternative matched\n        // try the next alternative\n      }\n      // none of the alternatives could be matched\n      return undefined;\n    };\n  }\n}\n\nexport function buildSingleAlternativeLookaheadFunction(\n  alt: LookaheadSequence,\n  tokenMatcher: TokenMatcher,\n  dynamicTokensEnabled: boolean,\n): () => boolean {\n  const areAllOneTokenLookahead = every(alt, (currPath) => {\n    return currPath.length === 1;\n  });\n\n  const numOfPaths = alt.length;\n\n  // optimized (common) case of all the lookaheads paths requiring only\n  // a single token lookahead.\n  if (areAllOneTokenLookahead && !dynamicTokensEnabled) {\n    const singleTokensTypes = flatten(alt);\n\n    if (\n      singleTokensTypes.length === 1 &&\n      isEmpty((<any>singleTokensTypes[0]).categoryMatches)\n    ) {\n      const expectedTokenType = singleTokensTypes[0];\n      const expectedTokenUniqueKey = (<any>expectedTokenType).tokenTypeIdx;\n\n      return function (this: BaseParser): boolean {\n        return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey;\n      };\n    } else {\n      const choiceToAlt = reduce(\n        singleTokensTypes,\n        (result, currTokType, idx) => {\n          result[currTokType.tokenTypeIdx!] = true;\n          forEach(currTokType.categoryMatches!, (currExtendingType) => {\n            result[currExtendingType] = true;\n          });\n          return result;\n        },\n        [] as boolean[],\n      );\n\n      return function (this: BaseParser): boolean {\n        const nextToken = this.LA(1);\n        return choiceToAlt[nextToken.tokenTypeIdx] === true;\n      };\n    }\n  } else {\n    return function (this: BaseParser): boolean {\n      nextPath: for (let j = 0; j < numOfPaths; j++) {\n        const currPath = alt[j];\n        const currPathLength = currPath.length;\n        for (let i = 0; i < currPathLength; i++) {\n          const nextToken = this.LA(i + 1);\n          if (tokenMatcher(nextToken, currPath[i]) === false) {\n            // mismatch in current path\n            // try the next pth\n            continue nextPath;\n          }\n        }\n        // found a full path that matches.\n        return true;\n      }\n\n      // none of the paths matched\n      return false;\n    };\n  }\n}\n\nclass RestDefinitionFinderWalker extends RestWalker {\n  private restDef: IProduction[];\n\n  constructor(\n    private topProd: Rule,\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n  ) {\n    super();\n  }\n\n  startWalking(): IProduction[] {\n    this.walk(this.topProd);\n    return this.restDef;\n  }\n\n  private checkIsTarget(\n    node: IProductionWithOccurrence,\n    expectedProdType: PROD_TYPE,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): boolean {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdType\n    ) {\n      this.restDef = currRest.concat(prevRest);\n      return true;\n    }\n    // performance optimization, do not iterate over the entire Grammar ast after we have found the target\n    return false;\n  }\n\n  walkOption(\n    optionProd: Option,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (!this.checkIsTarget(optionProd, PROD_TYPE.OPTION, currRest, prevRest)) {\n      super.walkOption(optionProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOne(\n    atLeastOneProd: RepetitionMandatory,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneProd,\n        PROD_TYPE.REPETITION_MANDATORY,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneProd, currRest, prevRest);\n    }\n  }\n\n  walkAtLeastOneSep(\n    atLeastOneSepProd: RepetitionMandatoryWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        atLeastOneSepProd,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(atLeastOneSepProd, currRest, prevRest);\n    }\n  }\n\n  walkMany(\n    manyProd: Repetition,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(manyProd, PROD_TYPE.REPETITION, currRest, prevRest)\n    ) {\n      super.walkOption(manyProd, currRest, prevRest);\n    }\n  }\n\n  walkManySep(\n    manySepProd: RepetitionWithSeparator,\n    currRest: IProduction[],\n    prevRest: IProduction[],\n  ): void {\n    if (\n      !this.checkIsTarget(\n        manySepProd,\n        PROD_TYPE.REPETITION_WITH_SEPARATOR,\n        currRest,\n        prevRest,\n      )\n    ) {\n      super.walkOption(manySepProd, currRest, prevRest);\n    }\n  }\n}\n\n/**\n * Returns the definition of a target production in a top level level rule.\n */\nclass InsideDefinitionFinderVisitor extends GAstVisitor {\n  public result: IProduction[] = [];\n\n  constructor(\n    private targetOccurrence: number,\n    private targetProdType: PROD_TYPE,\n    private targetRef?: any,\n  ) {\n    super();\n  }\n\n  private checkIsTarget(\n    node: { definition: IProduction[] } & IProductionWithOccurrence,\n    expectedProdName: PROD_TYPE,\n  ): void {\n    if (\n      node.idx === this.targetOccurrence &&\n      this.targetProdType === expectedProdName &&\n      (this.targetRef === undefined || node === this.targetRef)\n    ) {\n      this.result = node.definition;\n    }\n  }\n\n  public visitOption(node: Option): void {\n    this.checkIsTarget(node, PROD_TYPE.OPTION);\n  }\n\n  public visitRepetition(node: Repetition): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION);\n  }\n\n  public visitRepetitionMandatory(node: RepetitionMandatory): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    node: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR);\n  }\n\n  public visitRepetitionWithSeparator(node: RepetitionWithSeparator): void {\n    this.checkIsTarget(node, PROD_TYPE.REPETITION_WITH_SEPARATOR);\n  }\n\n  public visitAlternation(node: Alternation): void {\n    this.checkIsTarget(node, PROD_TYPE.ALTERNATION);\n  }\n}\n\nfunction initializeArrayOfArrays(size: number): any[][] {\n  const result = new Array(size);\n  for (let i = 0; i < size; i++) {\n    result[i] = [];\n  }\n  return result;\n}\n\n/**\n * A sort of hash function between a Path in the grammar and a string.\n * Note that this returns multiple \"hashes\" to support the scenario of token categories.\n * -  A single path with categories may match multiple **actual** paths.\n */\nfunction pathToHashKeys(path: TokenType[]): string[] {\n  let keys = [\"\"];\n  for (let i = 0; i < path.length; i++) {\n    const tokType = path[i];\n    const longerKeys = [];\n    for (let j = 0; j < keys.length; j++) {\n      const currShorterKey = keys[j];\n      longerKeys.push(currShorterKey + \"_\" + tokType.tokenTypeIdx);\n      for (let t = 0; t < tokType.categoryMatches!.length; t++) {\n        const categoriesKeySuffix = \"_\" + tokType.categoryMatches![t];\n        longerKeys.push(currShorterKey + categoriesKeySuffix);\n      }\n    }\n    keys = longerKeys;\n  }\n  return keys;\n}\n\n/**\n * Imperative style due to being called from a hot spot\n */\nfunction isUniquePrefixHash(\n  altKnownPathsKeys: Record<string, boolean>[],\n  searchPathKeys: string[],\n  idx: number,\n): boolean {\n  for (\n    let currAltIdx = 0;\n    currAltIdx < altKnownPathsKeys.length;\n    currAltIdx++\n  ) {\n    // We only want to test vs the other alternatives\n    if (currAltIdx === idx) {\n      continue;\n    }\n    const otherAltKnownPathsKeys = altKnownPathsKeys[currAltIdx];\n    for (let searchIdx = 0; searchIdx < searchPathKeys.length; searchIdx++) {\n      const searchKey = searchPathKeys[searchIdx];\n      if (otherAltKnownPathsKeys[searchKey] === true) {\n        return false;\n      }\n    }\n  }\n  // None of the SearchPathKeys were found in any of the other alternatives\n  return true;\n}\n\nexport function lookAheadSequenceFromAlternatives(\n  altsDefs: IProduction[],\n  k: number,\n): LookaheadSequence[] {\n  const partialAlts = map(altsDefs, (currAlt) =>\n    possiblePathsFrom([currAlt], 1),\n  );\n  const finalResult = initializeArrayOfArrays(partialAlts.length);\n  const altsHashes = map(partialAlts, (currAltPaths) => {\n    const dict: { [key: string]: boolean } = {};\n    forEach(currAltPaths, (item) => {\n      const keys = pathToHashKeys(item.partialPath);\n      forEach(keys, (currKey) => {\n        dict[currKey] = true;\n      });\n    });\n    return dict;\n  });\n  let newData = partialAlts;\n\n  // maxLookahead loop\n  for (let pathLength = 1; pathLength <= k; pathLength++) {\n    const currDataset = newData;\n    newData = initializeArrayOfArrays(currDataset.length);\n\n    // alternatives loop\n    for (let altIdx = 0; altIdx < currDataset.length; altIdx++) {\n      const currAltPathsAndSuffixes = currDataset[altIdx];\n      // paths in current alternative loop\n      for (\n        let currPathIdx = 0;\n        currPathIdx < currAltPathsAndSuffixes.length;\n        currPathIdx++\n      ) {\n        const currPathPrefix = currAltPathsAndSuffixes[currPathIdx].partialPath;\n        const suffixDef = currAltPathsAndSuffixes[currPathIdx].suffixDef;\n        const prefixKeys = pathToHashKeys(currPathPrefix);\n        const isUnique = isUniquePrefixHash(altsHashes, prefixKeys, altIdx);\n        // End of the line for this path.\n        if (isUnique || isEmpty(suffixDef) || currPathPrefix.length === k) {\n          const currAltResult = finalResult[altIdx];\n          // TODO: Can we implement a containsPath using Maps/Dictionaries?\n          if (containsPath(currAltResult, currPathPrefix) === false) {\n            currAltResult.push(currPathPrefix);\n            // Update all new  keys for the current path.\n            for (let j = 0; j < prefixKeys.length; j++) {\n              const currKey = prefixKeys[j];\n              altsHashes[altIdx][currKey] = true;\n            }\n          }\n        }\n        // Expand longer paths\n        else {\n          const newPartialPathsAndSuffixes = possiblePathsFrom(\n            suffixDef,\n            pathLength + 1,\n            currPathPrefix,\n          );\n          newData[altIdx] = newData[altIdx].concat(newPartialPathsAndSuffixes);\n\n          // Update keys for new known paths\n          forEach(newPartialPathsAndSuffixes, (item) => {\n            const prefixKeys = pathToHashKeys(item.partialPath);\n            forEach(prefixKeys, (key) => {\n              altsHashes[altIdx][key] = true;\n            });\n          });\n        }\n      }\n    }\n  }\n\n  return finalResult;\n}\n\nexport function getLookaheadPathsForOr(\n  occurrence: number,\n  ruleGrammar: Rule,\n  k: number,\n  orProd?: Alternation,\n): LookaheadSequence[] {\n  const visitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    PROD_TYPE.ALTERNATION,\n    orProd,\n  );\n  ruleGrammar.accept(visitor);\n  return lookAheadSequenceFromAlternatives(visitor.result, k);\n}\n\nexport function getLookaheadPathsForOptionalProd(\n  occurrence: number,\n  ruleGrammar: Rule,\n  prodType: PROD_TYPE,\n  k: number,\n): LookaheadSequence[] {\n  const insideDefVisitor = new InsideDefinitionFinderVisitor(\n    occurrence,\n    prodType,\n  );\n  ruleGrammar.accept(insideDefVisitor);\n  const insideDef = insideDefVisitor.result;\n\n  const afterDefWalker = new RestDefinitionFinderWalker(\n    ruleGrammar,\n    occurrence,\n    prodType,\n  );\n  const afterDef = afterDefWalker.startWalking();\n\n  const insideFlat = new AlternativeGAST({ definition: insideDef });\n  const afterFlat = new AlternativeGAST({ definition: afterDef });\n\n  return lookAheadSequenceFromAlternatives([insideFlat, afterFlat], k);\n}\n\nexport function containsPath(\n  alternative: Alternative,\n  searchPath: TokenType[],\n): boolean {\n  compareOtherPath: for (let i = 0; i < alternative.length; i++) {\n    const otherPath = alternative[i];\n    if (otherPath.length !== searchPath.length) {\n      continue;\n    }\n    for (let j = 0; j < otherPath.length; j++) {\n      const searchTok = searchPath[j];\n      const otherTok = otherPath[j];\n\n      const matchingTokens =\n        searchTok === otherTok ||\n        otherTok.categoryMatchesMap![searchTok.tokenTypeIdx!] !== undefined;\n      if (matchingTokens === false) {\n        continue compareOtherPath;\n      }\n    }\n    return true;\n  }\n\n  return false;\n}\n\nexport function isStrictPrefixOfPath(\n  prefix: TokenType[],\n  other: TokenType[],\n): boolean {\n  return (\n    prefix.length < other.length &&\n    every(prefix, (tokType, idx) => {\n      const otherTokType = other[idx];\n      return (\n        tokType === otherTokType ||\n        otherTokType.categoryMatchesMap![tokType.tokenTypeIdx!]\n      );\n    })\n  );\n}\n\nexport function areTokenCategoriesNotUsed(\n  lookAheadPaths: LookaheadSequence[],\n): boolean {\n  return every(lookAheadPaths, (singleAltPaths) =>\n    every(singleAltPaths, (singlePath) =>\n      every(singlePath, (token) => isEmpty(token.categoryMatches!)),\n    ),\n  );\n}\n","import {\n  clone,\n  compact,\n  difference,\n  drop,\n  dropRight,\n  filter,\n  first,\n  flatMap,\n  flatten,\n  forEach,\n  groupBy,\n  includes,\n  isEmpty,\n  map,\n  pickBy,\n  reduce,\n  reject,\n  values,\n} from \"lodash-es\";\nimport {\n  IParserAmbiguousAlternativesDefinitionError,\n  IParserDuplicatesDefinitionError,\n  IParserEmptyAlternativeDefinitionError,\n  ParserDefinitionErrorType,\n} from \"../parser/parser.js\";\nimport {\n  Alternation,\n  Alternative as AlternativeGAST,\n  GAstVisitor,\n  getProductionDslName,\n  isOptionalProd,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport {\n  Alternative,\n  containsPath,\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  getProdType,\n  isStrictPrefixOfPath,\n} from \"./lookahead.js\";\nimport { nextPossibleTokensAfter } from \"./interpreter.js\";\nimport {\n  ILookaheadStrategy,\n  IProduction,\n  IProductionWithOccurrence,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"./types.js\";\nimport { tokenStructuredMatcher } from \"../../scan/tokens.js\";\n\nexport function validateLookahead(options: {\n  lookaheadStrategy: ILookaheadStrategy;\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n}): IParserDefinitionError[] {\n  const lookaheadValidationErrorMessages = options.lookaheadStrategy.validate({\n    rules: options.rules,\n    tokenTypes: options.tokenTypes,\n    grammarName: options.grammarName,\n  });\n  return map(lookaheadValidationErrorMessages, (errorMessage) => ({\n    type: ParserDefinitionErrorType.CUSTOM_LOOKAHEAD_VALIDATION,\n    ...errorMessage,\n  }));\n}\n\nexport function validateGrammar(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  grammarName: string,\n): IParserDefinitionError[] {\n  const duplicateErrors: IParserDefinitionError[] = flatMap(\n    topLevels,\n    (currTopLevel) =>\n      validateDuplicateProductions(currTopLevel, errMsgProvider),\n  );\n\n  const termsNamespaceConflictErrors = checkTerminalAndNoneTerminalsNameSpace(\n    topLevels,\n    tokenTypes,\n    errMsgProvider,\n  );\n\n  const tooManyAltsErrors = flatMap(topLevels, (curRule) =>\n    validateTooManyAlts(curRule, errMsgProvider),\n  );\n\n  const duplicateRulesError = flatMap(topLevels, (curRule) =>\n    validateRuleDoesNotAlreadyExist(\n      curRule,\n      topLevels,\n      grammarName,\n      errMsgProvider,\n    ),\n  );\n\n  return duplicateErrors.concat(\n    termsNamespaceConflictErrors,\n    tooManyAltsErrors,\n    duplicateRulesError,\n  );\n}\n\nfunction validateDuplicateProductions(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDuplicatesDefinitionError[] {\n  const collectorVisitor = new OccurrenceValidationCollector();\n  topLevelRule.accept(collectorVisitor);\n  const allRuleProductions = collectorVisitor.allProductions;\n\n  const productionGroups = groupBy(\n    allRuleProductions,\n    identifyProductionForDuplicates,\n  );\n\n  const duplicates: any = pickBy(productionGroups, (currGroup) => {\n    return currGroup.length > 1;\n  });\n\n  const errors = map(values(duplicates), (currDuplicates: any) => {\n    const firstProd: any = first(currDuplicates);\n    const msg = errMsgProvider.buildDuplicateFoundError(\n      topLevelRule,\n      currDuplicates,\n    );\n    const dslName = getProductionDslName(firstProd);\n    const defError: IParserDuplicatesDefinitionError = {\n      message: msg,\n      type: ParserDefinitionErrorType.DUPLICATE_PRODUCTIONS,\n      ruleName: topLevelRule.name,\n      dslName: dslName,\n      occurrence: firstProd.idx,\n    };\n\n    const param = getExtraProductionArgument(firstProd);\n    if (param) {\n      defError.parameter = param;\n    }\n\n    return defError;\n  });\n  return errors;\n}\n\nexport function identifyProductionForDuplicates(\n  prod: IProductionWithOccurrence,\n): string {\n  return `${getProductionDslName(prod)}_#_${\n    prod.idx\n  }_#_${getExtraProductionArgument(prod)}`;\n}\n\nfunction getExtraProductionArgument(prod: IProductionWithOccurrence): string {\n  if (prod instanceof Terminal) {\n    return prod.terminalType.name;\n  } else if (prod instanceof NonTerminal) {\n    return prod.nonTerminalName;\n  } else {\n    return \"\";\n  }\n}\n\nexport class OccurrenceValidationCollector extends GAstVisitor {\n  public allProductions: IProductionWithOccurrence[] = [];\n\n  public visitNonTerminal(subrule: NonTerminal): void {\n    this.allProductions.push(subrule);\n  }\n\n  public visitOption(option: Option): void {\n    this.allProductions.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.allProductions.push(or);\n  }\n\n  public visitTerminal(terminal: Terminal): void {\n    this.allProductions.push(terminal);\n  }\n}\n\nexport function validateRuleDoesNotAlreadyExist(\n  rule: Rule,\n  allRules: Rule[],\n  className: string,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors = [];\n  const occurrences = reduce(\n    allRules,\n    (result, curRule) => {\n      if (curRule.name === rule.name) {\n        return result + 1;\n      }\n      return result;\n    },\n    0,\n  );\n  if (occurrences > 1) {\n    const errMsg = errMsgProvider.buildDuplicateRuleNameError({\n      topLevelRule: rule,\n      grammarName: className,\n    });\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n      ruleName: rule.name,\n    });\n  }\n\n  return errors;\n}\n\n// TODO: is there anyway to get only the rule names of rules inherited from the super grammars?\n// This is not part of the IGrammarErrorProvider because the validation cannot be performed on\n// The grammar structure, only at runtime.\nexport function validateRuleIsOverridden(\n  ruleName: string,\n  definedRulesNames: string[],\n  className: string,\n): IParserDefinitionError[] {\n  const errors = [];\n  let errMsg;\n\n  if (!includes(definedRulesNames, ruleName)) {\n    errMsg =\n      `Invalid rule override, rule: ->${ruleName}<- cannot be overridden in the grammar: ->${className}<-` +\n      `as it is not defined in any of the super grammars `;\n    errors.push({\n      message: errMsg,\n      type: ParserDefinitionErrorType.INVALID_RULE_OVERRIDE,\n      ruleName: ruleName,\n    });\n  }\n\n  return errors;\n}\n\nexport function validateNoLeftRecursion(\n  topRule: Rule,\n  currRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n  path: Rule[] = [],\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  const nextNonTerminals = getFirstNoneTerminal(currRule.definition);\n  if (isEmpty(nextNonTerminals)) {\n    return [];\n  } else {\n    const ruleName = topRule.name;\n    const foundLeftRecursion = includes(nextNonTerminals, topRule);\n    if (foundLeftRecursion) {\n      errors.push({\n        message: errMsgProvider.buildLeftRecursionError({\n          topLevelRule: topRule,\n          leftRecursionPath: path,\n        }),\n        type: ParserDefinitionErrorType.LEFT_RECURSION,\n        ruleName: ruleName,\n      });\n    }\n\n    // we are only looking for cyclic paths leading back to the specific topRule\n    // other cyclic paths are ignored, we still need this difference to avoid infinite loops...\n    const validNextSteps = difference(nextNonTerminals, path.concat([topRule]));\n    const errorsFromNextSteps = flatMap(validNextSteps, (currRefRule) => {\n      const newPath = clone(path);\n      newPath.push(currRefRule);\n      return validateNoLeftRecursion(\n        topRule,\n        currRefRule,\n        errMsgProvider,\n        newPath,\n      );\n    });\n\n    return errors.concat(errorsFromNextSteps);\n  }\n}\n\nexport function getFirstNoneTerminal(definition: IProduction[]): Rule[] {\n  let result: Rule[] = [];\n  if (isEmpty(definition)) {\n    return result;\n  }\n  const firstProd = first(definition);\n\n  /* istanbul ignore else */\n  if (firstProd instanceof NonTerminal) {\n    result.push(firstProd.referencedRule);\n  } else if (\n    firstProd instanceof AlternativeGAST ||\n    firstProd instanceof Option ||\n    firstProd instanceof RepetitionMandatory ||\n    firstProd instanceof RepetitionMandatoryWithSeparator ||\n    firstProd instanceof RepetitionWithSeparator ||\n    firstProd instanceof Repetition\n  ) {\n    result = result.concat(\n      getFirstNoneTerminal(<IProduction[]>firstProd.definition),\n    );\n  } else if (firstProd instanceof Alternation) {\n    // each sub definition in alternation is a FLAT\n    result = flatten(\n      map(firstProd.definition, (currSubDef) =>\n        getFirstNoneTerminal((<AlternativeGAST>currSubDef).definition),\n      ),\n    );\n  } else if (firstProd instanceof Terminal) {\n    // nothing to see, move along\n  } else {\n    throw Error(\"non exhaustive match\");\n  }\n\n  const isFirstOptional = isOptionalProd(firstProd);\n  const hasMore = definition.length > 1;\n  if (isFirstOptional && hasMore) {\n    const rest = drop(definition);\n    return result.concat(getFirstNoneTerminal(rest));\n  } else {\n    return result;\n  }\n}\n\nclass OrCollector extends GAstVisitor {\n  public alternations: Alternation[] = [];\n\n  public visitAlternation(node: Alternation): void {\n    this.alternations.push(node);\n  }\n}\n\nexport function validateEmptyOrAlternative(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserEmptyAlternativeDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap<Alternation, IParserEmptyAlternativeDefinitionError>(\n    ors,\n    (currOr) => {\n      const exceptLast = dropRight(currOr.definition);\n      return flatMap(exceptLast, (currAlternative, currAltIdx) => {\n        const possibleFirstInAlt = nextPossibleTokensAfter(\n          [currAlternative],\n          [],\n          tokenStructuredMatcher,\n          1,\n        );\n        if (isEmpty(possibleFirstInAlt)) {\n          return [\n            {\n              message: errMsgProvider.buildEmptyAlternationError({\n                topLevelRule: topLevelRule,\n                alternation: currOr,\n                emptyChoiceIdx: currAltIdx,\n              }),\n              type: ParserDefinitionErrorType.NONE_LAST_EMPTY_ALT,\n              ruleName: topLevelRule.name,\n              occurrence: currOr.idx,\n              alternative: currAltIdx + 1,\n            },\n          ];\n        } else {\n          return [];\n        }\n      });\n    },\n  );\n\n  return errors;\n}\n\nexport function validateAmbiguousAlternationAlternatives(\n  topLevelRule: Rule,\n  globalMaxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  let ors = orCollector.alternations;\n\n  // New Handling of ignoring ambiguities\n  // - https://github.com/chevrotain/chevrotain/issues/869\n  ors = reject(ors, (currOr) => currOr.ignoreAmbiguities === true);\n\n  const errors = flatMap(ors, (currOr: Alternation) => {\n    const currOccurrence = currOr.idx;\n    const actualMaxLookahead = currOr.maxLookahead || globalMaxLookahead;\n    const alternatives = getLookaheadPathsForOr(\n      currOccurrence,\n      topLevelRule,\n      actualMaxLookahead,\n      currOr,\n    );\n    const altsAmbiguityErrors = checkAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n    const altsPrefixAmbiguityErrors = checkPrefixAlternativesAmbiguities(\n      alternatives,\n      currOr,\n      topLevelRule,\n      errMsgProvider,\n    );\n\n    return altsAmbiguityErrors.concat(altsPrefixAmbiguityErrors);\n  });\n\n  return errors;\n}\n\nexport class RepetitionCollector extends GAstVisitor {\n  public allProductions: (IProductionWithOccurrence & {\n    maxLookahead?: number;\n  })[] = [];\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.allProductions.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.allProductions.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.allProductions.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.allProductions.push(many);\n  }\n}\n\nexport function validateTooManyAlts(\n  topLevelRule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const orCollector = new OrCollector();\n  topLevelRule.accept(orCollector);\n  const ors = orCollector.alternations;\n\n  const errors = flatMap(ors, (currOr) => {\n    if (currOr.definition.length > 255) {\n      return [\n        {\n          message: errMsgProvider.buildTooManyAlternativesError({\n            topLevelRule: topLevelRule,\n            alternation: currOr,\n          }),\n          type: ParserDefinitionErrorType.TOO_MANY_ALTS,\n          ruleName: topLevelRule.name,\n          occurrence: currOr.idx,\n        },\n      ];\n    } else {\n      return [];\n    }\n  });\n\n  return errors;\n}\n\nexport function validateSomeNonEmptyLookaheadPath(\n  topLevelRules: Rule[],\n  maxLookahead: number,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n  forEach(topLevelRules, (currTopRule) => {\n    const collectorVisitor = new RepetitionCollector();\n    currTopRule.accept(collectorVisitor);\n    const allRuleProductions = collectorVisitor.allProductions;\n    forEach(allRuleProductions, (currProd) => {\n      const prodType = getProdType(currProd);\n      const actualMaxLookahead = currProd.maxLookahead || maxLookahead;\n      const currOccurrence = currProd.idx;\n      const paths = getLookaheadPathsForOptionalProd(\n        currOccurrence,\n        currTopRule,\n        prodType,\n        actualMaxLookahead,\n      );\n      const pathsInsideProduction = paths[0];\n      if (isEmpty(flatten(pathsInsideProduction))) {\n        const errMsg = errMsgProvider.buildEmptyRepetitionError({\n          topLevelRule: currTopRule,\n          repetition: currProd,\n        });\n        errors.push({\n          message: errMsg,\n          type: ParserDefinitionErrorType.NO_NON_EMPTY_LOOKAHEAD,\n          ruleName: currTopRule.name,\n        });\n      }\n    });\n  });\n\n  return errors;\n}\n\nexport interface IAmbiguityDescriptor {\n  alts: number[];\n  path: TokenType[];\n}\n\nfunction checkAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  const foundAmbiguousPaths: Alternative = [];\n  const identicalAmbiguities = reduce(\n    alternatives,\n    (result, currAlt, currAltIdx) => {\n      // ignore (skip) ambiguities with this alternative\n      if (alternation.definition[currAltIdx].ignoreAmbiguities === true) {\n        return result;\n      }\n\n      forEach(currAlt, (currPath) => {\n        const altsCurrPathAppearsIn = [currAltIdx];\n        forEach(alternatives, (currOtherAlt, currOtherAltIdx) => {\n          if (\n            currAltIdx !== currOtherAltIdx &&\n            containsPath(currOtherAlt, currPath) &&\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[currOtherAltIdx].ignoreAmbiguities !== true\n          ) {\n            altsCurrPathAppearsIn.push(currOtherAltIdx);\n          }\n        });\n\n        if (\n          altsCurrPathAppearsIn.length > 1 &&\n          !containsPath(foundAmbiguousPaths, currPath)\n        ) {\n          foundAmbiguousPaths.push(currPath);\n          result.push({\n            alts: altsCurrPathAppearsIn,\n            path: currPath,\n          });\n        }\n      });\n      return result;\n    },\n    [] as { alts: number[]; path: TokenType[] }[],\n  );\n\n  const currErrors = map(identicalAmbiguities, (currAmbDescriptor) => {\n    const ambgIndices = map(\n      currAmbDescriptor.alts,\n      (currAltIdx) => currAltIdx + 1,\n    );\n\n    const currMessage = errMsgProvider.buildAlternationAmbiguityError({\n      topLevelRule: rule,\n      alternation: alternation,\n      ambiguityIndices: ambgIndices,\n      prefixPath: currAmbDescriptor.path,\n    });\n\n    return {\n      message: currMessage,\n      type: ParserDefinitionErrorType.AMBIGUOUS_ALTS,\n      ruleName: rule.name,\n      occurrence: alternation.idx,\n      alternatives: currAmbDescriptor.alts,\n    };\n  });\n\n  return currErrors;\n}\n\nexport function checkPrefixAlternativesAmbiguities(\n  alternatives: Alternative[],\n  alternation: Alternation,\n  rule: Rule,\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserAmbiguousAlternativesDefinitionError[] {\n  // flatten\n  const pathsAndIndices = reduce(\n    alternatives,\n    (result, currAlt, idx) => {\n      const currPathsAndIdx = map(currAlt, (currPath) => {\n        return { idx: idx, path: currPath };\n      });\n      return result.concat(currPathsAndIdx);\n    },\n    [] as { idx: number; path: TokenType[] }[],\n  );\n\n  const errors = compact(\n    flatMap(pathsAndIndices, (currPathAndIdx) => {\n      const alternativeGast = alternation.definition[currPathAndIdx.idx];\n      // ignore (skip) ambiguities with this alternative\n      if (alternativeGast.ignoreAmbiguities === true) {\n        return [];\n      }\n      const targetIdx = currPathAndIdx.idx;\n      const targetPath = currPathAndIdx.path;\n\n      const prefixAmbiguitiesPathsAndIndices = filter(\n        pathsAndIndices,\n        (searchPathAndIdx) => {\n          // prefix ambiguity can only be created from lower idx (higher priority) path\n          return (\n            // ignore (skip) ambiguities with this \"other\" alternative\n            alternation.definition[searchPathAndIdx.idx].ignoreAmbiguities !==\n              true &&\n            searchPathAndIdx.idx < targetIdx &&\n            // checking for strict prefix because identical lookaheads\n            // will be be detected using a different validation.\n            isStrictPrefixOfPath(searchPathAndIdx.path, targetPath)\n          );\n        },\n      );\n\n      const currPathPrefixErrors = map(\n        prefixAmbiguitiesPathsAndIndices,\n        (currAmbPathAndIdx): IParserAmbiguousAlternativesDefinitionError => {\n          const ambgIndices = [currAmbPathAndIdx.idx + 1, targetIdx + 1];\n          const occurrence = alternation.idx === 0 ? \"\" : alternation.idx;\n\n          const message = errMsgProvider.buildAlternationPrefixAmbiguityError({\n            topLevelRule: rule,\n            alternation: alternation,\n            ambiguityIndices: ambgIndices,\n            prefixPath: currAmbPathAndIdx.path,\n          });\n          return {\n            message: message,\n            type: ParserDefinitionErrorType.AMBIGUOUS_PREFIX_ALTS,\n            ruleName: rule.name,\n            occurrence: occurrence,\n            alternatives: ambgIndices,\n          };\n        },\n      );\n\n      return currPathPrefixErrors;\n    }),\n  );\n\n  return errors;\n}\n\nfunction checkTerminalAndNoneTerminalsNameSpace(\n  topLevels: Rule[],\n  tokenTypes: TokenType[],\n  errMsgProvider: IGrammarValidatorErrorMessageProvider,\n): IParserDefinitionError[] {\n  const errors: IParserDefinitionError[] = [];\n\n  const tokenNames = map(tokenTypes, (currToken) => currToken.name);\n\n  forEach(topLevels, (currRule) => {\n    const currRuleName = currRule.name;\n    if (includes(tokenNames, currRuleName)) {\n      const errMsg = errMsgProvider.buildNamespaceConflictError(currRule);\n\n      errors.push({\n        message: errMsg,\n        type: ParserDefinitionErrorType.CONFLICT_TOKENS_RULES_NAMESPACE,\n        ruleName: currRuleName,\n      });\n    }\n  });\n\n  return errors;\n}\n","import { Rule } from \"@chevrotain/gast\";\nimport { defaults, forEach } from \"lodash-es\";\nimport { resolveGrammar as orgResolveGrammar } from \"../resolver.js\";\nimport { validateGrammar as orgValidateGrammar } from \"../checks.js\";\nimport {\n  defaultGrammarResolverErrorProvider,\n  defaultGrammarValidatorErrorProvider,\n} from \"../../errors_public.js\";\nimport { TokenType } from \"@chevrotain/types\";\nimport {\n  IGrammarResolverErrorMessageProvider,\n  IGrammarValidatorErrorMessageProvider,\n  IParserDefinitionError,\n} from \"../types.js\";\n\ntype ResolveGrammarOpts = {\n  rules: Rule[];\n  errMsgProvider?: IGrammarResolverErrorMessageProvider;\n};\nexport function resolveGrammar(\n  options: ResolveGrammarOpts,\n): IParserDefinitionError[] {\n  const actualOptions: Required<ResolveGrammarOpts> = defaults(options, {\n    errMsgProvider: defaultGrammarResolverErrorProvider,\n  });\n\n  const topRulesTable: { [ruleName: string]: Rule } = {};\n  forEach(options.rules, (rule) => {\n    topRulesTable[rule.name] = rule;\n  });\n  return orgResolveGrammar(topRulesTable, actualOptions.errMsgProvider);\n}\n\nexport function validateGrammar(options: {\n  rules: Rule[];\n  tokenTypes: TokenType[];\n  grammarName: string;\n  errMsgProvider: IGrammarValidatorErrorMessageProvider;\n}): IParserDefinitionError[] {\n  options = defaults(options, {\n    errMsgProvider: defaultGrammarValidatorErrorProvider,\n  });\n\n  return orgValidateGrammar(\n    options.rules,\n    options.tokenTypes,\n    options.errMsgProvider,\n    options.grammarName,\n  );\n}\n","import { includes } from \"lodash-es\";\nimport {\n  IRecognitionException,\n  IRecognizerContext,\n  IToken,\n} from \"@chevrotain/types\";\n\nconst MISMATCHED_TOKEN_EXCEPTION = \"MismatchedTokenException\";\nconst NO_VIABLE_ALT_EXCEPTION = \"NoViableAltException\";\nconst EARLY_EXIT_EXCEPTION = \"EarlyExitException\";\nconst NOT_ALL_INPUT_PARSED_EXCEPTION = \"NotAllInputParsedException\";\n\nconst RECOGNITION_EXCEPTION_NAMES = [\n  MISMATCHED_TOKEN_EXCEPTION,\n  NO_VIABLE_ALT_EXCEPTION,\n  EARLY_EXIT_EXCEPTION,\n  NOT_ALL_INPUT_PARSED_EXCEPTION,\n];\n\nObject.freeze(RECOGNITION_EXCEPTION_NAMES);\n\n// hacks to bypass no support for custom Errors in javascript/typescript\nexport function isRecognitionException(error: Error) {\n  // can't do instanceof on hacked custom js exceptions\n  return includes(RECOGNITION_EXCEPTION_NAMES, error.name);\n}\n\nabstract class RecognitionException\n  extends Error\n  implements IRecognitionException\n{\n  context: IRecognizerContext;\n  resyncedTokens: IToken[] = [];\n\n  protected constructor(\n    message: string,\n    public token: IToken,\n  ) {\n    super(message);\n\n    // fix prototype chain when typescript target is ES5\n    Object.setPrototypeOf(this, new.target.prototype);\n\n    /* istanbul ignore next - V8 workaround to remove constructor from stacktrace when typescript target is ES5 */\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n\nexport class MismatchedTokenException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = MISMATCHED_TOKEN_EXCEPTION;\n  }\n}\n\nexport class NoViableAltException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = NO_VIABLE_ALT_EXCEPTION;\n  }\n}\n\nexport class NotAllInputParsedException extends RecognitionException {\n  constructor(message: string, token: IToken) {\n    super(message, token);\n    this.name = NOT_ALL_INPUT_PARSED_EXCEPTION;\n  }\n}\n\nexport class EarlyExitException extends RecognitionException {\n  constructor(\n    message: string,\n    token: IToken,\n    public previousToken: IToken,\n  ) {\n    super(message, token);\n    this.name = EARLY_EXIT_EXCEPTION;\n  }\n}\n","import {\n  createTokenInstance,\n  EOF,\n  tokenMatcher,\n} from \"../../../scan/tokens_public.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  IFirstAfterRepetition,\n} from \"../../grammar/interpreter.js\";\nimport {\n  clone,\n  dropRight,\n  find,\n  flatten,\n  has,\n  includes,\n  isEmpty,\n  map,\n} from \"lodash-es\";\nimport {\n  IParserConfig,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { MismatchedTokenException } from \"../../exceptions_public.js\";\nimport { IN } from \"../../constants.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\nexport const EOF_FOLLOW_KEY: any = {};\n\nexport interface IFollowKey {\n  ruleName: string;\n  idxInCallingRule: number;\n  inRule: string;\n}\n\nexport const IN_RULE_RECOVERY_EXCEPTION = \"InRuleRecoveryException\";\n\nexport class InRuleRecoveryException extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = IN_RULE_RECOVERY_EXCEPTION;\n  }\n}\n\n/**\n * This trait is responsible for the error recovery and fault tolerant logic\n */\nexport class Recoverable {\n  recoveryEnabled: boolean;\n  firstAfterRepMap: Record<string, IFirstAfterRepetition>;\n  resyncFollows: Record<string, TokenType[]>;\n\n  initRecoverable(config: IParserConfig) {\n    this.firstAfterRepMap = {};\n    this.resyncFollows = {};\n\n    this.recoveryEnabled = has(config, \"recoveryEnabled\")\n      ? (config.recoveryEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.recoveryEnabled;\n\n    // performance optimization, NOOP will be inlined which\n    // effectively means that this optional feature does not exist\n    // when not used.\n    if (this.recoveryEnabled) {\n      this.attemptInRepetitionRecovery = attemptInRepetitionRecovery;\n    }\n  }\n\n  public getTokenToInsert(tokType: TokenType): IToken {\n    const tokToInsert = createTokenInstance(\n      tokType,\n      \"\",\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n      NaN,\n    );\n    tokToInsert.isInsertedInRecovery = true;\n    return tokToInsert;\n  }\n\n  public canTokenTypeBeInsertedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  public canTokenTypeBeDeletedInRecovery(tokType: TokenType): boolean {\n    return true;\n  }\n\n  tryInRepetitionRecovery(\n    this: MixedInParser,\n    grammarRule: Function,\n    grammarRuleArgs: any[],\n    lookAheadFunc: () => boolean,\n    expectedTokType: TokenType,\n  ): void {\n    // TODO: can the resyncTokenType be cached?\n    const reSyncTokType = this.findReSyncTokenType();\n    const savedLexerState = this.exportLexerState();\n    const resyncedTokens: IToken[] = [];\n    let passedResyncPoint = false;\n\n    const nextTokenWithoutResync = this.LA(1);\n    let currToken = this.LA(1);\n\n    const generateErrorMessage = () => {\n      const previousToken = this.LA(0);\n      // we are preemptively re-syncing before an error has been detected, therefor we must reproduce\n      // the error that would have been thrown\n      const msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: expectedTokType,\n        actual: nextTokenWithoutResync,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      const error = new MismatchedTokenException(\n        msg,\n        nextTokenWithoutResync,\n        this.LA(0),\n      );\n      // the first token here will be the original cause of the error, this is not part of the resyncedTokens property.\n      error.resyncedTokens = dropRight(resyncedTokens);\n      this.SAVE_ERROR(error);\n    };\n\n    while (!passedResyncPoint) {\n      // re-synced to a point where we can safely exit the repetition/\n      if (this.tokenMatcher(currToken, expectedTokType)) {\n        generateErrorMessage();\n        return; // must return here to avoid reverting the inputIdx\n      } else if (lookAheadFunc.call(this)) {\n        // we skipped enough tokens so we can resync right back into another iteration of the repetition grammar rule\n        generateErrorMessage();\n        // recursive invocation in other to support multiple re-syncs in the same top level repetition grammar rule\n        grammarRule.apply(this, grammarRuleArgs);\n        return; // must return here to avoid reverting the inputIdx\n      } else if (this.tokenMatcher(currToken, reSyncTokType)) {\n        passedResyncPoint = true;\n      } else {\n        currToken = this.SKIP_TOKEN();\n        this.addToResyncTokens(currToken, resyncedTokens);\n      }\n    }\n\n    // we were unable to find a CLOSER point to resync inside the Repetition, reset the state.\n    // The parsing exception we were trying to prevent will happen in the NEXT parsing step. it may be handled by\n    // \"between rules\" resync recovery later in the flow.\n    this.importLexerState(savedLexerState);\n  }\n\n  shouldInRepetitionRecoveryBeTried(\n    this: MixedInParser,\n    expectTokAfterLastMatch: TokenType,\n    nextTokIdx: number,\n    notStuck: boolean | undefined,\n  ): boolean {\n    // Edge case of arriving from a MANY repetition which is stuck\n    // Attempting recovery in this case could cause an infinite loop\n    if (notStuck === false) {\n      return false;\n    }\n\n    // no need to recover, next token is what we expect...\n    if (this.tokenMatcher(this.LA(1), expectTokAfterLastMatch)) {\n      return false;\n    }\n\n    // error recovery is disabled during backtracking as it can make the parser ignore a valid grammar path\n    // and prefer some backtracking path that includes recovered errors.\n    if (this.isBackTracking()) {\n      return false;\n    }\n\n    // if we can perform inRule recovery (single token insertion or deletion) we always prefer that recovery algorithm\n    // because if it works, it makes the least amount of changes to the input stream (greedy algorithm)\n    //noinspection RedundantIfStatementJS\n    if (\n      this.canPerformInRuleRecovery(\n        expectTokAfterLastMatch,\n        this.getFollowsForInRuleRecovery(expectTokAfterLastMatch, nextTokIdx),\n      )\n    ) {\n      return false;\n    }\n\n    return true;\n  }\n\n  // Error Recovery functionality\n  getFollowsForInRuleRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): TokenType[] {\n    const grammarPath = this.getCurrentGrammarPath(tokType, tokIdxInRule);\n    const follows = this.getNextPossibleTokenTypes(grammarPath);\n    return follows;\n  }\n\n  tryInRuleRecovery(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): IToken {\n    if (this.canRecoverWithSingleTokenInsertion(expectedTokType, follows)) {\n      const tokToInsert = this.getTokenToInsert(expectedTokType);\n      return tokToInsert;\n    }\n\n    if (this.canRecoverWithSingleTokenDeletion(expectedTokType)) {\n      const nextTok = this.SKIP_TOKEN();\n      this.consumeToken();\n      return nextTok;\n    }\n\n    throw new InRuleRecoveryException(\"sad sad panda\");\n  }\n\n  canPerformInRuleRecovery(\n    this: MixedInParser,\n    expectedToken: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    return (\n      this.canRecoverWithSingleTokenInsertion(expectedToken, follows) ||\n      this.canRecoverWithSingleTokenDeletion(expectedToken)\n    );\n  }\n\n  canRecoverWithSingleTokenInsertion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n    follows: TokenType[],\n  ): boolean {\n    if (!this.canTokenTypeBeInsertedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    // must know the possible following tokens to perform single token insertion\n    if (isEmpty(follows)) {\n      return false;\n    }\n\n    const mismatchedTok = this.LA(1);\n    const isMisMatchedTokInFollows =\n      find(follows, (possibleFollowsTokType: TokenType) => {\n        return this.tokenMatcher(mismatchedTok, possibleFollowsTokType);\n      }) !== undefined;\n\n    return isMisMatchedTokInFollows;\n  }\n\n  canRecoverWithSingleTokenDeletion(\n    this: MixedInParser,\n    expectedTokType: TokenType,\n  ): boolean {\n    if (!this.canTokenTypeBeDeletedInRecovery(expectedTokType)) {\n      return false;\n    }\n\n    const isNextTokenWhatIsExpected = this.tokenMatcher(\n      this.LA(2),\n      expectedTokType,\n    );\n    return isNextTokenWhatIsExpected;\n  }\n\n  isInCurrentRuleReSyncSet(\n    this: MixedInParser,\n    tokenTypeIdx: TokenType,\n  ): boolean {\n    const followKey = this.getCurrFollowKey();\n    const currentRuleReSyncSet = this.getFollowSetFromFollowKey(followKey);\n    return includes(currentRuleReSyncSet, tokenTypeIdx);\n  }\n\n  findReSyncTokenType(this: MixedInParser): TokenType {\n    const allPossibleReSyncTokTypes = this.flattenFollowSet();\n    // this loop will always terminate as EOF is always in the follow stack and also always (virtually) in the input\n    let nextToken = this.LA(1);\n    let k = 2;\n    while (true) {\n      const foundMatch = find(allPossibleReSyncTokTypes, (resyncTokType) => {\n        const canMatch = tokenMatcher(nextToken, resyncTokType);\n        return canMatch;\n      });\n      if (foundMatch !== undefined) {\n        return foundMatch;\n      }\n      nextToken = this.LA(k);\n      k++;\n    }\n  }\n\n  getCurrFollowKey(this: MixedInParser): IFollowKey {\n    // the length is at least one as we always add the ruleName to the stack before invoking the rule.\n    if (this.RULE_STACK.length === 1) {\n      return EOF_FOLLOW_KEY;\n    }\n    const currRuleShortName = this.getLastExplicitRuleShortName();\n    const currRuleIdx = this.getLastExplicitRuleOccurrenceIndex();\n    const prevRuleShortName = this.getPreviousExplicitRuleShortName();\n\n    return {\n      ruleName: this.shortRuleNameToFullName(currRuleShortName),\n      idxInCallingRule: currRuleIdx,\n      inRule: this.shortRuleNameToFullName(prevRuleShortName),\n    };\n  }\n\n  buildFullFollowKeyStack(this: MixedInParser): IFollowKey[] {\n    const explicitRuleStack = this.RULE_STACK;\n    const explicitOccurrenceStack = this.RULE_OCCURRENCE_STACK;\n\n    return map(explicitRuleStack, (ruleName, idx) => {\n      if (idx === 0) {\n        return EOF_FOLLOW_KEY;\n      }\n      return {\n        ruleName: this.shortRuleNameToFullName(ruleName),\n        idxInCallingRule: explicitOccurrenceStack[idx],\n        inRule: this.shortRuleNameToFullName(explicitRuleStack[idx - 1]),\n      };\n    });\n  }\n\n  flattenFollowSet(this: MixedInParser): TokenType[] {\n    const followStack = map(this.buildFullFollowKeyStack(), (currKey) => {\n      return this.getFollowSetFromFollowKey(currKey);\n    });\n    return <any>flatten(followStack);\n  }\n\n  getFollowSetFromFollowKey(\n    this: MixedInParser,\n    followKey: IFollowKey,\n  ): TokenType[] {\n    if (followKey === EOF_FOLLOW_KEY) {\n      return [EOF];\n    }\n\n    const followName =\n      followKey.ruleName + followKey.idxInCallingRule + IN + followKey.inRule;\n\n    return this.resyncFollows[followName];\n  }\n\n  // It does not make any sense to include a virtual EOF token in the list of resynced tokens\n  // as EOF does not really exist and thus does not contain any useful information (line/column numbers)\n  addToResyncTokens(\n    this: MixedInParser,\n    token: IToken,\n    resyncTokens: IToken[],\n  ): IToken[] {\n    if (!this.tokenMatcher(token, EOF)) {\n      resyncTokens.push(token);\n    }\n    return resyncTokens;\n  }\n\n  reSyncTo(this: MixedInParser, tokType: TokenType): IToken[] {\n    const resyncedTokens: IToken[] = [];\n    let nextTok = this.LA(1);\n    while (this.tokenMatcher(nextTok, tokType) === false) {\n      nextTok = this.SKIP_TOKEN();\n      this.addToResyncTokens(nextTok, resyncedTokens);\n    }\n    // the last token is not part of the error.\n    return dropRight(resyncedTokens);\n  }\n\n  attemptInRepetitionRecovery(\n    this: MixedInParser,\n    prodFunc: Function,\n    args: any[],\n    lookaheadFunc: () => boolean,\n    dslMethodIdx: number,\n    prodOccurrence: number,\n    nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n    notStuck?: boolean,\n  ): void {\n    // by default this is a NO-OP\n    // The actual implementation is with the function(not method) below\n  }\n\n  getCurrentGrammarPath(\n    this: MixedInParser,\n    tokType: TokenType,\n    tokIdxInRule: number,\n  ): ITokenGrammarPath {\n    const pathRuleStack: string[] = this.getHumanReadableRuleStack();\n    const pathOccurrenceStack: number[] = clone(this.RULE_OCCURRENCE_STACK);\n    const grammarPath: any = {\n      ruleStack: pathRuleStack,\n      occurrenceStack: pathOccurrenceStack,\n      lastTok: tokType,\n      lastTokOccurrence: tokIdxInRule,\n    };\n\n    return grammarPath;\n  }\n  getHumanReadableRuleStack(this: MixedInParser): string[] {\n    return map(this.RULE_STACK, (currShortName) =>\n      this.shortRuleNameToFullName(currShortName),\n    );\n  }\n}\n\nexport function attemptInRepetitionRecovery(\n  this: MixedInParser,\n  prodFunc: Function,\n  args: any[],\n  lookaheadFunc: () => boolean,\n  dslMethodIdx: number,\n  prodOccurrence: number,\n  nextToksWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  notStuck?: boolean,\n): void {\n  const key = this.getKeyForAutomaticLookahead(dslMethodIdx, prodOccurrence);\n  let firstAfterRepInfo = this.firstAfterRepMap[key];\n  if (firstAfterRepInfo === undefined) {\n    const currRuleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[currRuleName];\n    const walker: AbstractNextTerminalAfterProductionWalker =\n      new nextToksWalker(ruleGrammar, prodOccurrence);\n    firstAfterRepInfo = walker.startWalking();\n    this.firstAfterRepMap[key] = firstAfterRepInfo;\n  }\n\n  let expectTokAfterLastMatch = firstAfterRepInfo.token;\n  let nextTokIdx = firstAfterRepInfo.occurrence;\n  const isEndOfRule = firstAfterRepInfo.isEndOfRule;\n\n  // special edge case of a TOP most repetition after which the input should END.\n  // this will force an attempt for inRule recovery in that scenario.\n  if (\n    this.RULE_STACK.length === 1 &&\n    isEndOfRule &&\n    expectTokAfterLastMatch === undefined\n  ) {\n    expectTokAfterLastMatch = EOF;\n    nextTokIdx = 1;\n  }\n\n  // We don't have anything to re-sync to...\n  // this condition was extracted from `shouldInRepetitionRecoveryBeTried` to act as a type-guard\n  if (expectTokAfterLastMatch === undefined || nextTokIdx === undefined) {\n    return;\n  }\n\n  if (\n    this.shouldInRepetitionRecoveryBeTried(\n      expectTokAfterLastMatch,\n      nextTokIdx,\n      notStuck,\n    )\n  ) {\n    // TODO: performance optimization: instead of passing the original args here, we modify\n    // the args param (or create a new one) and make sure the lookahead func is explicitly provided\n    // to avoid searching the cache for it once more.\n    this.tryInRepetitionRecovery(\n      prodFunc,\n      args,\n      lookaheadFunc,\n      expectTokAfterLastMatch,\n    );\n  }\n}\n","// Lookahead keys are 32Bit integers in the form\n// TTTTTTTT-ZZZZZZZZZZZZ-YYYY-XXXXXXXX\n// XXXX -> Occurrence Index bitmap.\n// YYYY -> DSL Method Type bitmap.\n// ZZZZZZZZZZZZZZZ -> Rule short Index bitmap.\n// TTTTTTTTT -> alternation alternative index bitmap\n\nexport const BITS_FOR_METHOD_TYPE = 4;\nexport const BITS_FOR_OCCURRENCE_IDX = 8;\nexport const BITS_FOR_RULE_IDX = 12;\n// TODO: validation, this means that there may at most 2^8 --> 256 alternatives for an alternation.\nexport const BITS_FOR_ALT_IDX = 8;\n\n// short string used as part of mapping keys.\n// being short improves the performance when composing KEYS for maps out of these\n// The 5 - 8 bits (16 possible values, are reserved for the DSL method indices)\nexport const OR_IDX = 1 << BITS_FOR_OCCURRENCE_IDX;\nexport const OPTION_IDX = 2 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_IDX = 3 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_IDX = 4 << BITS_FOR_OCCURRENCE_IDX;\nexport const MANY_SEP_IDX = 5 << BITS_FOR_OCCURRENCE_IDX;\nexport const AT_LEAST_ONE_SEP_IDX = 6 << BITS_FOR_OCCURRENCE_IDX;\n\n// this actually returns a number, but it is always used as a string (object prop key)\nexport function getKeyForAutomaticLookahead(\n  ruleIdx: number,\n  dslMethodIdx: number,\n  occurrence: number,\n): number {\n  return occurrence | dslMethodIdx | ruleIdx;\n}\n\nconst BITS_START_FOR_ALT_IDX = 32 - BITS_FOR_ALT_IDX;\n","import {\n  ILookaheadStrategy,\n  ILookaheadValidationError,\n  IOrAlt,\n  OptionalProductionType,\n  Rule,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { flatMap, isEmpty } from \"lodash-es\";\nimport { defaultGrammarValidatorErrorProvider } from \"../errors_public.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser/parser.js\";\nimport {\n  validateAmbiguousAlternationAlternatives,\n  validateEmptyOrAlternative,\n  validateNoLeftRecursion,\n  validateSomeNonEmptyLookaheadPath,\n} from \"./checks.js\";\nimport {\n  buildAlternativesLookAheadFunc,\n  buildLookaheadFuncForOptionalProd,\n  buildLookaheadFuncForOr,\n  buildSingleAlternativeLookaheadFunction,\n  getProdType,\n} from \"./lookahead.js\";\nimport { IParserDefinitionError } from \"./types.js\";\n\nexport class LLkLookaheadStrategy implements ILookaheadStrategy {\n  readonly maxLookahead: number;\n\n  constructor(options?: { maxLookahead?: number }) {\n    this.maxLookahead =\n      options?.maxLookahead ?? DEFAULT_PARSER_CONFIG.maxLookahead;\n  }\n\n  validate(options: {\n    rules: Rule[];\n    tokenTypes: TokenType[];\n    grammarName: string;\n  }): ILookaheadValidationError[] {\n    const leftRecursionErrors = this.validateNoLeftRecursion(options.rules);\n\n    if (isEmpty(leftRecursionErrors)) {\n      const emptyAltErrors = this.validateEmptyOrAlternatives(options.rules);\n      const ambiguousAltsErrors = this.validateAmbiguousAlternationAlternatives(\n        options.rules,\n        this.maxLookahead,\n      );\n      const emptyRepetitionErrors = this.validateSomeNonEmptyLookaheadPath(\n        options.rules,\n        this.maxLookahead,\n      );\n      const allErrors = [\n        ...leftRecursionErrors,\n        ...emptyAltErrors,\n        ...ambiguousAltsErrors,\n        ...emptyRepetitionErrors,\n      ];\n      return allErrors;\n    }\n    return leftRecursionErrors;\n  }\n\n  validateNoLeftRecursion(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateNoLeftRecursion(\n        currTopRule,\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateEmptyOrAlternatives(rules: Rule[]): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateEmptyOrAlternative(\n        currTopRule,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateAmbiguousAlternationAlternatives(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return flatMap(rules, (currTopRule) =>\n      validateAmbiguousAlternationAlternatives(\n        currTopRule,\n        maxLookahead,\n        defaultGrammarValidatorErrorProvider,\n      ),\n    );\n  }\n\n  validateSomeNonEmptyLookaheadPath(\n    rules: Rule[],\n    maxLookahead: number,\n  ): IParserDefinitionError[] {\n    return validateSomeNonEmptyLookaheadPath(\n      rules,\n      maxLookahead,\n      defaultGrammarValidatorErrorProvider,\n    );\n  }\n\n  buildLookaheadForAlternation(options: {\n    prodOccurrence: number;\n    rule: Rule;\n    maxLookahead: number;\n    hasPredicates: boolean;\n    dynamicTokensEnabled: boolean;\n  }): (orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\n    return buildLookaheadFuncForOr(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.hasPredicates,\n      options.dynamicTokensEnabled,\n      buildAlternativesLookAheadFunc,\n    );\n  }\n\n  buildLookaheadForOptional(options: {\n    prodOccurrence: number;\n    prodType: OptionalProductionType;\n    rule: Rule;\n    maxLookahead: number;\n    dynamicTokensEnabled: boolean;\n  }): () => boolean {\n    return buildLookaheadFuncForOptionalProd(\n      options.prodOccurrence,\n      options.rule,\n      options.maxLookahead,\n      options.dynamicTokensEnabled,\n      getProdType(options.prodType),\n      buildSingleAlternativeLookaheadFunction,\n    );\n  }\n}\n","import { forEach, has } from \"lodash-es\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\nimport {\n  ILookaheadStrategy,\n  IParserConfig,\n  OptionalProductionType,\n} from \"@chevrotain/types\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  getKeyForAutomaticLookahead,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  GAstVisitor,\n  getProductionDslName,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n} from \"@chevrotain/gast\";\nimport { LLkLookaheadStrategy } from \"../../grammar/llk_lookahead.js\";\n\n/**\n * Trait responsible for the lookahead related utilities and optimizations.\n */\nexport class LooksAhead {\n  maxLookahead: number;\n  lookAheadFuncsCache: any;\n  dynamicTokensEnabled: boolean;\n  lookaheadStrategy: ILookaheadStrategy;\n\n  initLooksAhead(config: IParserConfig) {\n    this.dynamicTokensEnabled = has(config, \"dynamicTokensEnabled\")\n      ? (config.dynamicTokensEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.dynamicTokensEnabled;\n\n    this.maxLookahead = has(config, \"maxLookahead\")\n      ? (config.maxLookahead as number) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.maxLookahead;\n\n    this.lookaheadStrategy = has(config, \"lookaheadStrategy\")\n      ? (config.lookaheadStrategy as ILookaheadStrategy) // assumes end user provides the correct config value/type\n      : new LLkLookaheadStrategy({ maxLookahead: this.maxLookahead });\n\n    this.lookAheadFuncsCache = new Map();\n  }\n\n  preComputeLookaheadFunctions(this: MixedInParser, rules: Rule[]): void {\n    forEach(rules, (currRule) => {\n      this.TRACE_INIT(`${currRule.name} Rule Lookahead`, () => {\n        const {\n          alternation,\n          repetition,\n          option,\n          repetitionMandatory,\n          repetitionMandatoryWithSeparator,\n          repetitionWithSeparator,\n        } = collectMethods(currRule);\n\n        forEach(alternation, (currProd) => {\n          const prodIdx = currProd.idx === 0 ? \"\" : currProd.idx;\n          this.TRACE_INIT(`${getProductionDslName(currProd)}${prodIdx}`, () => {\n            const laFunc = this.lookaheadStrategy.buildLookaheadForAlternation({\n              prodOccurrence: currProd.idx,\n              rule: currRule,\n              maxLookahead: currProd.maxLookahead || this.maxLookahead,\n              hasPredicates: currProd.hasPredicates,\n              dynamicTokensEnabled: this.dynamicTokensEnabled,\n            });\n\n            const key = getKeyForAutomaticLookahead(\n              this.fullRuleNameToShort[currRule.name],\n              OR_IDX,\n              currProd.idx,\n            );\n            this.setLaFuncCache(key, laFunc);\n          });\n        });\n\n        forEach(repetition, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_IDX,\n            \"Repetition\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(option, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            OPTION_IDX,\n            \"Option\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatory, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_IDX,\n            \"RepetitionMandatory\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionMandatoryWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            AT_LEAST_ONE_SEP_IDX,\n            \"RepetitionMandatoryWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n\n        forEach(repetitionWithSeparator, (currProd) => {\n          this.computeLookaheadFunc(\n            currRule,\n            currProd.idx,\n            MANY_SEP_IDX,\n            \"RepetitionWithSeparator\",\n            currProd.maxLookahead,\n            getProductionDslName(currProd),\n          );\n        });\n      });\n    });\n  }\n\n  computeLookaheadFunc(\n    this: MixedInParser,\n    rule: Rule,\n    prodOccurrence: number,\n    prodKey: number,\n    prodType: OptionalProductionType,\n    prodMaxLookahead: number | undefined,\n    dslMethodName: string,\n  ): void {\n    this.TRACE_INIT(\n      `${dslMethodName}${prodOccurrence === 0 ? \"\" : prodOccurrence}`,\n      () => {\n        const laFunc = this.lookaheadStrategy.buildLookaheadForOptional({\n          prodOccurrence,\n          rule,\n          maxLookahead: prodMaxLookahead || this.maxLookahead,\n          dynamicTokensEnabled: this.dynamicTokensEnabled,\n          prodType,\n        });\n        const key = getKeyForAutomaticLookahead(\n          this.fullRuleNameToShort[rule.name],\n          prodKey,\n          prodOccurrence,\n        );\n        this.setLaFuncCache(key, laFunc);\n      },\n    );\n  }\n\n  // this actually returns a number, but it is always used as a string (object prop key)\n  getKeyForAutomaticLookahead(\n    this: MixedInParser,\n    dslMethodIdx: number,\n    occurrence: number,\n  ): number {\n    const currRuleShortName: any = this.getLastExplicitRuleShortName();\n    return getKeyForAutomaticLookahead(\n      currRuleShortName,\n      dslMethodIdx,\n      occurrence,\n    );\n  }\n\n  getLaFuncFromCache(this: MixedInParser, key: number): Function {\n    return this.lookAheadFuncsCache.get(key);\n  }\n\n  /* istanbul ignore next */\n  setLaFuncCache(this: MixedInParser, key: number, value: Function): void {\n    this.lookAheadFuncsCache.set(key, value);\n  }\n}\n\nclass DslMethodsCollectorVisitor extends GAstVisitor {\n  public dslMethods: {\n    option: Option[];\n    alternation: Alternation[];\n    repetition: Repetition[];\n    repetitionWithSeparator: RepetitionWithSeparator[];\n    repetitionMandatory: RepetitionMandatory[];\n    repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n  } = {\n    option: [],\n    alternation: [],\n    repetition: [],\n    repetitionWithSeparator: [],\n    repetitionMandatory: [],\n    repetitionMandatoryWithSeparator: [],\n  };\n\n  reset() {\n    this.dslMethods = {\n      option: [],\n      alternation: [],\n      repetition: [],\n      repetitionWithSeparator: [],\n      repetitionMandatory: [],\n      repetitionMandatoryWithSeparator: [],\n    };\n  }\n\n  public visitOption(option: Option): void {\n    this.dslMethods.option.push(option);\n  }\n\n  public visitRepetitionWithSeparator(manySep: RepetitionWithSeparator): void {\n    this.dslMethods.repetitionWithSeparator.push(manySep);\n  }\n\n  public visitRepetitionMandatory(atLeastOne: RepetitionMandatory): void {\n    this.dslMethods.repetitionMandatory.push(atLeastOne);\n  }\n\n  public visitRepetitionMandatoryWithSeparator(\n    atLeastOneSep: RepetitionMandatoryWithSeparator,\n  ): void {\n    this.dslMethods.repetitionMandatoryWithSeparator.push(atLeastOneSep);\n  }\n\n  public visitRepetition(many: Repetition): void {\n    this.dslMethods.repetition.push(many);\n  }\n\n  public visitAlternation(or: Alternation): void {\n    this.dslMethods.alternation.push(or);\n  }\n}\n\nconst collectorVisitor = new DslMethodsCollectorVisitor();\nexport function collectMethods(rule: Rule): {\n  option: Option[];\n  alternation: Alternation[];\n  repetition: Repetition[];\n  repetitionWithSeparator: RepetitionWithSeparator[];\n  repetitionMandatory: RepetitionMandatory[];\n  repetitionMandatoryWithSeparator: RepetitionMandatoryWithSeparator[];\n} {\n  collectorVisitor.reset();\n  rule.accept(collectorVisitor);\n  const dslMethods = collectorVisitor.dslMethods;\n  // avoid uncleaned references\n  collectorVisitor.reset();\n  return <any>dslMethods;\n}\n","import { CstNode, CstNodeLocation, IToken } from \"@chevrotain/types\";\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationOnlyOffset(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: Required<Pick<IToken, \"startOffset\" | \"endOffset\">>,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (both start/end offsets exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n  // Once the startOffset has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n  }\n}\n\n/**\n * This nodeLocation tracking is not efficient and should only be used\n * when error recovery is enabled or the Token Vector contains virtual Tokens\n * (e.g, Python Indent/Outdent)\n * As it executes the calculation for every single terminal/nonTerminal\n * and does not rely on the fact the token vector is **sorted**\n */\nexport function setNodeLocationFull(\n  currNodeLocation: CstNodeLocation,\n  newLocationInfo: CstNodeLocation,\n): void {\n  // First (valid) update for this cst node\n  if (isNaN(currNodeLocation.startOffset) === true) {\n    // assumption1: Token location information is either NaN or a valid number\n    // assumption2: Token location information is fully valid if it exist\n    // (all start/end props exist and are numbers).\n    currNodeLocation.startOffset = newLocationInfo.startOffset;\n    currNodeLocation.startColumn = newLocationInfo.startColumn;\n    currNodeLocation.startLine = newLocationInfo.startLine;\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n  // Once the start props has been updated with a valid number it should never receive\n  // any farther updates as the Token vector is sorted.\n  // We still have to check this this condition for every new possible location info\n  // because with error recovery enabled we may encounter invalid tokens (NaN location props)\n  else if (currNodeLocation.endOffset! < newLocationInfo.endOffset! === true) {\n    currNodeLocation.endOffset = newLocationInfo.endOffset;\n    currNodeLocation.endColumn = newLocationInfo.endColumn;\n    currNodeLocation.endLine = newLocationInfo.endLine;\n  }\n}\n\nexport function addTerminalToCst(\n  node: CstNode,\n  token: IToken,\n  tokenTypeName: string,\n): void {\n  if (node.children[tokenTypeName] === undefined) {\n    node.children[tokenTypeName] = [token];\n  } else {\n    node.children[tokenTypeName].push(token);\n  }\n}\n\nexport function addNoneTerminalToCst(\n  node: CstNode,\n  ruleName: string,\n  ruleResult: any,\n): void {\n  if (node.children[ruleName] === undefined) {\n    node.children[ruleName] = [ruleResult];\n  } else {\n    node.children[ruleName].push(ruleResult);\n  }\n}\n","const NAME = \"name\";\n\nexport function defineNameProp(obj: {}, nameValue: string): void {\n  Object.defineProperty(obj, NAME, {\n    enumerable: false,\n    configurable: true,\n    writable: false,\n    value: nameValue,\n  });\n}\n","import {\n  compact,\n  filter,\n  forEach,\n  isArray,\n  isEmpty,\n  isFunction,\n  isUndefined,\n  keys,\n  map,\n} from \"lodash-es\";\nimport { defineNameProp } from \"../../lang/lang_extensions.js\";\nimport { CstNode, ICstVisitor } from \"@chevrotain/types\";\n\nexport function defaultVisit<IN>(ctx: any, param: IN): void {\n  const childrenNames = keys(ctx);\n  const childrenNamesLength = childrenNames.length;\n  for (let i = 0; i < childrenNamesLength; i++) {\n    const currChildName = childrenNames[i];\n    const currChildArray = ctx[currChildName];\n    const currChildArrayLength = currChildArray.length;\n    for (let j = 0; j < currChildArrayLength; j++) {\n      const currChild: any = currChildArray[j];\n      // distinction between Tokens Children and CstNode children\n      if (currChild.tokenTypeIdx === undefined) {\n        this[currChild.name](currChild.children, param);\n      }\n    }\n  }\n  // defaultVisit does not support generic out param\n}\n\nexport function createBaseSemanticVisitorConstructor(\n  grammarName: string,\n  ruleNames: string[],\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemantics\");\n\n  const semanticProto = {\n    visit: function (cstNode: CstNode | CstNode[], param: any) {\n      // enables writing more concise visitor methods when CstNode has only a single child\n      if (isArray(cstNode)) {\n        // A CST Node's children dictionary can never have empty arrays as values\n        // If a key is defined there will be at least one element in the corresponding value array.\n        cstNode = cstNode[0];\n      }\n\n      // enables passing optional CstNodes concisely.\n      if (isUndefined(cstNode)) {\n        return undefined;\n      }\n\n      return this[cstNode.name](cstNode.children, param);\n    },\n\n    validateVisitor: function () {\n      const semanticDefinitionErrors = validateVisitor(this, ruleNames);\n      if (!isEmpty(semanticDefinitionErrors)) {\n        const errorMessages = map(\n          semanticDefinitionErrors,\n          (currDefError) => currDefError.msg,\n        );\n        throw Error(\n          `Errors Detected in CST Visitor <${this.constructor.name}>:\\n\\t` +\n            `${errorMessages.join(\"\\n\\n\").replace(/\\n/g, \"\\n\\t\")}`,\n        );\n      }\n    },\n  };\n\n  derivedConstructor.prototype = semanticProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  derivedConstructor._RULE_NAMES = ruleNames;\n\n  return derivedConstructor;\n}\n\nexport function createBaseVisitorConstructorWithDefaults(\n  grammarName: string,\n  ruleNames: string[],\n  baseConstructor: Function,\n): {\n  new (...args: any[]): ICstVisitor<any, any>;\n} {\n  const derivedConstructor: any = function () {};\n\n  // can be overwritten according to:\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/\n  // name?redirectlocale=en-US&redirectslug=JavaScript%2FReference%2FGlobal_Objects%2FFunction%2Fname\n  defineNameProp(derivedConstructor, grammarName + \"BaseSemanticsWithDefaults\");\n\n  const withDefaultsProto = Object.create(baseConstructor.prototype);\n  forEach(ruleNames, (ruleName) => {\n    withDefaultsProto[ruleName] = defaultVisit;\n  });\n\n  derivedConstructor.prototype = withDefaultsProto;\n  derivedConstructor.prototype.constructor = derivedConstructor;\n\n  return derivedConstructor;\n}\n\nexport enum CstVisitorDefinitionError {\n  REDUNDANT_METHOD,\n  MISSING_METHOD,\n}\n\nexport interface IVisitorDefinitionError {\n  msg: string;\n  type: CstVisitorDefinitionError;\n  methodName: string;\n}\n\nexport function validateVisitor(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingErrors = validateMissingCstMethods(visitorInstance, ruleNames);\n\n  return missingErrors;\n}\n\nexport function validateMissingCstMethods(\n  visitorInstance: ICstVisitor<unknown, unknown>,\n  ruleNames: string[],\n): IVisitorDefinitionError[] {\n  const missingRuleNames = filter(ruleNames, (currRuleName) => {\n    return isFunction((visitorInstance as any)[currRuleName]) === false;\n  });\n\n  const errors: IVisitorDefinitionError[] = map(\n    missingRuleNames,\n    (currRuleName) => {\n      return {\n        msg: `Missing visitor method: <${currRuleName}> on ${<any>(\n          visitorInstance.constructor.name\n        )} CST Visitor.`,\n        type: CstVisitorDefinitionError.MISSING_METHOD,\n        methodName: currRuleName,\n      };\n    },\n  );\n\n  return compact<IVisitorDefinitionError>(errors);\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  CstNode,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IProduction,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  forEach,\n  has,\n  isArray,\n  isFunction,\n  last as peek,\n  some,\n} from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  Alternation,\n  Alternative,\n  NonTerminal,\n  Option,\n  Repetition,\n  RepetitionMandatory,\n  RepetitionMandatoryWithSeparator,\n  RepetitionWithSeparator,\n  Rule,\n  Terminal,\n} from \"@chevrotain/gast\";\nimport { Lexer } from \"../../../scan/lexer_public.js\";\nimport {\n  augmentTokenTypes,\n  hasShortKeyProperty,\n} from \"../../../scan/tokens.js\";\nimport {\n  createToken,\n  createTokenInstance,\n} from \"../../../scan/tokens_public.js\";\nimport { END_OF_FILE } from \"../parser.js\";\nimport { BITS_FOR_OCCURRENCE_IDX } from \"../../grammar/keys.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\ntype ProdWithDef = IProduction & { definition?: IProduction[] };\nconst RECORDING_NULL_OBJECT = {\n  description: \"This Object indicates the Parser is during Recording Phase\",\n};\nObject.freeze(RECORDING_NULL_OBJECT);\n\nconst HANDLE_SEPARATOR = true;\nconst MAX_METHOD_IDX = Math.pow(2, BITS_FOR_OCCURRENCE_IDX) - 1;\n\nconst RFT = createToken({ name: \"RECORDING_PHASE_TOKEN\", pattern: Lexer.NA });\naugmentTokenTypes([RFT]);\nconst RECORDING_PHASE_TOKEN = createTokenInstance(\n  RFT,\n  \"This IToken indicates the Parser is in Recording Phase\\n\\t\" +\n    \"\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  // Using \"-1\" instead of NaN (as in EOF) because an actual number is less likely to\n  // cause errors if the output of LA or CONSUME would be (incorrectly) used during the recording phase.\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n  -1,\n);\nObject.freeze(RECORDING_PHASE_TOKEN);\n\nconst RECORDING_PHASE_CSTNODE: CstNode = {\n  name:\n    \"This CSTNode indicates the Parser is in Recording Phase\\n\\t\" +\n    \"See: https://chevrotain.io/docs/guide/internals.html#grammar-recording for details\",\n  children: {},\n};\n\n/**\n * This trait handles the creation of the GAST structure for Chevrotain Grammars\n */\nexport class GastRecorder {\n  recordingProdStack: ProdWithDef[];\n  RECORDING_PHASE: boolean;\n\n  initGastRecorder(this: MixedInParser, config: IParserConfig): void {\n    this.recordingProdStack = [];\n    this.RECORDING_PHASE = false;\n  }\n\n  enableRecording(this: MixedInParser): void {\n    this.RECORDING_PHASE = true;\n\n    this.TRACE_INIT(\"Enable Recording\", () => {\n      /**\n       * Warning Dark Voodoo Magic upcoming!\n       * We are \"replacing\" the public parsing DSL methods API\n       * With **new** alternative implementations on the Parser **instance**\n       *\n       * So far this is the only way I've found to avoid performance regressions during parsing time.\n       * - Approx 30% performance regression was measured on Chrome 75 Canary when attempting to replace the \"internal\"\n       *   implementations directly instead.\n       */\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        this[`CONSUME${idx}` as \"CONSUME\"] = function (arg1, arg2) {\n          return this.consumeInternalRecord(arg1, i, arg2);\n        };\n        this[`SUBRULE${idx}` as \"SUBRULE\"] = function (arg1, arg2) {\n          return this.subruleInternalRecord(arg1, i, arg2) as any;\n        };\n        this[`OPTION${idx}` as \"OPTION\"] = function (arg1) {\n          return this.optionInternalRecord(arg1, i);\n        };\n        this[`OR${idx}` as \"OR\"] = function (arg1) {\n          return this.orInternalRecord(arg1, i);\n        };\n        this[`MANY${idx}` as \"MANY\"] = function (arg1) {\n          this.manyInternalRecord(i, arg1);\n        };\n        this[`MANY_SEP${idx}` as \"MANY_SEP\"] = function (arg1) {\n          this.manySepFirstInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE${idx}` as \"AT_LEAST_ONE\"] = function (arg1) {\n          this.atLeastOneInternalRecord(i, arg1);\n        };\n        this[`AT_LEAST_ONE_SEP${idx}` as \"AT_LEAST_ONE_SEP\"] = function (arg1) {\n          this.atLeastOneSepFirstInternalRecord(i, arg1);\n        };\n      }\n\n      // DSL methods with the idx(suffix) as an argument\n      this[`consume`] = function (idx, arg1, arg2) {\n        return this.consumeInternalRecord(arg1, idx, arg2);\n      };\n      this[`subrule`] = function (idx, arg1, arg2) {\n        return this.subruleInternalRecord(arg1, idx, arg2) as any;\n      };\n      this[`option`] = function (idx, arg1) {\n        return this.optionInternalRecord(arg1, idx);\n      };\n      this[`or`] = function (idx, arg1) {\n        return this.orInternalRecord(arg1, idx);\n      };\n      this[`many`] = function (idx, arg1) {\n        this.manyInternalRecord(idx, arg1);\n      };\n      this[`atLeastOne`] = function (idx, arg1) {\n        this.atLeastOneInternalRecord(idx, arg1);\n      };\n\n      this.ACTION = this.ACTION_RECORD;\n      this.BACKTRACK = this.BACKTRACK_RECORD;\n      this.LA = this.LA_RECORD;\n    });\n  }\n\n  disableRecording(this: MixedInParser) {\n    this.RECORDING_PHASE = false;\n    // By deleting these **instance** properties, any future invocation\n    // will be deferred to the original methods on the **prototype** object\n    // This seems to get rid of any incorrect optimizations that V8 may\n    // do during the recording phase.\n    this.TRACE_INIT(\"Deleting Recording methods\", () => {\n      const that: any = this;\n\n      for (let i = 0; i < 10; i++) {\n        const idx = i > 0 ? i : \"\";\n        delete that[`CONSUME${idx}`];\n        delete that[`SUBRULE${idx}`];\n        delete that[`OPTION${idx}`];\n        delete that[`OR${idx}`];\n        delete that[`MANY${idx}`];\n        delete that[`MANY_SEP${idx}`];\n        delete that[`AT_LEAST_ONE${idx}`];\n        delete that[`AT_LEAST_ONE_SEP${idx}`];\n      }\n\n      delete that[`consume`];\n      delete that[`subrule`];\n      delete that[`option`];\n      delete that[`or`];\n      delete that[`many`];\n      delete that[`atLeastOne`];\n\n      delete that.ACTION;\n      delete that.BACKTRACK;\n      delete that.LA;\n    });\n  }\n\n  //   Parser methods are called inside an ACTION?\n  //   Maybe try/catch/finally on ACTIONS while disabling the recorders state changes?\n  // @ts-expect-error -- noop place holder\n  ACTION_RECORD<T>(this: MixedInParser, impl: () => T): T {\n    // NO-OP during recording\n  }\n\n  // Executing backtracking logic will break our recording logic assumptions\n  BACKTRACK_RECORD<T>(\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return () => true;\n  }\n\n  // LA is part of the official API and may be used for custom lookahead logic\n  // by end users who may forget to wrap it in ACTION or inside a GATE\n  LA_RECORD(howMuch: number): IToken {\n    // We cannot use the RECORD_PHASE_TOKEN here because someone may depend\n    // On LA return EOF at the end of the input so an infinite loop may occur.\n    return END_OF_FILE;\n  }\n\n  topLevelRuleRecord(name: string, def: Function): Rule {\n    try {\n      const newTopLevelRule = new Rule({ definition: [], name: name });\n      newTopLevelRule.name = name;\n      this.recordingProdStack.push(newTopLevelRule);\n      def.call(this);\n      this.recordingProdStack.pop();\n      return newTopLevelRule;\n    } catch (originalError) {\n      if (originalError.KNOWN_RECORDER_ERROR !== true) {\n        try {\n          originalError.message =\n            originalError.message +\n            '\\n\\t This error was thrown during the \"grammar recording phase\" For more info see:\\n\\t' +\n            \"https://chevrotain.io/docs/guide/internals.html#grammar-recording\";\n        } catch (mutabilityError) {\n          // We may not be able to modify the original error object\n          throw originalError;\n        }\n      }\n      throw originalError;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternalRecord<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT {\n    return recordProd.call(this, Option, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    recordProd.call(this, RepetitionMandatory, actionORMethodDef, occurrence);\n  }\n\n  atLeastOneSepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionMandatoryWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  manyInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    recordProd.call(this, Repetition, actionORMethodDef, occurrence);\n  }\n\n  manySepFirstInternalRecord<OUT>(\n    this: MixedInParser,\n    occurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    recordProd.call(\n      this,\n      RepetitionWithSeparator,\n      options,\n      occurrence,\n      HANDLE_SEPARATOR,\n    );\n  }\n\n  orInternalRecord<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    return recordOrProd.call(this, altsOrOpts, occurrence);\n  }\n\n  subruleInternalRecord<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    occurrence: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R | CstNode {\n    assertMethodIdxIsValid(occurrence);\n    if (!ruleToCall || has(ruleToCall, \"ruleName\") === false) {\n      const error: any = new Error(\n        `<SUBRULE${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a Parser method reference but got: <${JSON.stringify(\n            ruleToCall,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n\n    const prevProd: any = peek(this.recordingProdStack);\n    const ruleName = ruleToCall.ruleName;\n    const newNoneTerminal = new NonTerminal({\n      idx: occurrence,\n      nonTerminalName: ruleName,\n      label: options?.LABEL,\n      // The resolving of the `referencedRule` property will be done once all the Rule's GASTs have been created\n      referencedRule: undefined,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return this.outputCst\n      ? RECORDING_PHASE_CSTNODE\n      : <any>RECORDING_NULL_OBJECT;\n  }\n\n  consumeInternalRecord(\n    this: MixedInParser,\n    tokType: TokenType,\n    occurrence: number,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    assertMethodIdxIsValid(occurrence);\n    if (!hasShortKeyProperty(tokType)) {\n      const error: any = new Error(\n        `<CONSUME${getIdxSuffix(occurrence)}> argument is invalid` +\n          ` expecting a TokenType reference but got: <${JSON.stringify(\n            tokType,\n          )}>` +\n          `\\n inside top level rule: <${\n            (<Rule>this.recordingProdStack[0]).name\n          }>`,\n      );\n      error.KNOWN_RECORDER_ERROR = true;\n      throw error;\n    }\n    const prevProd: any = peek(this.recordingProdStack);\n    const newNoneTerminal = new Terminal({\n      idx: occurrence,\n      terminalType: tokType,\n      label: options?.LABEL,\n    });\n    prevProd.definition.push(newNoneTerminal);\n\n    return RECORDING_PHASE_TOKEN;\n  }\n}\n\nfunction recordProd(\n  prodConstructor: any,\n  mainProdArg: any,\n  occurrence: number,\n  handleSep: boolean = false,\n): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  const grammarAction = isFunction(mainProdArg) ? mainProdArg : mainProdArg.DEF;\n\n  const newProd = new prodConstructor({ definition: [], idx: occurrence });\n  if (handleSep) {\n    newProd.separator = mainProdArg.SEP;\n  }\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  this.recordingProdStack.push(newProd);\n  grammarAction.call(this);\n  prevProd.definition.push(newProd);\n  this.recordingProdStack.pop();\n\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction recordOrProd(mainProdArg: any, occurrence: number): any {\n  assertMethodIdxIsValid(occurrence);\n  const prevProd: any = peek(this.recordingProdStack);\n  // Only an array of alternatives\n  const hasOptions = isArray(mainProdArg) === false;\n  const alts: IOrAlt<unknown>[] =\n    hasOptions === false ? mainProdArg : mainProdArg.DEF;\n\n  const newOrProd = new Alternation({\n    definition: [],\n    idx: occurrence,\n    ignoreAmbiguities: hasOptions && mainProdArg.IGNORE_AMBIGUITIES === true,\n  });\n  if (has(mainProdArg, \"MAX_LOOKAHEAD\")) {\n    newOrProd.maxLookahead = mainProdArg.MAX_LOOKAHEAD;\n  }\n\n  const hasPredicates = some(alts, (currAlt: any) => isFunction(currAlt.GATE));\n  newOrProd.hasPredicates = hasPredicates;\n\n  prevProd.definition.push(newOrProd);\n\n  forEach(alts, (currAlt) => {\n    const currAltFlat = new Alternative({ definition: [] });\n    newOrProd.definition.push(currAltFlat);\n    if (has(currAlt, \"IGNORE_AMBIGUITIES\")) {\n      currAltFlat.ignoreAmbiguities = currAlt.IGNORE_AMBIGUITIES as boolean; // assumes end user provides the correct config value/type\n    }\n    // **implicit** ignoreAmbiguities due to usage of gate\n    else if (has(currAlt, \"GATE\")) {\n      currAltFlat.ignoreAmbiguities = true;\n    }\n    this.recordingProdStack.push(currAltFlat);\n    currAlt.ALT.call(this);\n    this.recordingProdStack.pop();\n  });\n  return RECORDING_NULL_OBJECT;\n}\n\nfunction getIdxSuffix(idx: number): string {\n  return idx === 0 ? \"\" : `${idx}`;\n}\n\nfunction assertMethodIdxIsValid(idx: number): void {\n  if (idx < 0 || idx > MAX_METHOD_IDX) {\n    const error: any = new Error(\n      // The stack trace will contain all the needed details\n      `Invalid DSL Method idx value: <${idx}>\\n\\t` +\n        `Idx value must be a none negative value smaller than ${\n          MAX_METHOD_IDX + 1\n        }`,\n    );\n    error.KNOWN_RECORDER_ERROR = true;\n    throw error;\n  }\n}\n","import { clone, forEach, has, isEmpty, map, values } from \"lodash-es\";\nimport { toFastProperties } from \"@chevrotain/utils\";\nimport { computeAllProdsFollows } from \"../grammar/follow.js\";\nimport { createTokenInstance, EOF } from \"../../scan/tokens_public.js\";\nimport {\n  defaultGrammarValidatorErrorProvider,\n  defaultParserErrorProvider,\n} from \"../errors_public.js\";\nimport {\n  resolveGrammar,\n  validateGrammar,\n} from \"../grammar/gast/gast_resolver_public.js\";\nimport {\n  CstNode,\n  IParserConfig,\n  IRecognitionException,\n  IRuleConfig,\n  IToken,\n  TokenType,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport { Recoverable } from \"./traits/recoverable.js\";\nimport { LooksAhead } from \"./traits/looksahead.js\";\nimport { TreeBuilder } from \"./traits/tree_builder.js\";\nimport { LexerAdapter } from \"./traits/lexer_adapter.js\";\nimport { RecognizerApi } from \"./traits/recognizer_api.js\";\nimport { RecognizerEngine } from \"./traits/recognizer_engine.js\";\n\nimport { ErrorHandler } from \"./traits/error_handler.js\";\nimport { MixedInParser } from \"./traits/parser_traits.js\";\nimport { ContentAssist } from \"./traits/context_assist.js\";\nimport { GastRecorder } from \"./traits/gast_recorder.js\";\nimport { PerformanceTracer } from \"./traits/perf_tracer.js\";\nimport { applyMixins } from \"./utils/apply_mixins.js\";\nimport { IParserDefinitionError } from \"../grammar/types.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { IParserConfigInternal, ParserMethodInternal } from \"./types.js\";\nimport { validateLookahead } from \"../grammar/checks.js\";\n\nexport const END_OF_FILE = createTokenInstance(\n  EOF,\n  \"\",\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n  NaN,\n);\nObject.freeze(END_OF_FILE);\n\nexport type TokenMatcher = (token: IToken, tokType: TokenType) => boolean;\n\nexport const DEFAULT_PARSER_CONFIG: Required<\n  Omit<IParserConfigInternal, \"lookaheadStrategy\">\n> = Object.freeze({\n  recoveryEnabled: false,\n  maxLookahead: 3,\n  dynamicTokensEnabled: false,\n  outputCst: true,\n  errorMessageProvider: defaultParserErrorProvider,\n  nodeLocationTracking: \"none\",\n  traceInitPerf: false,\n  skipValidations: false,\n});\n\nexport const DEFAULT_RULE_CONFIG: Required<IRuleConfig<any>> = Object.freeze({\n  recoveryValueFunc: () => undefined,\n  resyncEnabled: true,\n});\n\nexport enum ParserDefinitionErrorType {\n  INVALID_RULE_NAME = 0,\n  DUPLICATE_RULE_NAME = 1,\n  INVALID_RULE_OVERRIDE = 2,\n  DUPLICATE_PRODUCTIONS = 3,\n  UNRESOLVED_SUBRULE_REF = 4,\n  LEFT_RECURSION = 5,\n  NONE_LAST_EMPTY_ALT = 6,\n  AMBIGUOUS_ALTS = 7,\n  CONFLICT_TOKENS_RULES_NAMESPACE = 8,\n  INVALID_TOKEN_NAME = 9,\n  NO_NON_EMPTY_LOOKAHEAD = 10,\n  AMBIGUOUS_PREFIX_ALTS = 11,\n  TOO_MANY_ALTS = 12,\n  CUSTOM_LOOKAHEAD_VALIDATION = 13,\n}\n\nexport interface IParserDuplicatesDefinitionError\n  extends IParserDefinitionError {\n  dslName: string;\n  occurrence: number;\n  parameter?: string;\n}\n\nexport interface IParserEmptyAlternativeDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number;\n  alternative: number;\n}\n\nexport interface IParserAmbiguousAlternativesDefinitionError\n  extends IParserDefinitionError {\n  occurrence: number | string;\n  alternatives: number[];\n}\n\nexport interface IParserUnresolvedRefDefinitionError\n  extends IParserDefinitionError {\n  unresolvedRefName: string;\n}\n\nexport interface IParserState {\n  errors: IRecognitionException[];\n  lexerState: any;\n  RULE_STACK: number[];\n  CST_STACK: CstNode[];\n}\n\nexport type Predicate = () => boolean;\n\nexport function EMPTY_ALT(): () => undefined;\nexport function EMPTY_ALT<T>(value: T): () => T;\nexport function EMPTY_ALT(value: any = undefined) {\n  return function () {\n    return value;\n  };\n}\n\nexport class Parser {\n  // Set this flag to true if you don't want the Parser to throw error when problems in it's definition are detected.\n  // (normally during the parser's constructor).\n  // This is a design time flag, it will not affect the runtime error handling of the parser, just design time errors,\n  // for example: duplicate rule names, referencing an unresolved subrule, ect...\n  // This flag should not be enabled during normal usage, it is used in special situations, for example when\n  // needing to display the parser definition errors in some GUI(online playground).\n  static DEFER_DEFINITION_ERRORS_HANDLING: boolean = false;\n\n  /**\n   *  @deprecated use the **instance** method with the same name instead\n   */\n  static performSelfAnalysis(parserInstance: Parser): void {\n    throw Error(\n      \"The **static** `performSelfAnalysis` method has been deprecated.\" +\n        \"\\t\\nUse the **instance** method with the same name instead.\",\n    );\n  }\n\n  public performSelfAnalysis(this: MixedInParser): void {\n    this.TRACE_INIT(\"performSelfAnalysis\", () => {\n      let defErrorsMsgs;\n\n      this.selfAnalysisDone = true;\n      const className = this.className;\n\n      this.TRACE_INIT(\"toFastProps\", () => {\n        // Without this voodoo magic the parser would be x3-x4 slower\n        // It seems it is better to invoke `toFastProperties` **before**\n        // Any manipulations of the `this` object done during the recording phase.\n        toFastProperties(this);\n      });\n\n      this.TRACE_INIT(\"Grammar Recording\", () => {\n        try {\n          this.enableRecording();\n          // Building the GAST\n          forEach(this.definedRulesNames, (currRuleName) => {\n            const wrappedRule = (this as any)[\n              currRuleName\n            ] as ParserMethodInternal<unknown[], unknown>;\n            const originalGrammarAction = wrappedRule[\"originalGrammarAction\"];\n            let recordedRuleGast!: Rule;\n            this.TRACE_INIT(`${currRuleName} Rule`, () => {\n              recordedRuleGast = this.topLevelRuleRecord(\n                currRuleName,\n                originalGrammarAction,\n              );\n            });\n            this.gastProductionsCache[currRuleName] = recordedRuleGast;\n          });\n        } finally {\n          this.disableRecording();\n        }\n      });\n\n      let resolverErrors: IParserDefinitionError[] = [];\n      this.TRACE_INIT(\"Grammar Resolving\", () => {\n        resolverErrors = resolveGrammar({\n          rules: values(this.gastProductionsCache),\n        });\n        this.definitionErrors = this.definitionErrors.concat(resolverErrors);\n      });\n\n      this.TRACE_INIT(\"Grammar Validations\", () => {\n        // only perform additional grammar validations IFF no resolving errors have occurred.\n        // as unresolved grammar may lead to unhandled runtime exceptions in the follow up validations.\n        if (isEmpty(resolverErrors) && this.skipValidations === false) {\n          const validationErrors = validateGrammar({\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            errMsgProvider: defaultGrammarValidatorErrorProvider,\n            grammarName: className,\n          });\n          const lookaheadValidationErrors = validateLookahead({\n            lookaheadStrategy: this.lookaheadStrategy,\n            rules: values(this.gastProductionsCache),\n            tokenTypes: values(this.tokensMap),\n            grammarName: className,\n          });\n          this.definitionErrors = this.definitionErrors.concat(\n            validationErrors,\n            lookaheadValidationErrors,\n          );\n        }\n      });\n\n      // this analysis may fail if the grammar is not perfectly valid\n      if (isEmpty(this.definitionErrors)) {\n        // The results of these computations are not needed unless error recovery is enabled.\n        if (this.recoveryEnabled) {\n          this.TRACE_INIT(\"computeAllProdsFollows\", () => {\n            const allFollows = computeAllProdsFollows(\n              values(this.gastProductionsCache),\n            );\n            this.resyncFollows = allFollows;\n          });\n        }\n\n        this.TRACE_INIT(\"ComputeLookaheadFunctions\", () => {\n          this.lookaheadStrategy.initialize?.({\n            rules: values(this.gastProductionsCache),\n          });\n          this.preComputeLookaheadFunctions(values(this.gastProductionsCache));\n        });\n      }\n\n      if (\n        !Parser.DEFER_DEFINITION_ERRORS_HANDLING &&\n        !isEmpty(this.definitionErrors)\n      ) {\n        defErrorsMsgs = map(\n          this.definitionErrors,\n          (defError) => defError.message,\n        );\n        throw new Error(\n          `Parser Definition Errors detected:\\n ${defErrorsMsgs.join(\n            \"\\n-------------------------------\\n\",\n          )}`,\n        );\n      }\n    });\n  }\n\n  definitionErrors: IParserDefinitionError[] = [];\n  selfAnalysisDone = false;\n  protected skipValidations: boolean;\n\n  constructor(tokenVocabulary: TokenVocabulary, config: IParserConfig) {\n    const that: MixedInParser = this as any;\n    that.initErrorHandler(config);\n    that.initLexerAdapter();\n    that.initLooksAhead(config);\n    that.initRecognizerEngine(tokenVocabulary, config);\n    that.initRecoverable(config);\n    that.initTreeBuilder(config);\n    that.initContentAssist();\n    that.initGastRecorder(config);\n    that.initPerformanceTracer(config);\n\n    if (has(config, \"ignoredIssues\")) {\n      throw new Error(\n        \"The <ignoredIssues> IParserConfig property has been deprecated.\\n\\t\" +\n          \"Please use the <IGNORE_AMBIGUITIES> flag on the relevant DSL method instead.\\n\\t\" +\n          \"See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#IGNORING_AMBIGUITIES\\n\\t\" +\n          \"For further details.\",\n      );\n    }\n\n    this.skipValidations = has(config, \"skipValidations\")\n      ? (config.skipValidations as boolean) // casting assumes the end user passing the correct type\n      : DEFAULT_PARSER_CONFIG.skipValidations;\n  }\n}\n\napplyMixins(Parser, [\n  Recoverable,\n  LooksAhead,\n  TreeBuilder,\n  LexerAdapter,\n  RecognizerEngine,\n  RecognizerApi,\n  ErrorHandler,\n  ContentAssist,\n  GastRecorder,\n  PerformanceTracer,\n]);\n\nexport class CstParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = true;\n    super(tokenVocabulary, configClone);\n  }\n}\n\nexport class EmbeddedActionsParser extends Parser {\n  constructor(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfigInternal = DEFAULT_PARSER_CONFIG,\n  ) {\n    const configClone = clone(config);\n    configClone.outputCst = false;\n    super(tokenVocabulary, configClone);\n  }\n}\n","export function applyMixins(derivedCtor: any, baseCtors: any[]) {\n  baseCtors.forEach((baseCtor) => {\n    const baseProto = baseCtor.prototype;\n    Object.getOwnPropertyNames(baseProto).forEach((propName) => {\n      if (propName === \"constructor\") {\n        return;\n      }\n\n      const basePropDescriptor = Object.getOwnPropertyDescriptor(\n        baseProto,\n        propName,\n      );\n      // Handle Accessors\n      if (\n        basePropDescriptor &&\n        (basePropDescriptor.get || basePropDescriptor.set)\n      ) {\n        Object.defineProperty(\n          derivedCtor.prototype,\n          propName,\n          basePropDescriptor,\n        );\n      } else {\n        derivedCtor.prototype[propName] = baseCtor.prototype[propName];\n      }\n    });\n  });\n}\n","import {\n  addNoneTerminalToCst,\n  addTerminalToCst,\n  setNodeLocationFull,\n  setNodeLocationOnlyOffset,\n} from \"../../cst/cst.js\";\nimport { has, isUndefined, keys, noop } from \"lodash-es\";\nimport {\n  createBaseSemanticVisitorConstructor,\n  createBaseVisitorConstructorWithDefaults,\n} from \"../../cst/cst_visitor.js\";\nimport {\n  CstNode,\n  CstNodeLocation,\n  ICstVisitor,\n  IParserConfig,\n  IToken,\n  nodeLocationTrackingOptions,\n} from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * This trait is responsible for the CST building logic.\n */\nexport class TreeBuilder {\n  outputCst: boolean;\n  CST_STACK: CstNode[];\n  baseCstVisitorConstructor: Function;\n  baseCstVisitorWithDefaultsConstructor: Function;\n\n  // dynamically assigned Methods\n  setNodeLocationFromNode: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  setNodeLocationFromToken: (\n    nodeLocation: CstNodeLocation,\n    locationInformation: CstNodeLocation,\n  ) => void;\n  cstPostRule: (this: MixedInParser, ruleCstNode: CstNode) => void;\n\n  setInitialNodeLocation: (cstNode: CstNode) => void;\n  nodeLocationTracking: nodeLocationTrackingOptions;\n\n  initTreeBuilder(this: MixedInParser, config: IParserConfig) {\n    this.CST_STACK = [];\n\n    // outputCst is no longer exposed/defined in the pubic API\n    this.outputCst = (config as any).outputCst;\n\n    this.nodeLocationTracking = has(config, \"nodeLocationTracking\")\n      ? (config.nodeLocationTracking as nodeLocationTrackingOptions) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.nodeLocationTracking;\n\n    if (!this.outputCst) {\n      this.cstInvocationStateUpdate = noop;\n      this.cstFinallyStateUpdate = noop;\n      this.cstPostTerminal = noop;\n      this.cstPostNonTerminal = noop;\n      this.cstPostRule = noop;\n    } else {\n      if (/full/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = setNodeLocationFull;\n          this.setNodeLocationFromNode = setNodeLocationFull;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleFull;\n          this.setInitialNodeLocation = this.setInitialNodeLocationFullRegular;\n        }\n      } else if (/onlyOffset/i.test(this.nodeLocationTracking)) {\n        if (this.recoveryEnabled) {\n          this.setNodeLocationFromToken = <any>setNodeLocationOnlyOffset;\n          this.setNodeLocationFromNode = <any>setNodeLocationOnlyOffset;\n          this.cstPostRule = noop;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRecovery;\n        } else {\n          this.setNodeLocationFromToken = noop;\n          this.setNodeLocationFromNode = noop;\n          this.cstPostRule = this.cstPostRuleOnlyOffset;\n          this.setInitialNodeLocation =\n            this.setInitialNodeLocationOnlyOffsetRegular;\n        }\n      } else if (/none/i.test(this.nodeLocationTracking)) {\n        this.setNodeLocationFromToken = noop;\n        this.setNodeLocationFromNode = noop;\n        this.cstPostRule = noop;\n        this.setInitialNodeLocation = noop;\n      } else {\n        throw Error(\n          `Invalid <nodeLocationTracking> config option: \"${config.nodeLocationTracking}\"`,\n        );\n      }\n    }\n  }\n\n  setInitialNodeLocationOnlyOffsetRecovery(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      startOffset: NaN,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationOnlyOffsetRegular(\n    this: MixedInParser,\n    cstNode: any,\n  ): void {\n    cstNode.location = {\n      // without error recovery the starting Location of a new CstNode is guaranteed\n      // To be the next Token's startOffset (for valid inputs).\n      // For invalid inputs there won't be any CSTOutput so this potential\n      // inaccuracy does not matter\n      startOffset: this.LA(1).startOffset,\n      endOffset: NaN,\n    };\n  }\n\n  setInitialNodeLocationFullRecovery(this: MixedInParser, cstNode: any): void {\n    cstNode.location = {\n      startOffset: NaN,\n      startLine: NaN,\n      startColumn: NaN,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  /**\n     *  @see setInitialNodeLocationOnlyOffsetRegular for explanation why this work\n\n     * @param cstNode\n     */\n  setInitialNodeLocationFullRegular(this: MixedInParser, cstNode: any): void {\n    const nextToken = this.LA(1);\n    cstNode.location = {\n      startOffset: nextToken.startOffset,\n      startLine: nextToken.startLine,\n      startColumn: nextToken.startColumn,\n      endOffset: NaN,\n      endLine: NaN,\n      endColumn: NaN,\n    };\n  }\n\n  cstInvocationStateUpdate(this: MixedInParser, fullRuleName: string): void {\n    const cstNode: CstNode = {\n      name: fullRuleName,\n      children: Object.create(null),\n    };\n\n    this.setInitialNodeLocation(cstNode);\n    this.CST_STACK.push(cstNode);\n  }\n\n  cstFinallyStateUpdate(this: MixedInParser): void {\n    this.CST_STACK.pop();\n  }\n\n  cstPostRuleFull(this: MixedInParser, ruleCstNode: CstNode): void {\n    // casts to `required<CstNodeLocation>` are safe because `cstPostRuleFull` should only be invoked when full location is enabled\n    const prevToken = this.LA(0) as Required<CstNodeLocation>;\n    const loc = ruleCstNode.location as Required<CstNodeLocation>;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n      loc.endLine = prevToken.endLine;\n      loc.endColumn = prevToken.endColumn;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n      loc.startLine = NaN;\n      loc.startColumn = NaN;\n    }\n  }\n\n  cstPostRuleOnlyOffset(this: MixedInParser, ruleCstNode: CstNode): void {\n    const prevToken = this.LA(0);\n    // `location' is not null because `cstPostRuleOnlyOffset` will only be invoked when location tracking is enabled.\n    const loc = ruleCstNode.location!;\n\n    // If this condition is true it means we consumed at least one Token\n    // In this CstNode.\n    if (loc.startOffset <= prevToken.startOffset === true) {\n      loc.endOffset = prevToken.endOffset;\n    }\n    // \"empty\" CstNode edge case\n    else {\n      loc.startOffset = NaN;\n    }\n  }\n\n  cstPostTerminal(\n    this: MixedInParser,\n    key: string,\n    consumedToken: IToken,\n  ): void {\n    const rootCst = this.CST_STACK[this.CST_STACK.length - 1];\n    addTerminalToCst(rootCst, consumedToken, key);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromToken(rootCst.location!, <any>consumedToken);\n  }\n\n  cstPostNonTerminal(\n    this: MixedInParser,\n    ruleCstResult: CstNode,\n    ruleName: string,\n  ): void {\n    const preCstNode = this.CST_STACK[this.CST_STACK.length - 1];\n    addNoneTerminalToCst(preCstNode, ruleName, ruleCstResult);\n    // This is only used when **both** error recovery and CST Output are enabled.\n    this.setNodeLocationFromNode(preCstNode.location!, ruleCstResult.location!);\n  }\n\n  getBaseCstVisitorConstructor<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorConstructor)) {\n      const newBaseCstVisitorConstructor = createBaseSemanticVisitorConstructor(\n        this.className,\n        keys(this.gastProductionsCache),\n      );\n      this.baseCstVisitorConstructor = newBaseCstVisitorConstructor;\n      return newBaseCstVisitorConstructor;\n    }\n\n    return <any>this.baseCstVisitorConstructor;\n  }\n\n  getBaseCstVisitorConstructorWithDefaults<IN = any, OUT = any>(\n    this: MixedInParser,\n  ): {\n    new (...args: any[]): ICstVisitor<IN, OUT>;\n  } {\n    if (isUndefined(this.baseCstVisitorWithDefaultsConstructor)) {\n      const newConstructor = createBaseVisitorConstructorWithDefaults(\n        this.className,\n        keys(this.gastProductionsCache),\n        this.getBaseCstVisitorConstructor(),\n      );\n      this.baseCstVisitorWithDefaultsConstructor = newConstructor;\n      return newConstructor;\n    }\n\n    return <any>this.baseCstVisitorWithDefaultsConstructor;\n  }\n\n  getLastExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 1];\n  }\n\n  getPreviousExplicitRuleShortName(this: MixedInParser): number {\n    const ruleStack = this.RULE_STACK;\n    return ruleStack[ruleStack.length - 2];\n  }\n\n  getLastExplicitRuleOccurrenceIndex(this: MixedInParser): number {\n    const occurrenceStack = this.RULE_OCCURRENCE_STACK;\n    return occurrenceStack[occurrenceStack.length - 1];\n  }\n}\n","import { END_OF_FILE } from \"../parser.js\";\nimport { IToken } from \"@chevrotain/types\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\n/**\n * Trait responsible abstracting over the interaction with Lexer output (Token vector).\n *\n * This could be generalized to support other kinds of lexers, e.g.\n * - Just in Time Lexing / Lexer-Less parsing.\n * - Streaming Lexer.\n */\nexport class LexerAdapter {\n  tokVector: IToken[];\n  tokVectorLength: number;\n  currIdx: number;\n\n  initLexerAdapter() {\n    this.tokVector = [];\n    this.tokVectorLength = 0;\n    this.currIdx = -1;\n  }\n\n  set input(newInput: IToken[]) {\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    if (this.selfAnalysisDone !== true) {\n      throw Error(\n        `Missing <performSelfAnalysis> invocation at the end of the Parser's constructor.`,\n      );\n    }\n    // @ts-ignore - `this parameter` not supported in setters/getters\n    //   - https://www.typescriptlang.org/docs/handbook/functions.html#this-parameters\n    this.reset();\n    this.tokVector = newInput;\n    this.tokVectorLength = newInput.length;\n  }\n\n  get input(): IToken[] {\n    return this.tokVector;\n  }\n\n  // skips a token and returns the next token\n  SKIP_TOKEN(this: MixedInParser): IToken {\n    if (this.currIdx <= this.tokVector.length - 2) {\n      this.consumeToken();\n      return this.LA(1);\n    } else {\n      return END_OF_FILE;\n    }\n  }\n\n  // Lexer (accessing Token vector) related methods which can be overridden to implement lazy lexers\n  // or lexers dependent on parser context.\n  LA(this: MixedInParser, howMuch: number): IToken {\n    const soughtIdx = this.currIdx + howMuch;\n    if (soughtIdx < 0 || this.tokVectorLength <= soughtIdx) {\n      return END_OF_FILE;\n    } else {\n      return this.tokVector[soughtIdx];\n    }\n  }\n\n  consumeToken(this: MixedInParser) {\n    this.currIdx++;\n  }\n\n  exportLexerState(this: MixedInParser): number {\n    return this.currIdx;\n  }\n\n  importLexerState(this: MixedInParser, newState: number) {\n    this.currIdx = newState;\n  }\n\n  resetLexerState(this: MixedInParser): void {\n    this.currIdx = -1;\n  }\n\n  moveToTerminatedState(this: MixedInParser): void {\n    this.currIdx = this.tokVector.length - 1;\n  }\n\n  getLexerPosition(this: MixedInParser): number {\n    return this.exportLexerState();\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IParserConfig,\n  IRuleConfig,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  ParserMethod,\n  SubruleMethodOpts,\n  TokenType,\n  TokenTypeDictionary,\n  TokenVocabulary,\n} from \"@chevrotain/types\";\nimport {\n  clone,\n  every,\n  flatten,\n  has,\n  isArray,\n  isEmpty,\n  isObject,\n  reduce,\n  uniq,\n  values,\n} from \"lodash-es\";\nimport {\n  AT_LEAST_ONE_IDX,\n  AT_LEAST_ONE_SEP_IDX,\n  BITS_FOR_METHOD_TYPE,\n  BITS_FOR_OCCURRENCE_IDX,\n  MANY_IDX,\n  MANY_SEP_IDX,\n  OPTION_IDX,\n  OR_IDX,\n} from \"../../grammar/keys.js\";\nimport {\n  isRecognitionException,\n  MismatchedTokenException,\n  NotAllInputParsedException,\n} from \"../../exceptions_public.js\";\nimport { PROD_TYPE } from \"../../grammar/lookahead.js\";\nimport {\n  AbstractNextTerminalAfterProductionWalker,\n  NextTerminalAfterAtLeastOneSepWalker,\n  NextTerminalAfterAtLeastOneWalker,\n  NextTerminalAfterManySepWalker,\n  NextTerminalAfterManyWalker,\n} from \"../../grammar/interpreter.js\";\nimport { DEFAULT_RULE_CONFIG, IParserState, TokenMatcher } from \"../parser.js\";\nimport { IN_RULE_RECOVERY_EXCEPTION } from \"./recoverable.js\";\nimport { EOF } from \"../../../scan/tokens_public.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport {\n  augmentTokenTypes,\n  isTokenType,\n  tokenStructuredMatcher,\n  tokenStructuredMatcherNoCategories,\n} from \"../../../scan/tokens.js\";\nimport { Rule } from \"@chevrotain/gast\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for the runtime parsing engine\n * Used by the official API (recognizer_api.ts)\n */\nexport class RecognizerEngine {\n  isBackTrackingStack: boolean[];\n  className: string;\n  RULE_STACK: number[];\n  RULE_OCCURRENCE_STACK: number[];\n  definedRulesNames: string[];\n  tokensMap: { [fqn: string]: TokenType };\n  gastProductionsCache: Record<string, Rule>;\n  shortRuleNameToFull: Record<string, string>;\n  fullRuleNameToShort: Record<string, number>;\n  // The shortName Index must be coded \"after\" the first 8bits to enable building unique lookahead keys\n  ruleShortNameIdx: number;\n  tokenMatcher: TokenMatcher;\n  subruleIdx: number;\n\n  initRecognizerEngine(\n    tokenVocabulary: TokenVocabulary,\n    config: IParserConfig,\n  ) {\n    this.className = this.constructor.name;\n    // TODO: would using an ES6 Map or plain object be faster (CST building scenario)\n    this.shortRuleNameToFull = {};\n    this.fullRuleNameToShort = {};\n    this.ruleShortNameIdx = 256;\n    this.tokenMatcher = tokenStructuredMatcherNoCategories;\n    this.subruleIdx = 0;\n\n    this.definedRulesNames = [];\n    this.tokensMap = {};\n    this.isBackTrackingStack = [];\n    this.RULE_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n    this.gastProductionsCache = {};\n\n    if (has(config, \"serializedGrammar\")) {\n      throw Error(\n        \"The Parser's configuration can no longer contain a <serializedGrammar> property.\\n\" +\n          \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_6-0-0\\n\" +\n          \"\\tFor Further details.\",\n      );\n    }\n\n    if (isArray(tokenVocabulary)) {\n      // This only checks for Token vocabularies provided as arrays.\n      // That is good enough because the main objective is to detect users of pre-V4.0 APIs\n      // rather than all edge cases of empty Token vocabularies.\n      if (isEmpty(tokenVocabulary as any[])) {\n        throw Error(\n          \"A Token Vocabulary cannot be empty.\\n\" +\n            \"\\tNote that the first argument for the parser constructor\\n\" +\n            \"\\tis no longer a Token vector (since v4.0).\",\n        );\n      }\n\n      if (typeof (tokenVocabulary as any[])[0].startOffset === \"number\") {\n        throw Error(\n          \"The Parser constructor no longer accepts a token vector as the first argument.\\n\" +\n            \"\\tSee: https://chevrotain.io/docs/changes/BREAKING_CHANGES.html#_4-0-0\\n\" +\n            \"\\tFor Further details.\",\n        );\n      }\n    }\n\n    if (isArray(tokenVocabulary)) {\n      this.tokensMap = reduce(\n        tokenVocabulary,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (\n      has(tokenVocabulary, \"modes\") &&\n      every(flatten(values((<any>tokenVocabulary).modes)), isTokenType)\n    ) {\n      const allTokenTypes = flatten(values((<any>tokenVocabulary).modes));\n      const uniqueTokens = uniq(allTokenTypes);\n      this.tokensMap = <any>reduce(\n        uniqueTokens,\n        (acc, tokType: TokenType) => {\n          acc[tokType.name] = tokType;\n          return acc;\n        },\n        {} as { [tokenName: string]: TokenType },\n      );\n    } else if (isObject(tokenVocabulary)) {\n      this.tokensMap = clone(tokenVocabulary as TokenTypeDictionary);\n    } else {\n      throw new Error(\n        \"<tokensDictionary> argument must be An Array of Token constructors,\" +\n          \" A dictionary of Token constructors or an IMultiModeLexerDefinition\",\n      );\n    }\n\n    // always add EOF to the tokenNames -> constructors map. it is useful to assure all the input has been\n    // parsed with a clear error message (\"expecting EOF but found ...\")\n    this.tokensMap[\"EOF\"] = EOF;\n\n    const allTokenTypes = has(tokenVocabulary, \"modes\")\n      ? flatten(values((<any>tokenVocabulary).modes))\n      : values(tokenVocabulary);\n    const noTokenCategoriesUsed = every(allTokenTypes, (tokenConstructor) =>\n      isEmpty(tokenConstructor.categoryMatches),\n    );\n\n    this.tokenMatcher = noTokenCategoriesUsed\n      ? tokenStructuredMatcherNoCategories\n      : tokenStructuredMatcher;\n\n    // Because ES2015+ syntax should be supported for creating Token classes\n    // We cannot assume that the Token classes were created using the \"extendToken\" utilities\n    // Therefore we must augment the Token classes both on Lexer initialization and on Parser initialization\n    augmentTokenTypes(values(this.tokensMap));\n  }\n\n  defineRule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleName: string,\n    impl: (...args: ARGS) => R,\n    config: IRuleConfig<R>,\n  ): ParserMethodInternal<ARGS, R> {\n    if (this.selfAnalysisDone) {\n      throw Error(\n        `Grammar rule <${ruleName}> may not be defined after the 'performSelfAnalysis' method has been called'\\n` +\n          `Make sure that all grammar rule definitions are done before 'performSelfAnalysis' is called.`,\n      );\n    }\n    const resyncEnabled: boolean = has(config, \"resyncEnabled\")\n      ? (config.resyncEnabled as boolean) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.resyncEnabled;\n    const recoveryValueFunc = has(config, \"recoveryValueFunc\")\n      ? (config.recoveryValueFunc as () => R) // assumes end user provides the correct config value/type\n      : DEFAULT_RULE_CONFIG.recoveryValueFunc;\n\n    // performance optimization: Use small integers as keys for the longer human readable \"full\" rule names.\n    // this greatly improves Map access time (as much as 8% for some performance benchmarks).\n    const shortName =\n      this.ruleShortNameIdx << (BITS_FOR_METHOD_TYPE + BITS_FOR_OCCURRENCE_IDX);\n\n    this.ruleShortNameIdx++;\n    this.shortRuleNameToFull[shortName] = ruleName;\n    this.fullRuleNameToShort[ruleName] = shortName;\n\n    let invokeRuleWithTry: ParserMethod<ARGS, R>;\n\n    // Micro optimization, only check the condition **once** on rule definition\n    // instead of **every single** rule invocation.\n    if (this.outputCst === true) {\n      invokeRuleWithTry = function invokeRuleWithTry(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          impl.apply(this, args);\n          const cst = this.CST_STACK[this.CST_STACK.length - 1];\n          this.cstPostRule(cst);\n          return cst as unknown as R;\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    } else {\n      invokeRuleWithTry = function invokeRuleWithTryCst(\n        this: MixedInParser,\n        ...args: ARGS\n      ): R {\n        try {\n          this.ruleInvocationStateUpdate(shortName, ruleName, this.subruleIdx);\n          return impl.apply(this, args);\n        } catch (e) {\n          return this.invokeRuleCatch(e, resyncEnabled, recoveryValueFunc) as R;\n        } finally {\n          this.ruleFinallyStateUpdate();\n        }\n      };\n    }\n\n    const wrappedGrammarRule: ParserMethodInternal<ARGS, R> = Object.assign(\n      invokeRuleWithTry as any,\n      { ruleName, originalGrammarAction: impl },\n    );\n\n    return wrappedGrammarRule;\n  }\n\n  invokeRuleCatch(\n    this: MixedInParser,\n    e: Error,\n    resyncEnabledConfig: boolean,\n    recoveryValueFunc: Function,\n  ): unknown {\n    const isFirstInvokedRule = this.RULE_STACK.length === 1;\n    // note the reSync is always enabled for the first rule invocation, because we must always be able to\n    // reSync with EOF and just output some INVALID ParseTree\n    // during backtracking reSync recovery is disabled, otherwise we can't be certain the backtracking\n    // path is really the most valid one\n    const reSyncEnabled =\n      resyncEnabledConfig && !this.isBackTracking() && this.recoveryEnabled;\n\n    if (isRecognitionException(e)) {\n      const recogError: any = e;\n      if (reSyncEnabled) {\n        const reSyncTokType = this.findReSyncTokenType();\n        if (this.isInCurrentRuleReSyncSet(reSyncTokType)) {\n          recogError.resyncedTokens = this.reSyncTo(reSyncTokType);\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            return partialCstResult;\n          } else {\n            return recoveryValueFunc(e);\n          }\n        } else {\n          if (this.outputCst) {\n            const partialCstResult: any =\n              this.CST_STACK[this.CST_STACK.length - 1];\n            partialCstResult.recoveredNode = true;\n            recogError.partialCstResult = partialCstResult;\n          }\n          // to be handled Further up the call stack\n          throw recogError;\n        }\n      } else if (isFirstInvokedRule) {\n        // otherwise a Redundant input error will be created as well and we cannot guarantee that this is indeed the case\n        this.moveToTerminatedState();\n        // the parser should never throw one of its own errors outside its flow.\n        // even if error recovery is disabled\n        return recoveryValueFunc(e);\n      } else {\n        // to be recovered Further up the call stack\n        throw recogError;\n      }\n    } else {\n      // some other Error type which we don't know how to handle (for example a built in JavaScript Error)\n      throw e;\n    }\n  }\n\n  // Implementation of parsing DSL\n  optionInternal<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n  ): OUT | undefined {\n    const key = this.getKeyForAutomaticLookahead(OPTION_IDX, occurrence);\n    return this.optionInternalLogic(actionORMethodDef, occurrence, key);\n  }\n\n  optionInternalLogic<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    occurrence: number,\n    key: number,\n  ): OUT | undefined {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action: GrammarAction<OUT>;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if (lookAheadFunc.call(this) === true) {\n      return action.call(this);\n    }\n    return undefined;\n  }\n\n  atLeastOneInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n    );\n    return this.atLeastOneInternalLogic(\n      prodOccurrence,\n      actionORMethodDef,\n      laKey,\n    );\n  }\n\n  atLeastOneInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n    key: number,\n  ): void {\n    let lookAheadFunc = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookAheadFunc;\n        lookAheadFunc = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    if ((<Function>lookAheadFunc).call(this) === true) {\n      let notStuck = this.doSingleRepetition(action);\n      while (\n        (<Function>lookAheadFunc).call(this) === true &&\n        notStuck === true\n      ) {\n        notStuck = this.doSingleRepetition(action);\n      }\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY,\n        (<DSLMethodOptsWithErr<OUT>>actionORMethodDef).ERR_MSG,\n      );\n    }\n\n    // note that while it may seem that this can cause an error because by using a recursive call to\n    // AT_LEAST_ONE we change the grammar to AT_LEAST_TWO, AT_LEAST_THREE ... , the possible recursive call\n    // from the tryInRepetitionRecovery(...) will only happen IFF there really are TWO/THREE/.... items.\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.atLeastOneInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookAheadFunc,\n      AT_LEAST_ONE_IDX,\n      prodOccurrence,\n      NextTerminalAfterAtLeastOneWalker,\n    );\n  }\n\n  atLeastOneSepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n    );\n    this.atLeastOneSepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  atLeastOneSepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: AtLeastOneSepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n\n    const firstIterationLookaheadFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLookaheadFunc.call(this) === true) {\n      (<GrammarAction<OUT>>action).call(this);\n\n      //  TODO: Optimization can move this function construction into \"attemptInRepetitionRecovery\"\n      //  because it is only needed in error recovery scenarios.\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        (<GrammarAction<OUT>>action).call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterAtLeastOneSepWalker,\n        ],\n        separatorLookAheadFunc,\n        AT_LEAST_ONE_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterAtLeastOneSepWalker,\n      );\n    } else {\n      throw this.raiseEarlyExitException(\n        prodOccurrence,\n        PROD_TYPE.REPETITION_MANDATORY_WITH_SEPARATOR,\n        options.ERR_MSG,\n      );\n    }\n  }\n\n  manyInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(MANY_IDX, prodOccurrence);\n    return this.manyInternalLogic(prodOccurrence, actionORMethodDef, laKey);\n  }\n\n  manyInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n    key: number,\n  ) {\n    let lookaheadFunction = this.getLaFuncFromCache(key);\n    let action;\n    if (typeof actionORMethodDef !== \"function\") {\n      action = actionORMethodDef.DEF;\n      const predicate = actionORMethodDef.GATE;\n      // predicate present\n      if (predicate !== undefined) {\n        const orgLookaheadFunction = lookaheadFunction;\n        lookaheadFunction = () => {\n          return predicate.call(this) && orgLookaheadFunction.call(this);\n        };\n      }\n    } else {\n      action = actionORMethodDef;\n    }\n\n    let notStuck = true;\n    while (lookaheadFunction.call(this) === true && notStuck === true) {\n      notStuck = this.doSingleRepetition(action);\n    }\n\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    this.attemptInRepetitionRecovery(\n      this.manyInternal,\n      [prodOccurrence, actionORMethodDef],\n      <any>lookaheadFunction,\n      MANY_IDX,\n      prodOccurrence,\n      NextTerminalAfterManyWalker,\n      // The notStuck parameter is only relevant when \"attemptInRepetitionRecovery\"\n      // is invoked from manyInternal, in the MANY_SEP case and AT_LEAST_ONE[_SEP]\n      // An infinite loop cannot occur as:\n      // - Either the lookahead is guaranteed to consume something (Single Token Separator)\n      // - AT_LEAST_ONE by definition is guaranteed to consume something (or error out).\n      notStuck,\n    );\n  }\n\n  manySepFirstInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n  ): void {\n    const laKey = this.getKeyForAutomaticLookahead(\n      MANY_SEP_IDX,\n      prodOccurrence,\n    );\n    this.manySepFirstInternalLogic(prodOccurrence, options, laKey);\n  }\n\n  manySepFirstInternalLogic<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    options: ManySepMethodOpts<OUT>,\n    key: number,\n  ): void {\n    const action = options.DEF;\n    const separator = options.SEP;\n    const firstIterationLaFunc = this.getLaFuncFromCache(key);\n\n    // 1st iteration\n    if (firstIterationLaFunc.call(this) === true) {\n      action.call(this);\n\n      const separatorLookAheadFunc = () => {\n        return this.tokenMatcher(this.LA(1), separator);\n      };\n      // 2nd..nth iterations\n      while (this.tokenMatcher(this.LA(1), separator) === true) {\n        // note that this CONSUME will never enter recovery because\n        // the separatorLookAheadFunc checks that the separator really does exist.\n        this.CONSUME(separator);\n        // No need for checking infinite loop here due to consuming the separator.\n        action.call(this);\n      }\n\n      // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n      this.attemptInRepetitionRecovery(\n        this.repetitionSepSecondInternal,\n        [\n          prodOccurrence,\n          separator,\n          separatorLookAheadFunc,\n          action,\n          NextTerminalAfterManySepWalker,\n        ],\n        separatorLookAheadFunc,\n        MANY_SEP_IDX,\n        prodOccurrence,\n        NextTerminalAfterManySepWalker,\n      );\n    }\n  }\n\n  repetitionSepSecondInternal<OUT>(\n    this: MixedInParser,\n    prodOccurrence: number,\n    separator: TokenType,\n    separatorLookAheadFunc: () => boolean,\n    action: GrammarAction<OUT>,\n    nextTerminalAfterWalker: typeof AbstractNextTerminalAfterProductionWalker,\n  ): void {\n    while (separatorLookAheadFunc()) {\n      // note that this CONSUME will never enter recovery because\n      // the separatorLookAheadFunc checks that the separator really does exist.\n      this.CONSUME(separator);\n      action.call(this);\n    }\n\n    // we can only arrive to this function after an error\n    // has occurred (hence the name 'second') so the following\n    // IF will always be entered, its possible to remove it...\n    // however it is kept to avoid confusion and be consistent.\n    // Performance optimization: \"attemptInRepetitionRecovery\" will be defined as NOOP unless recovery is enabled\n    /* istanbul ignore else */\n    this.attemptInRepetitionRecovery(\n      this.repetitionSepSecondInternal,\n      [\n        prodOccurrence,\n        separator,\n        separatorLookAheadFunc,\n        action,\n        nextTerminalAfterWalker,\n      ],\n      separatorLookAheadFunc,\n      AT_LEAST_ONE_SEP_IDX,\n      prodOccurrence,\n      nextTerminalAfterWalker,\n    );\n  }\n\n  doSingleRepetition(this: MixedInParser, action: Function): any {\n    const beforeIteration = this.getLexerPosition();\n    action.call(this);\n    const afterIteration = this.getLexerPosition();\n\n    // This boolean will indicate if this repetition progressed\n    // or if we are \"stuck\" (potential infinite loop in the repetition).\n    return afterIteration > beforeIteration;\n  }\n\n  orInternal<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n    occurrence: number,\n  ): T {\n    const laKey = this.getKeyForAutomaticLookahead(OR_IDX, occurrence);\n    const alts = isArray(altsOrOpts) ? altsOrOpts : altsOrOpts.DEF;\n\n    const laFunc = this.getLaFuncFromCache(laKey);\n    const altIdxToTake = laFunc.call(this, alts);\n    if (altIdxToTake !== undefined) {\n      const chosenAlternative: any = alts[altIdxToTake];\n      return chosenAlternative.ALT.call(this);\n    }\n    this.raiseNoAltException(\n      occurrence,\n      (altsOrOpts as OrMethodOpts<unknown>).ERR_MSG,\n    );\n  }\n\n  ruleFinallyStateUpdate(this: MixedInParser): void {\n    this.RULE_STACK.pop();\n    this.RULE_OCCURRENCE_STACK.pop();\n\n    // NOOP when cst is disabled\n    this.cstFinallyStateUpdate();\n\n    if (this.RULE_STACK.length === 0 && this.isAtEndOfInput() === false) {\n      const firstRedundantTok = this.LA(1);\n      const errMsg = this.errorMessageProvider.buildNotAllInputParsedMessage({\n        firstRedundant: firstRedundantTok,\n        ruleName: this.getCurrRuleFullName(),\n      });\n      this.SAVE_ERROR(\n        new NotAllInputParsedException(errMsg, firstRedundantTok),\n      );\n    }\n  }\n\n  subruleInternal<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    idx: number,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    let ruleResult;\n    try {\n      const args = options !== undefined ? options.ARGS : undefined;\n      this.subruleIdx = idx;\n      ruleResult = ruleToCall.apply(this, args);\n      this.cstPostNonTerminal(\n        ruleResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleToCall.ruleName,\n      );\n      return ruleResult;\n    } catch (e) {\n      throw this.subruleInternalError(e, options, ruleToCall.ruleName);\n    }\n  }\n\n  subruleInternalError(\n    this: MixedInParser,\n    e: any,\n    options: SubruleMethodOpts<unknown[]> | undefined,\n    ruleName: string,\n  ): void {\n    if (isRecognitionException(e) && e.partialCstResult !== undefined) {\n      this.cstPostNonTerminal(\n        e.partialCstResult,\n        options !== undefined && options.LABEL !== undefined\n          ? options.LABEL\n          : ruleName,\n      );\n\n      delete e.partialCstResult;\n    }\n    throw e;\n  }\n\n  consumeInternal(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    options: ConsumeMethodOpts | undefined,\n  ): IToken {\n    let consumedToken!: IToken;\n    try {\n      const nextToken = this.LA(1);\n      if (this.tokenMatcher(nextToken, tokType) === true) {\n        this.consumeToken();\n        consumedToken = nextToken;\n      } else {\n        this.consumeInternalError(tokType, nextToken, options);\n      }\n    } catch (eFromConsumption) {\n      consumedToken = this.consumeInternalRecovery(\n        tokType,\n        idx,\n        eFromConsumption,\n      );\n    }\n\n    this.cstPostTerminal(\n      options !== undefined && options.LABEL !== undefined\n        ? options.LABEL\n        : tokType.name,\n      consumedToken,\n    );\n    return consumedToken;\n  }\n\n  consumeInternalError(\n    this: MixedInParser,\n    tokType: TokenType,\n    nextToken: IToken,\n    options: ConsumeMethodOpts | undefined,\n  ): void {\n    let msg;\n    const previousToken = this.LA(0);\n    if (options !== undefined && options.ERR_MSG) {\n      msg = options.ERR_MSG;\n    } else {\n      msg = this.errorMessageProvider.buildMismatchTokenMessage({\n        expected: tokType,\n        actual: nextToken,\n        previous: previousToken,\n        ruleName: this.getCurrRuleFullName(),\n      });\n    }\n    throw this.SAVE_ERROR(\n      new MismatchedTokenException(msg, nextToken, previousToken),\n    );\n  }\n\n  consumeInternalRecovery(\n    this: MixedInParser,\n    tokType: TokenType,\n    idx: number,\n    eFromConsumption: Error,\n  ): IToken {\n    // no recovery allowed during backtracking, otherwise backtracking may recover invalid syntax and accept it\n    // but the original syntax could have been parsed successfully without any backtracking + recovery\n    if (\n      this.recoveryEnabled &&\n      // TODO: more robust checking of the exception type. Perhaps Typescript extending expressions?\n      eFromConsumption.name === \"MismatchedTokenException\" &&\n      !this.isBackTracking()\n    ) {\n      const follows = this.getFollowsForInRuleRecovery(<any>tokType, idx);\n      try {\n        return this.tryInRuleRecovery(<any>tokType, follows);\n      } catch (eFromInRuleRecovery) {\n        if (eFromInRuleRecovery.name === IN_RULE_RECOVERY_EXCEPTION) {\n          // failed in RuleRecovery.\n          // throw the original error in order to trigger reSync error recovery\n          throw eFromConsumption;\n        } else {\n          throw eFromInRuleRecovery;\n        }\n      }\n    } else {\n      throw eFromConsumption;\n    }\n  }\n\n  saveRecogState(this: MixedInParser): IParserState {\n    // errors is a getter which will clone the errors array\n    const savedErrors = this.errors;\n    const savedRuleStack = clone(this.RULE_STACK);\n    return {\n      errors: savedErrors,\n      lexerState: this.exportLexerState(),\n      RULE_STACK: savedRuleStack,\n      CST_STACK: this.CST_STACK,\n    };\n  }\n\n  reloadRecogState(this: MixedInParser, newState: IParserState) {\n    this.errors = newState.errors;\n    this.importLexerState(newState.lexerState);\n    this.RULE_STACK = newState.RULE_STACK;\n  }\n\n  ruleInvocationStateUpdate(\n    this: MixedInParser,\n    shortName: number,\n    fullName: string,\n    idxInCallingRule: number,\n  ): void {\n    this.RULE_OCCURRENCE_STACK.push(idxInCallingRule);\n    this.RULE_STACK.push(shortName);\n    // NOOP when cst is disabled\n    this.cstInvocationStateUpdate(fullName);\n  }\n\n  isBackTracking(this: MixedInParser): boolean {\n    return this.isBackTrackingStack.length !== 0;\n  }\n\n  getCurrRuleFullName(this: MixedInParser): string {\n    const shortName = this.getLastExplicitRuleShortName();\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  shortRuleNameToFullName(this: MixedInParser, shortName: number) {\n    return this.shortRuleNameToFull[shortName];\n  }\n\n  public isAtEndOfInput(this: MixedInParser): boolean {\n    return this.tokenMatcher(this.LA(1), EOF);\n  }\n\n  public reset(this: MixedInParser): void {\n    this.resetLexerState();\n    this.subruleIdx = 0;\n    this.isBackTrackingStack = [];\n    this.errors = [];\n    this.RULE_STACK = [];\n    // TODO: extract a specific reset for TreeBuilder trait\n    this.CST_STACK = [];\n    this.RULE_OCCURRENCE_STACK = [];\n  }\n}\n","import {\n  AtLeastOneSepMethodOpts,\n  ConsumeMethodOpts,\n  DSLMethodOpts,\n  DSLMethodOptsWithErr,\n  GrammarAction,\n  IOrAlt,\n  IRuleConfig,\n  ISerializedGast,\n  IToken,\n  ManySepMethodOpts,\n  OrMethodOpts,\n  SubruleMethodOpts,\n  TokenType,\n} from \"@chevrotain/types\";\nimport { includes, values } from \"lodash-es\";\nimport { isRecognitionException } from \"../../exceptions_public.js\";\nimport { DEFAULT_RULE_CONFIG, ParserDefinitionErrorType } from \"../parser.js\";\nimport { defaultGrammarValidatorErrorProvider } from \"../../errors_public.js\";\nimport { validateRuleIsOverridden } from \"../../grammar/checks.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { Rule, serializeGrammar } from \"@chevrotain/gast\";\nimport { IParserDefinitionError } from \"../../grammar/types.js\";\nimport { ParserMethodInternal } from \"../types.js\";\n\n/**\n * This trait is responsible for implementing the public API\n * for defining Chevrotain parsers, i.e:\n * - CONSUME\n * - RULE\n * - OPTION\n * - ...\n */\nexport class RecognizerApi {\n  ACTION<T>(this: MixedInParser, impl: () => T): T {\n    return impl.call(this);\n  }\n\n  consume(\n    this: MixedInParser,\n    idx: number,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, idx, options);\n  }\n\n  subrule<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    idx: number,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, idx, options);\n  }\n\n  option<OUT>(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, idx);\n  }\n\n  or(\n    this: MixedInParser,\n    idx: number,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<any>,\n  ): any {\n    return this.orInternal(altsOrOpts, idx);\n  }\n\n  many(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOpts<any>,\n  ): void {\n    return this.manyInternal(idx, actionORMethodDef);\n  }\n\n  atLeastOne(\n    this: MixedInParser,\n    idx: number,\n    actionORMethodDef: GrammarAction<any> | DSLMethodOptsWithErr<any>,\n  ): void {\n    return this.atLeastOneInternal(idx, actionORMethodDef);\n  }\n\n  CONSUME(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 0, options);\n  }\n\n  CONSUME1(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 1, options);\n  }\n\n  CONSUME2(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 2, options);\n  }\n\n  CONSUME3(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 3, options);\n  }\n\n  CONSUME4(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 4, options);\n  }\n\n  CONSUME5(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 5, options);\n  }\n\n  CONSUME6(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 6, options);\n  }\n\n  CONSUME7(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 7, options);\n  }\n\n  CONSUME8(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 8, options);\n  }\n\n  CONSUME9(\n    this: MixedInParser,\n    tokType: TokenType,\n    options?: ConsumeMethodOpts,\n  ): IToken {\n    return this.consumeInternal(tokType, 9, options);\n  }\n\n  SUBRULE<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 0, options);\n  }\n\n  SUBRULE1<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 1, options);\n  }\n\n  SUBRULE2<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 2, options);\n  }\n\n  SUBRULE3<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 3, options);\n  }\n\n  SUBRULE4<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 4, options);\n  }\n\n  SUBRULE5<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 5, options);\n  }\n\n  SUBRULE6<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 6, options);\n  }\n\n  SUBRULE7<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 7, options);\n  }\n\n  SUBRULE8<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 8, options);\n  }\n\n  SUBRULE9<ARGS extends unknown[], R>(\n    this: MixedInParser,\n    ruleToCall: ParserMethodInternal<ARGS, R>,\n    options?: SubruleMethodOpts<ARGS>,\n  ): R {\n    return this.subruleInternal(ruleToCall, 9, options);\n  }\n\n  OPTION<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 0);\n  }\n\n  OPTION1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 1);\n  }\n\n  OPTION2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 2);\n  }\n\n  OPTION3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 3);\n  }\n\n  OPTION4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 4);\n  }\n\n  OPTION5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 5);\n  }\n\n  OPTION6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 6);\n  }\n\n  OPTION7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 7);\n  }\n\n  OPTION8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 8);\n  }\n\n  OPTION9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): OUT | undefined {\n    return this.optionInternal(actionORMethodDef, 9);\n  }\n\n  OR<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 0);\n  }\n\n  OR1<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 1);\n  }\n\n  OR2<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 2);\n  }\n\n  OR3<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 3);\n  }\n\n  OR4<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 4);\n  }\n\n  OR5<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 5);\n  }\n\n  OR6<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 6);\n  }\n\n  OR7<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 7);\n  }\n\n  OR8<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 8);\n  }\n\n  OR9<T>(\n    this: MixedInParser,\n    altsOrOpts: IOrAlt<any>[] | OrMethodOpts<unknown>,\n  ): T {\n    return this.orInternal(altsOrOpts, 9);\n  }\n\n  MANY<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(0, actionORMethodDef);\n  }\n\n  MANY1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(1, actionORMethodDef);\n  }\n\n  MANY2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(2, actionORMethodDef);\n  }\n\n  MANY3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(3, actionORMethodDef);\n  }\n\n  MANY4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(4, actionORMethodDef);\n  }\n\n  MANY5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(5, actionORMethodDef);\n  }\n\n  MANY6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(6, actionORMethodDef);\n  }\n\n  MANY7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(7, actionORMethodDef);\n  }\n\n  MANY8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(8, actionORMethodDef);\n  }\n\n  MANY9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOpts<OUT>,\n  ): void {\n    this.manyInternal(9, actionORMethodDef);\n  }\n\n  MANY_SEP<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(0, options);\n  }\n\n  MANY_SEP1<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(1, options);\n  }\n\n  MANY_SEP2<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(2, options);\n  }\n\n  MANY_SEP3<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(3, options);\n  }\n\n  MANY_SEP4<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(4, options);\n  }\n\n  MANY_SEP5<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(5, options);\n  }\n\n  MANY_SEP6<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(6, options);\n  }\n\n  MANY_SEP7<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(7, options);\n  }\n\n  MANY_SEP8<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(8, options);\n  }\n\n  MANY_SEP9<OUT>(this: MixedInParser, options: ManySepMethodOpts<OUT>): void {\n    this.manySepFirstInternal(9, options);\n  }\n\n  AT_LEAST_ONE<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(0, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE1<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    return this.atLeastOneInternal(1, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE2<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(2, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE3<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(3, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE4<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(4, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE5<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(5, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE6<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(6, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE7<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(7, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE8<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(8, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE9<OUT>(\n    this: MixedInParser,\n    actionORMethodDef: GrammarAction<OUT> | DSLMethodOptsWithErr<OUT>,\n  ): void {\n    this.atLeastOneInternal(9, actionORMethodDef);\n  }\n\n  AT_LEAST_ONE_SEP<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(0, options);\n  }\n\n  AT_LEAST_ONE_SEP1<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(1, options);\n  }\n\n  AT_LEAST_ONE_SEP2<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(2, options);\n  }\n\n  AT_LEAST_ONE_SEP3<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(3, options);\n  }\n\n  AT_LEAST_ONE_SEP4<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(4, options);\n  }\n\n  AT_LEAST_ONE_SEP5<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(5, options);\n  }\n\n  AT_LEAST_ONE_SEP6<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(6, options);\n  }\n\n  AT_LEAST_ONE_SEP7<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(7, options);\n  }\n\n  AT_LEAST_ONE_SEP8<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(8, options);\n  }\n\n  AT_LEAST_ONE_SEP9<OUT>(\n    this: MixedInParser,\n    options: AtLeastOneSepMethodOpts<OUT>,\n  ): void {\n    this.atLeastOneSepFirstInternal(9, options);\n  }\n\n  RULE<T>(\n    this: MixedInParser,\n    name: string,\n    implementation: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T | any {\n    if (includes(this.definedRulesNames, name)) {\n      const errMsg =\n        defaultGrammarValidatorErrorProvider.buildDuplicateRuleNameError({\n          topLevelRule: name,\n          grammarName: this.className,\n        });\n\n      const error = {\n        message: errMsg,\n        type: ParserDefinitionErrorType.DUPLICATE_RULE_NAME,\n        ruleName: name,\n      };\n      this.definitionErrors.push(error);\n    }\n\n    this.definedRulesNames.push(name);\n\n    const ruleImplementation = this.defineRule(name, implementation, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  OVERRIDE_RULE<T>(\n    this: MixedInParser,\n    name: string,\n    impl: (...implArgs: any[]) => T,\n    config: IRuleConfig<T> = DEFAULT_RULE_CONFIG,\n  ): (idxInCallingRule?: number, ...args: any[]) => T {\n    const ruleErrors: IParserDefinitionError[] = validateRuleIsOverridden(\n      name,\n      this.definedRulesNames,\n      this.className,\n    );\n    this.definitionErrors = this.definitionErrors.concat(ruleErrors);\n\n    const ruleImplementation = this.defineRule(name, impl, config);\n    (this as any)[name] = ruleImplementation;\n    return ruleImplementation;\n  }\n\n  BACKTRACK<T>(\n    this: MixedInParser,\n    grammarRule: (...args: any[]) => T,\n    args?: any[],\n  ): () => boolean {\n    return function () {\n      // save org state\n      this.isBackTrackingStack.push(1);\n      const orgState = this.saveRecogState();\n      try {\n        grammarRule.apply(this, args);\n        // if no exception was thrown we have succeed parsing the rule.\n        return true;\n      } catch (e) {\n        if (isRecognitionException(e)) {\n          return false;\n        } else {\n          throw e;\n        }\n      } finally {\n        this.reloadRecogState(orgState);\n        this.isBackTrackingStack.pop();\n      }\n    };\n  }\n\n  // GAST export APIs\n  public getGAstProductions(this: MixedInParser): Record<string, Rule> {\n    return this.gastProductionsCache;\n  }\n\n  public getSerializedGastProductions(this: MixedInParser): ISerializedGast[] {\n    return serializeGrammar(values(this.gastProductionsCache));\n  }\n}\n","import {\n  IParserConfig,\n  IParserErrorMessageProvider,\n  IRecognitionException,\n} from \"@chevrotain/types\";\nimport {\n  EarlyExitException,\n  isRecognitionException,\n  NoViableAltException,\n} from \"../../exceptions_public.js\";\nimport { clone, has } from \"lodash-es\";\nimport {\n  getLookaheadPathsForOptionalProd,\n  getLookaheadPathsForOr,\n  PROD_TYPE,\n} from \"../../grammar/lookahead.js\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class ErrorHandler {\n  _errors: IRecognitionException[];\n  errorMessageProvider: IParserErrorMessageProvider;\n\n  initErrorHandler(config: IParserConfig) {\n    this._errors = [];\n    this.errorMessageProvider = has(config, \"errorMessageProvider\")\n      ? (config.errorMessageProvider as IParserErrorMessageProvider) // assumes end user provides the correct config value/type\n      : DEFAULT_PARSER_CONFIG.errorMessageProvider;\n  }\n\n  SAVE_ERROR(\n    this: MixedInParser,\n    error: IRecognitionException,\n  ): IRecognitionException {\n    if (isRecognitionException(error)) {\n      error.context = {\n        ruleStack: this.getHumanReadableRuleStack(),\n        ruleOccurrenceStack: clone(this.RULE_OCCURRENCE_STACK),\n      };\n      this._errors.push(error);\n      return error;\n    } else {\n      throw Error(\n        \"Trying to save an Error which is not a RecognitionException\",\n      );\n    }\n  }\n\n  get errors(): IRecognitionException[] {\n    return clone(this._errors);\n  }\n\n  set errors(newErrors: IRecognitionException[]) {\n    this._errors = newErrors;\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseEarlyExitException(\n    this: MixedInParser,\n    occurrence: number,\n    prodType: PROD_TYPE,\n    userDefinedErrMsg: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOptionalProd(\n      occurrence,\n      ruleGrammar,\n      prodType,\n      this.maxLookahead,\n    );\n    const insideProdPaths = lookAheadPathsPerAlternative[0];\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const msg = this.errorMessageProvider.buildEarlyExitMessage({\n      expectedIterationPaths: insideProdPaths,\n      actual: actualTokens,\n      previous: this.LA(0),\n      customUserDescription: userDefinedErrMsg,\n      ruleName: ruleName,\n    });\n\n    throw this.SAVE_ERROR(new EarlyExitException(msg, this.LA(1), this.LA(0)));\n  }\n\n  // TODO: consider caching the error message computed information\n  raiseNoAltException(\n    this: MixedInParser,\n    occurrence: number,\n    errMsgTypes: string | undefined,\n  ): never {\n    const ruleName = this.getCurrRuleFullName();\n    const ruleGrammar = this.getGAstProductions()[ruleName];\n    // TODO: getLookaheadPathsForOr can be slow for large enough maxLookahead and certain grammars, consider caching ?\n    const lookAheadPathsPerAlternative = getLookaheadPathsForOr(\n      occurrence,\n      ruleGrammar,\n      this.maxLookahead,\n    );\n\n    const actualTokens = [];\n    for (let i = 1; i <= this.maxLookahead; i++) {\n      actualTokens.push(this.LA(i));\n    }\n    const previousToken = this.LA(0);\n\n    const errMsg = this.errorMessageProvider.buildNoViableAltMessage({\n      expectedPathsPerAlt: lookAheadPathsPerAlternative,\n      actual: actualTokens,\n      previous: previousToken,\n      customUserDescription: errMsgTypes,\n      ruleName: this.getCurrRuleFullName(),\n    });\n\n    throw this.SAVE_ERROR(\n      new NoViableAltException(errMsg, this.LA(1), previousToken),\n    );\n  }\n}\n","import {\n  ISyntacticContentAssistPath,\n  IToken,\n  ITokenGrammarPath,\n  TokenType,\n} from \"@chevrotain/types\";\nimport {\n  NextAfterTokenWalker,\n  nextPossibleTokensAfter,\n} from \"../../grammar/interpreter.js\";\nimport { first, isUndefined } from \"lodash-es\";\nimport { MixedInParser } from \"./parser_traits.js\";\n\nexport class ContentAssist {\n  initContentAssist() {}\n\n  public computeContentAssist(\n    this: MixedInParser,\n    startRuleName: string,\n    precedingInput: IToken[],\n  ): ISyntacticContentAssistPath[] {\n    const startRuleGast = this.gastProductionsCache[startRuleName];\n\n    if (isUndefined(startRuleGast)) {\n      throw Error(`Rule ->${startRuleName}<- does not exist in this grammar.`);\n    }\n\n    return nextPossibleTokensAfter(\n      [startRuleGast],\n      precedingInput,\n      this.tokenMatcher,\n      this.maxLookahead,\n    );\n  }\n\n  // TODO: should this be a member method or a utility? it does not have any state or usage of 'this'...\n  // TODO: should this be more explicitly part of the public API?\n  public getNextPossibleTokenTypes(\n    this: MixedInParser,\n    grammarPath: ITokenGrammarPath,\n  ): TokenType[] {\n    const topRuleName = first(grammarPath.ruleStack)!;\n    const gastProductions = this.getGAstProductions();\n    const topProduction = gastProductions[topRuleName];\n    const nextPossibleTokenTypes = new NextAfterTokenWalker(\n      topProduction,\n      grammarPath,\n    ).startWalking();\n    return nextPossibleTokenTypes;\n  }\n}\n","import { IParserConfig } from \"@chevrotain/types\";\nimport { has } from \"lodash-es\";\nimport { timer } from \"@chevrotain/utils\";\nimport { MixedInParser } from \"./parser_traits.js\";\nimport { DEFAULT_PARSER_CONFIG } from \"../parser.js\";\n\n/**\n * Trait responsible for runtime parsing errors.\n */\nexport class PerformanceTracer {\n  traceInitPerf: boolean | number;\n  traceInitMaxIdent: number;\n  traceInitIndent: number;\n\n  initPerformanceTracer(config: IParserConfig) {\n    if (has(config, \"traceInitPerf\")) {\n      const userTraceInitPerf = config.traceInitPerf;\n      const traceIsNumber = typeof userTraceInitPerf === \"number\";\n      this.traceInitMaxIdent = traceIsNumber\n        ? <number>userTraceInitPerf\n        : Infinity;\n      this.traceInitPerf = traceIsNumber\n        ? userTraceInitPerf > 0\n        : (userTraceInitPerf as boolean); // assumes end user provides the correct config value/type\n    } else {\n      this.traceInitMaxIdent = 0;\n      this.traceInitPerf = DEFAULT_PARSER_CONFIG.traceInitPerf;\n    }\n\n    this.traceInitIndent = -1;\n  }\n\n  TRACE_INIT<T>(this: MixedInParser, phaseDesc: string, phaseImpl: () => T): T {\n    // No need to optimize this using NOOP pattern because\n    // It is not called in a hot spot...\n    if (this.traceInitPerf === true) {\n      this.traceInitIndent++;\n      const indent = new Array(this.traceInitIndent + 1).join(\"\\t\");\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        console.log(`${indent}--> <${phaseDesc}>`);\n      }\n      const { time, value } = timer(phaseImpl);\n      /* istanbul ignore next - Difficult to reproduce specific performance behavior (>10ms) in tests */\n      const traceMethod = time > 10 ? console.warn : console.log;\n      if (this.traceInitIndent < this.traceInitMaxIdent) {\n        traceMethod(`${indent}<-- <${phaseDesc}> time: ${time}ms`);\n      }\n      this.traceInitIndent--;\n      return value;\n    } else {\n      return phaseImpl();\n    }\n  }\n}\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport filter from \"lodash-es/filter.js\"\r\nimport {\r\n    IProduction,\r\n    IProductionWithOccurrence,\r\n    TokenType,\r\n    Alternation,\r\n    NonTerminal,\r\n    Rule,\r\n    Option,\r\n    RepetitionMandatory,\r\n    Repetition,\r\n    Terminal,\r\n    Alternative,\r\n    RepetitionWithSeparator,\r\n    RepetitionMandatoryWithSeparator,\r\n    LookaheadProductionType\r\n} from \"chevrotain\"\r\n\r\nexport function buildATNKey(rule: Rule, type: LookaheadProductionType, occurrence: number): string {\r\n    return `${rule.name}_${type}_${occurrence}`;\r\n}\r\n\r\nexport interface ATN {\r\n    decisionMap: Record<string, DecisionState>\r\n    states: ATNState[]\r\n    decisionStates: DecisionState[]\r\n    ruleToStartState: Map<Rule, RuleStartState>\r\n    ruleToStopState: Map<Rule, RuleStopState>\r\n}\r\n\r\nexport const ATN_INVALID_TYPE = 0\r\nexport const ATN_BASIC = 1\r\nexport const ATN_RULE_START = 2\r\nexport const ATN_PLUS_BLOCK_START = 4\r\nexport const ATN_STAR_BLOCK_START = 5\r\n// Currently unused as the ATN is not used for lexing\r\nexport const ATN_TOKEN_START = 6\r\nexport const ATN_RULE_STOP = 7\r\nexport const ATN_BLOCK_END = 8\r\nexport const ATN_STAR_LOOP_BACK = 9\r\nexport const ATN_STAR_LOOP_ENTRY = 10\r\nexport const ATN_PLUS_LOOP_BACK = 11\r\nexport const ATN_LOOP_END = 12\r\n\r\nexport type ATNState =\r\n    | BasicState\r\n    | BasicBlockStartState\r\n    | PlusBlockStartState\r\n    | PlusLoopbackState\r\n    | StarBlockStartState\r\n    | StarLoopbackState\r\n    | StarLoopEntryState\r\n    | BlockEndState\r\n    | RuleStartState\r\n    | RuleStopState\r\n    | LoopEndState\r\n\r\nexport interface ATNBaseState {\r\n    atn: ATN\r\n    production: IProductionWithOccurrence\r\n    stateNumber: number\r\n    rule: Rule\r\n    epsilonOnlyTransitions: boolean\r\n    transitions: Transition[]\r\n    nextTokenWithinRule: number[]\r\n}\r\n\r\nexport interface BasicState extends ATNBaseState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface BlockStartState extends DecisionState {\r\n    end: BlockEndState\r\n}\r\n\r\nexport interface BasicBlockStartState extends BlockStartState {\r\n    type: typeof ATN_BASIC\r\n}\r\n\r\nexport interface PlusBlockStartState extends BlockStartState {\r\n    loopback: PlusLoopbackState\r\n    type: typeof ATN_PLUS_BLOCK_START\r\n}\r\n\r\nexport interface PlusLoopbackState extends DecisionState {\r\n    type: typeof ATN_PLUS_LOOP_BACK\r\n}\r\n\r\nexport interface StarBlockStartState extends BlockStartState {\r\n    type: typeof ATN_STAR_BLOCK_START\r\n}\r\n\r\nexport interface StarLoopbackState extends ATNBaseState {\r\n    type: typeof ATN_STAR_LOOP_BACK\r\n}\r\n\r\nexport interface StarLoopEntryState extends DecisionState {\r\n    loopback: StarLoopbackState\r\n    type: typeof ATN_STAR_LOOP_ENTRY\r\n}\r\n\r\nexport interface BlockEndState extends ATNBaseState {\r\n    start: BlockStartState\r\n    type: typeof ATN_BLOCK_END\r\n}\r\n\r\nexport interface DecisionState extends ATNBaseState {\r\n    decision: number\r\n}\r\n\r\nexport interface LoopEndState extends ATNBaseState {\r\n    loopback: ATNState\r\n    type: typeof ATN_LOOP_END\r\n}\r\n\r\nexport interface RuleStartState extends ATNBaseState {\r\n    stop: RuleStopState\r\n    type: typeof ATN_RULE_START\r\n}\r\n\r\nexport interface RuleStopState extends ATNBaseState {\r\n    type: typeof ATN_RULE_STOP\r\n}\r\n\r\nexport interface Transition {\r\n    target: ATNState\r\n    isEpsilon(): boolean\r\n}\r\n\r\nexport abstract class AbstractTransition implements Transition {\r\n    target: ATNState\r\n\r\n    constructor(target: ATNState) {\r\n        this.target = target\r\n    }\r\n\r\n    isEpsilon() {\r\n        return false\r\n    }\r\n}\r\n\r\nexport class AtomTransition extends AbstractTransition {\r\n    tokenType: TokenType\r\n\r\n    constructor(target: ATNState, tokenType: TokenType) {\r\n        super(target)\r\n        this.tokenType = tokenType\r\n    }\r\n}\r\n\r\nexport class EpsilonTransition extends AbstractTransition {\r\n    constructor(target: ATNState) {\r\n        super(target)\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\nexport class RuleTransition extends AbstractTransition {\r\n    rule: Rule\r\n    followState: ATNState\r\n\r\n    constructor(ruleStart: RuleStartState, rule: Rule, followState: ATNState) {\r\n        super(ruleStart)\r\n        this.rule = rule\r\n        this.followState = followState\r\n    }\r\n\r\n    isEpsilon() {\r\n        return true\r\n    }\r\n}\r\n\r\ninterface ATNHandle {\r\n    left: ATNState\r\n    right: ATNState\r\n}\r\n\r\nexport function createATN(rules: Rule[]): ATN {\r\n    const atn: ATN = {\r\n        decisionMap: {},\r\n        decisionStates: [],\r\n        ruleToStartState: new Map(),\r\n        ruleToStopState: new Map(),\r\n        states: []\r\n    }\r\n    createRuleStartAndStopATNStates(atn, rules)\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const ruleBlock = block(atn, rule, rule)\r\n        if (ruleBlock === undefined) {\r\n            continue\r\n        }\r\n        buildRuleHandle(atn, rule, ruleBlock)\r\n    }\r\n    return atn\r\n}\r\n\r\nfunction createRuleStartAndStopATNStates(atn: ATN, rules: Rule[]): void {\r\n    const ruleLength = rules.length\r\n    for (let i = 0; i < ruleLength; i++) {\r\n        const rule = rules[i]\r\n        const start = newState<RuleStartState>(atn, rule, undefined, {\r\n            type: ATN_RULE_START\r\n        })\r\n        const stop = newState<RuleStopState>(atn, rule, undefined, {\r\n            type: ATN_RULE_STOP\r\n        })\r\n        start.stop = stop\r\n        atn.ruleToStartState.set(rule, start)\r\n        atn.ruleToStopState.set(rule, stop)\r\n    }\r\n}\r\n\r\nfunction atom(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProduction\r\n): ATNHandle | undefined {\r\n    if (production instanceof Terminal) {\r\n        return tokenRef(atn, rule, production.terminalType, production)\r\n    } else if (production instanceof NonTerminal) {\r\n        return ruleRef(atn, rule, production)\r\n    } else if (production instanceof Alternation) {\r\n        return alternation(atn, rule, production)\r\n    } else if (production instanceof Option) {\r\n        return option(atn, rule, production)\r\n    } else if (production instanceof Repetition) {\r\n        return repetition(atn, rule, production)\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return repetitionSep(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return repetitionMandatory(atn, rule, production)\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return repetitionMandatorySep(atn, rule, production)\r\n    } else {\r\n        return block(atn, rule, production as Alternative)\r\n    }\r\n}\r\n\r\nfunction repetition(atn: ATN, rule: Rule, repetition: Repetition): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return star(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionSep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionWithSeparator\r\n): ATNHandle {\r\n    const starState = newState<StarBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_STAR_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, starState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        starState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return star(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction repetitionMandatory(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatory\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    return plus(atn, rule, repetition, handle)\r\n}\r\n\r\nfunction repetitionMandatorySep(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    repetition: RepetitionMandatoryWithSeparator\r\n): ATNHandle {\r\n    const plusState = newState<PlusBlockStartState>(atn, rule, repetition, {\r\n        type: ATN_PLUS_BLOCK_START\r\n    })\r\n    defineDecisionState(atn, plusState)\r\n    const handle = makeAlts(\r\n        atn,\r\n        rule,\r\n        plusState,\r\n        repetition,\r\n        block(atn, rule, repetition)\r\n    )\r\n    const sep = tokenRef(atn, rule, repetition.separator, repetition)\r\n    return plus(atn, rule, repetition, handle, sep)\r\n}\r\n\r\nfunction alternation(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    alternation: Alternation\r\n): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, alternation, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const alts = map(alternation.definition, (e) => atom(atn, rule, e))\r\n    const handle = makeAlts(atn, rule, start, alternation, ...alts)\r\n    return handle\r\n}\r\n\r\nfunction option(atn: ATN, rule: Rule, option: Option): ATNHandle {\r\n    const start = newState<BasicBlockStartState>(atn, rule, option, {\r\n        type: ATN_BASIC\r\n    })\r\n    defineDecisionState(atn, start)\r\n    const handle = makeAlts(atn, rule, start, option, block(atn, rule, option))\r\n    return optional(atn, rule, option, handle)\r\n}\r\n\r\nfunction block(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    block: { definition: IProduction[] }\r\n): ATNHandle | undefined {\r\n    const handles = filter(\r\n        map(block.definition, (e) => atom(atn, rule, e)),\r\n        (e) => e !== undefined\r\n    ) as ATNHandle[]\r\n    if (handles.length === 1) {\r\n        return handles[0]\r\n    } else if (handles.length === 0) {\r\n        return undefined\r\n    } else {\r\n        return makeBlock(atn, handles)\r\n    }\r\n}\r\n\r\nfunction plus(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    plus: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const blkStart = handle.left as PlusBlockStartState\r\n    const blkEnd = handle.right\r\n\r\n    const loop = newState<PlusLoopbackState>(atn, rule, plus, {\r\n        type: ATN_PLUS_LOOP_BACK\r\n    })\r\n    defineDecisionState(atn, loop)\r\n    const end = newState<LoopEndState>(atn, rule, plus, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    blkStart.loopback = loop\r\n    end.loopback = loop\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionMandatoryWithSeparator' : 'RepetitionMandatory', plus.idx)] = loop;\r\n    epsilon(blkEnd, loop) // block can see loop back\r\n\r\n    // Depending on whether we have a separator we put the exit transition at index 1 or 0\r\n    // This influences the chosen option in the lookahead DFA\r\n    if (sep === undefined) {\r\n        epsilon(loop, blkStart) // loop back to start\r\n        epsilon(loop, end) // exit\r\n    } else {\r\n        epsilon(loop, end) // exit\r\n        // loop back to start with separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, blkStart)\r\n    }\r\n\r\n    return {\r\n        left: blkStart,\r\n        right: end\r\n    }\r\n}\r\n\r\nfunction star(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    star: IProductionWithOccurrence,\r\n    handle: ATNHandle,\r\n    sep?: ATNHandle\r\n): ATNHandle {\r\n    const start = handle.left\r\n    const end = handle.right\r\n\r\n    const entry = newState<StarLoopEntryState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_ENTRY\r\n    })\r\n    defineDecisionState(atn, entry)\r\n    const loopEnd = newState<LoopEndState>(atn, rule, star, {\r\n        type: ATN_LOOP_END\r\n    })\r\n    const loop = newState<StarLoopbackState>(atn, rule, star, {\r\n        type: ATN_STAR_LOOP_BACK\r\n    })\r\n    entry.loopback = loop\r\n    loopEnd.loopback = loop\r\n\r\n    epsilon(entry, start) // loop enter edge (alt 2)\r\n    epsilon(entry, loopEnd) // bypass loop edge (alt 1)\r\n    epsilon(end, loop) // block end hits loop back\r\n\r\n    if (sep !== undefined) {\r\n        epsilon(loop, loopEnd) // end loop\r\n        // loop back to start of handle using separator\r\n        epsilon(loop, sep.left)\r\n        epsilon(sep.right, start)\r\n    } else {\r\n        epsilon(loop, entry) // loop back to entry/exit decision\r\n    }\r\n\r\n    atn.decisionMap[buildATNKey(rule, sep ? 'RepetitionWithSeparator' : 'Repetition', star.idx)] = entry;\r\n    return {\r\n        left: entry,\r\n        right: loopEnd\r\n    }\r\n}\r\n\r\nfunction optional(atn: ATN, rule: Rule, optional: Option, handle: ATNHandle): ATNHandle {\r\n    const start = handle.left as DecisionState\r\n    const end = handle.right\r\n\r\n    epsilon(start, end)\r\n\r\n    atn.decisionMap[buildATNKey(rule, 'Option', optional.idx)] = start;\r\n    return handle\r\n}\r\n\r\nfunction defineDecisionState(atn: ATN, state: DecisionState): number {\r\n    atn.decisionStates.push(state)\r\n    state.decision = atn.decisionStates.length - 1\r\n    return state.decision\r\n}\r\n\r\nfunction makeAlts(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    start: BlockStartState,\r\n    production: IProductionWithOccurrence,\r\n    ...alts: (ATNHandle | undefined)[]\r\n): ATNHandle {\r\n    const end = newState<BlockEndState>(atn, rule, production, {\r\n        type: ATN_BLOCK_END,\r\n        start\r\n    })\r\n    start.end = end\r\n    for (const alt of alts) {\r\n        if (alt !== undefined) {\r\n            // hook alts up to decision block\r\n            epsilon(start, alt.left)\r\n            epsilon(alt.right, end)\r\n        } else {\r\n            epsilon(start, end)\r\n        }\r\n    }\r\n\r\n    const handle: ATNHandle = {\r\n        left: start as ATNState,\r\n        right: end\r\n    }\r\n    atn.decisionMap[buildATNKey(rule, getProdType(production), production.idx)] = start\r\n    return handle\r\n}\r\n\r\nfunction getProdType(production: IProduction): LookaheadProductionType {\r\n    if (production instanceof Alternation) {\r\n        return 'Alternation';\r\n    } else if (production instanceof Option) {\r\n        return 'Option';\r\n    } else if (production instanceof Repetition) {\r\n        return 'Repetition';\r\n    } else if (production instanceof RepetitionWithSeparator) {\r\n        return 'RepetitionWithSeparator';\r\n    } else if (production instanceof RepetitionMandatory) {\r\n        return 'RepetitionMandatory';\r\n    } else if (production instanceof RepetitionMandatoryWithSeparator) {\r\n        return 'RepetitionMandatoryWithSeparator';\r\n    } else {\r\n        throw new Error('Invalid production type encountered');\r\n    }\r\n}\r\n\r\nfunction makeBlock(atn: ATN, alts: ATNHandle[]): ATNHandle {\r\n    const altsLength = alts.length\r\n    for (let i = 0; i < altsLength - 1; i++) {\r\n        const handle = alts[i]\r\n        let transition: Transition | undefined\r\n        if (handle.left.transitions.length === 1) {\r\n            transition = handle.left.transitions[0]\r\n        }\r\n        const isRuleTransition = transition instanceof RuleTransition\r\n        const ruleTransition = transition as RuleTransition\r\n        const next = alts[i + 1].left\r\n        if (\r\n            handle.left.type === ATN_BASIC &&\r\n            handle.right.type === ATN_BASIC &&\r\n            transition !== undefined &&\r\n            ((isRuleTransition && ruleTransition.followState === handle.right) ||\r\n                transition.target === handle.right)\r\n        ) {\r\n            // we can avoid epsilon edge to next element\r\n            if (isRuleTransition) {\r\n                ruleTransition.followState = next\r\n            } else {\r\n                transition.target = next\r\n            }\r\n            removeState(atn, handle.right) // we skipped over this state\r\n        } else {\r\n            // need epsilon if previous block's right end node is complex\r\n            epsilon(handle.right, next)\r\n        }\r\n    }\r\n\r\n    const first = alts[0]\r\n    const last = alts[altsLength - 1]\r\n    return {\r\n        left: first.left,\r\n        right: last.right\r\n    }\r\n}\r\n\r\nfunction tokenRef(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    tokenType: TokenType,\r\n    production: IProductionWithOccurrence\r\n): ATNHandle {\r\n    const left = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicState>(atn, rule, production, {\r\n        type: ATN_BASIC\r\n    })\r\n    addTransition(left, new AtomTransition(right, tokenType))\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction ruleRef(\r\n    atn: ATN,\r\n    currentRule: Rule,\r\n    nonTerminal: NonTerminal\r\n): ATNHandle {\r\n    const rule = nonTerminal.referencedRule\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    const left = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n    const right = newState<BasicBlockStartState>(atn, currentRule, nonTerminal, {\r\n        type: ATN_BASIC\r\n    })\r\n\r\n    const call = new RuleTransition(start, rule, right)\r\n    addTransition(left, call)\r\n\r\n    return {\r\n        left,\r\n        right\r\n    }\r\n}\r\n\r\nfunction buildRuleHandle(atn: ATN, rule: Rule, block: ATNHandle): ATNHandle {\r\n    const start = atn.ruleToStartState.get(rule)!\r\n    epsilon(start, block.left)\r\n    const stop = atn.ruleToStopState.get(rule)!\r\n    epsilon(block.right, stop)\r\n    const handle: ATNHandle = {\r\n        left: start,\r\n        right: stop\r\n    }\r\n    return handle\r\n}\r\n\r\nfunction epsilon(a: ATNBaseState, b: ATNBaseState): void {\r\n    const transition = new EpsilonTransition(b as ATNState)\r\n    addTransition(a, transition)\r\n}\r\n\r\nfunction newState<T extends ATNState>(\r\n    atn: ATN,\r\n    rule: Rule,\r\n    production: IProductionWithOccurrence | undefined,\r\n    partial: Partial<T>\r\n): T {\r\n    const t: T = {\r\n        atn,\r\n        production,\r\n        epsilonOnlyTransitions: false,\r\n        rule,\r\n        transitions: [],\r\n        nextTokenWithinRule: [],\r\n        stateNumber: atn.states.length,\r\n        ...partial\r\n    } as unknown as T\r\n    atn.states.push(t)\r\n    return t\r\n}\r\n\r\nfunction addTransition(state: ATNBaseState, transition: Transition) {\r\n    // A single ATN state can only contain epsilon transitions or non-epsilon transitions\r\n    // Because they are never mixed, only setting the property for the first transition is fine\r\n    if (state.transitions.length === 0) {\r\n        state.epsilonOnlyTransitions = transition.isEpsilon()\r\n    }\r\n    state.transitions.push(transition)\r\n}\r\n\r\nfunction removeState(atn: ATN, state: ATNState): void {\r\n    atn.states.splice(atn.states.indexOf(state), 1)\r\n}\r\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport map from \"lodash-es/map.js\"\r\nimport { ATNState, DecisionState } from \"./atn.js\"\r\n\r\nexport interface DFA {\r\n  start?: DFAState\r\n  states: Record<string, DFAState>\r\n  decision: number\r\n  atnStartState: DecisionState\r\n}\r\n\r\nexport interface DFAState {\r\n  configs: ATNConfigSet\r\n  edges: Record<number, DFAState>\r\n  isAcceptState: boolean\r\n  prediction: number\r\n}\r\n\r\nexport const DFA_ERROR = {} as DFAState\r\n\r\nexport interface ATNConfig {\r\n  state: ATNState\r\n  alt: number\r\n  stack: ATNState[]\r\n}\r\n\r\nexport class ATNConfigSet {\r\n  private map: Record<string, number> = {}\r\n  private configs: ATNConfig[] = []\r\n\r\n  uniqueAlt: number | undefined\r\n\r\n  get size(): number {\r\n    return this.configs.length\r\n  }\r\n\r\n  finalize(): void {\r\n    // Empties the map to free up memory\r\n    this.map = {}\r\n  }\r\n\r\n  add(config: ATNConfig): void {\r\n    const key = getATNConfigKey(config)\r\n    // Only add configs which don't exist in our map already\r\n    // While this does not influence the actual algorithm, adding them anyway would massively increase memory consumption\r\n    if (!(key in this.map)) {\r\n      this.map[key] = this.configs.length\r\n      this.configs.push(config)\r\n    }\r\n  }\r\n\r\n  get elements(): readonly ATNConfig[] {\r\n    return this.configs\r\n  }\r\n\r\n  get alts(): number[] {\r\n    return map(this.configs, (e) => e.alt)\r\n  }\r\n\r\n  get key(): string {\r\n    let value = \"\"\r\n    for (const k in this.map) {\r\n      value += k + \":\"\r\n    }\r\n    return value\r\n  }\r\n}\r\n\r\nexport function getATNConfigKey(config: ATNConfig, alt = true) {\r\n  return `${alt ? `a${config.alt}` : \"\"}s${\r\n    config.state.stateNumber\r\n  }:${config.stack.map((e) => e.stateNumber.toString()).join(\"_\")}`\r\n}\r\n","import baseIteratee from './_baseIteratee.js';\nimport baseUniq from './_baseUniq.js';\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nexport default uniqBy;\n","/******************************************************************************\r\n * Copyright 2022 TypeFox GmbH\r\n * This program and the accompanying materials are made available under the\r\n * terms of the MIT License, which is available in the project root.\r\n ******************************************************************************/\r\n\r\nimport {\r\n    IToken,\r\n    TokenType,\r\n    tokenMatcher,\r\n    tokenLabel,\r\n    Rule,\r\n    IProductionWithOccurrence,\r\n    NonTerminal,\r\n    Alternation,\r\n    Option,\r\n    RepetitionMandatory,\r\n    RepetitionMandatoryWithSeparator,\r\n    RepetitionWithSeparator,\r\n    Repetition,\r\n    Terminal,\r\n    BaseParser,\r\n    LLkLookaheadStrategy,\r\n    ILookaheadValidationError,\r\n    IOrAlt,\r\n    getLookaheadPaths,\r\n    OptionalProductionType\r\n} from \"chevrotain\";\r\nimport {\r\n    ATN,\r\n    ATNState,\r\n    ATN_RULE_STOP,\r\n    AtomTransition,\r\n    buildATNKey,\r\n    createATN,\r\n    DecisionState,\r\n    EpsilonTransition,\r\n    RuleTransition,\r\n    Transition\r\n} from \"./atn.js\";\r\nimport {\r\n    ATNConfig,\r\n    ATNConfigSet,\r\n    DFA,\r\n    DFAState,\r\n    DFA_ERROR,\r\n    getATNConfigKey\r\n} from \"./dfa.js\";\r\nimport min from \"lodash-es/min.js\";\r\nimport flatMap from \"lodash-es/flatMap.js\";\r\nimport uniqBy from \"lodash-es/uniqBy.js\";\r\nimport map from \"lodash-es/map.js\";\r\nimport flatten from \"lodash-es/flatten.js\";\r\nimport forEach from \"lodash-es/forEach.js\";\r\nimport isEmpty from \"lodash-es/isEmpty.js\";\r\nimport reduce from \"lodash-es/reduce.js\";\r\n\r\ntype DFACache = (predicateSet: PredicateSet) => DFA\r\n\r\nexport type AmbiguityReport = (message: string) => void;\r\n\r\nfunction createDFACache(startState: DecisionState, decision: number): DFACache {\r\n    const map: Record<string, DFA | undefined> = {}\r\n    return (predicateSet) => {\r\n        const key = predicateSet.toString()\r\n        let existing = map[key]\r\n        if (existing !== undefined) {\r\n            return existing\r\n        } else {\r\n            existing = {\r\n                atnStartState: startState,\r\n                decision,\r\n                states: {}\r\n            }\r\n            map[key] = existing\r\n            return existing\r\n        }\r\n    }\r\n}\r\n\r\nclass PredicateSet {\r\n    private predicates: boolean[] = []\r\n\r\n    is(index: number): boolean {\r\n        return index >= this.predicates.length || this.predicates[index]\r\n    }\r\n\r\n    set(index: number, value: boolean) {\r\n        this.predicates[index] = value\r\n    }\r\n\r\n    toString(): string {\r\n        let value = \"\"\r\n        const size = this.predicates.length\r\n        for (let i = 0; i < size; i++) {\r\n            value += this.predicates[i] === true ? \"1\" : \"0\"\r\n        }\r\n        return value\r\n    }\r\n}\r\n\r\ninterface AdaptivePredictError {\r\n    tokenPath: IToken[]\r\n    possibleTokenTypes: TokenType[]\r\n    actualToken: IToken\r\n}\r\n\r\nconst EMPTY_PREDICATES = new PredicateSet()\r\n\r\nexport interface LLStarLookaheadOptions {\r\n    logging?: AmbiguityReport\r\n}\r\n\r\nexport class LLStarLookaheadStrategy extends LLkLookaheadStrategy {\r\n\r\n    private atn: ATN;\r\n    private dfas: DFACache[];\r\n    private logging: AmbiguityReport;\r\n\r\n    constructor(options?: LLStarLookaheadOptions) {\r\n        super();\r\n        this.logging = options?.logging ?? ((message) => console.log(message));\r\n    }\r\n\r\n    override initialize(options: { rules: Rule[] }): void {\r\n        this.atn = createATN(options.rules);\r\n        this.dfas = initATNSimulator(this.atn);\r\n    }\r\n\r\n    override validateAmbiguousAlternationAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override validateEmptyOrAlternatives(): ILookaheadValidationError[] {\r\n        return [];\r\n    }\r\n\r\n    override buildLookaheadForAlternation(options: {\r\n        prodOccurrence: number;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        hasPredicates: boolean;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser, orAlts?: IOrAlt<any>[] | undefined) => number | undefined {\r\n        const { prodOccurrence, rule, hasPredicates, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, 'Alternation', prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const partialAlts: (TokenType | undefined)[][] = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType: \"Alternation\",\r\n                rule: rule\r\n            }),\r\n            (currAlt) => map(currAlt, (path) => path[0])\r\n        )\r\n\r\n        if (isLL1Sequence(partialAlts, false) && !dynamicTokensEnabled) {\r\n            const choiceToAlt = reduce(\r\n                partialAlts,\r\n                (result, currAlt, idx) => {\r\n                    forEach(currAlt, (currTokType) => {\r\n                        if (currTokType) {\r\n                            result[currTokType.tokenTypeIdx!] = idx\r\n                            forEach(currTokType.categoryMatches!, (currExtendingType) => {\r\n                                result[currExtendingType] = idx\r\n                            })\r\n                        }\r\n                    })\r\n                    return result\r\n                },\r\n                {} as Record<number, number>\r\n            )\r\n\r\n            if (hasPredicates) {\r\n                return function (this: BaseParser, orAlts) {\r\n                    const nextToken = this.LA(1)\r\n                    const prediction: number | undefined = choiceToAlt[nextToken.tokenTypeIdx]\r\n                    if (orAlts !== undefined && prediction !== undefined) {\r\n                        const gate = orAlts[prediction]?.GATE\r\n                        if (gate !== undefined && gate.call(this) === false) {\r\n                            return undefined;\r\n                        }\r\n                    }\r\n                    return prediction\r\n                }\r\n            } else {\r\n                return function (this: BaseParser): number | undefined {\r\n                    const nextToken = this.LA(1)\r\n                    return choiceToAlt[nextToken.tokenTypeIdx];\r\n                }\r\n            }\r\n        } else if (hasPredicates) {\r\n            return function (this: BaseParser, orAlts) {\r\n                const predicates = new PredicateSet()\r\n                const length = orAlts === undefined ? 0 : orAlts.length\r\n                for (let i = 0; i < length; i++) {\r\n                    const gate = orAlts?.[i].GATE\r\n                    predicates.set(i, gate === undefined || gate.call(this))\r\n                }\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, predicates, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        } else {\r\n            return function (this: BaseParser) {\r\n                const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging);\r\n                return typeof result === 'number' ? result : undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    override buildLookaheadForOptional(options: {\r\n        prodOccurrence: number;\r\n        prodType: OptionalProductionType;\r\n        rule: Rule;\r\n        maxLookahead: number;\r\n        dynamicTokensEnabled: boolean\r\n    }): (this: BaseParser) => boolean {\r\n        const { prodOccurrence, rule, prodType, dynamicTokensEnabled } = options;\r\n        const dfas = this.dfas;\r\n        const logging = this.logging;\r\n        const key = buildATNKey(rule, prodType, prodOccurrence);\r\n        const decisionState = this.atn.decisionMap[key];\r\n        const decisionIndex = decisionState.decision;\r\n        const alts = map(\r\n            getLookaheadPaths({\r\n                maxLookahead: 1,\r\n                occurrence: prodOccurrence,\r\n                prodType,\r\n                rule\r\n            }),\r\n            (e) => {\r\n              return map(e, (g) => g[0])\r\n            }\r\n          )\r\n        \r\n          if (isLL1Sequence(alts) && alts[0][0] && !dynamicTokensEnabled) {\r\n            const alt = alts[0]\r\n            const singleTokensTypes = flatten(alt)\r\n        \r\n            if (\r\n              singleTokensTypes.length === 1 &&\r\n              isEmpty(singleTokensTypes[0].categoryMatches)\r\n            ) {\r\n              const expectedTokenType = singleTokensTypes[0]\r\n              const expectedTokenUniqueKey = expectedTokenType.tokenTypeIdx\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                return this.LA(1).tokenTypeIdx === expectedTokenUniqueKey\r\n              }\r\n            } else {\r\n              const choiceToAlt = reduce(\r\n                singleTokensTypes,\r\n                (result, currTokType) => {\r\n                  if (currTokType !== undefined) {\r\n                    result[currTokType.tokenTypeIdx!] = true\r\n                    forEach(currTokType.categoryMatches, (currExtendingType) => {\r\n                      result[currExtendingType] = true\r\n                    })\r\n                  }\r\n                  return result\r\n                },\r\n                {} as Record<number, boolean>\r\n              )\r\n        \r\n              return function (this: BaseParser): boolean {\r\n                const nextToken = this.LA(1)\r\n                return choiceToAlt[nextToken.tokenTypeIdx] === true\r\n              }\r\n            }\r\n          }\r\n          return function (this: BaseParser) {\r\n            const result = adaptivePredict.call(this, dfas, decisionIndex, EMPTY_PREDICATES, logging)\r\n              return typeof result === \"object\" ? false : result === 0;\r\n          }\r\n    }\r\n\r\n}\r\n\r\nfunction isLL1Sequence(sequences: (TokenType | undefined)[][], allowEmpty = true): boolean {\r\n    const fullSet = new Set<number>()\r\n\r\n    for (const alt of sequences) {\r\n        const altSet = new Set<number>()\r\n        for (const tokType of alt) {\r\n            if (tokType === undefined) {\r\n                if (allowEmpty) {\r\n                    // Epsilon production encountered\r\n                    break\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n            const indices = [tokType.tokenTypeIdx!].concat(tokType.categoryMatches!)\r\n            for (const index of indices) {\r\n                if (fullSet.has(index)) {\r\n                    if (!altSet.has(index)) {\r\n                        return false\r\n                    }\r\n                } else {\r\n                    fullSet.add(index)\r\n                    altSet.add(index)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction initATNSimulator(atn: ATN): DFACache[] {\r\n    const decisionLength = atn.decisionStates.length\r\n    const decisionToDFA: DFACache[] = Array(decisionLength)\r\n    for (let i = 0; i < decisionLength; i++) {\r\n        decisionToDFA[i] = createDFACache(atn.decisionStates[i], i)\r\n    }\r\n    return decisionToDFA;\r\n}\r\n\r\nfunction adaptivePredict(\r\n    this: BaseParser,\r\n    dfaCaches: DFACache[],\r\n    decision: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    const dfa = dfaCaches[decision](predicateSet)\r\n    let start = dfa.start\r\n    if (start === undefined) {\r\n        const closure = computeStartState(dfa.atnStartState as ATNState)\r\n        start = addDFAState(dfa, newDFAState(closure))\r\n        dfa.start = start\r\n    }\r\n\r\n    const alt = performLookahead.apply(this, [dfa, start, predicateSet, logging])\r\n    return alt\r\n}\r\n\r\nfunction performLookahead(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    s0: DFAState,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): number | AdaptivePredictError {\r\n    let previousD = s0\r\n\r\n    let i = 1\r\n    const path: IToken[] = []\r\n    let t = this.LA(i++)\r\n\r\n    while (true) {\r\n        let d = getExistingTargetState(previousD, t)\r\n        if (d === undefined) {\r\n            d = computeLookaheadTarget.apply(this, [dfa, previousD, t, i, predicateSet, logging])\r\n        }\r\n\r\n        if (d === DFA_ERROR) {\r\n            return buildAdaptivePredictError(path, previousD, t)\r\n        }\r\n\r\n        if (d.isAcceptState === true) {\r\n            return d.prediction\r\n        }\r\n\r\n        previousD = d\r\n        path.push(t)\r\n        t = this.LA(i++)\r\n    }\r\n}\r\n\r\nfunction computeLookaheadTarget(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    previousD: DFAState,\r\n    token: IToken,\r\n    lookahead: number,\r\n    predicateSet: PredicateSet,\r\n    logging: AmbiguityReport\r\n): DFAState {\r\n    const reach = computeReachSet(previousD.configs, token, predicateSet)\r\n    if (reach.size === 0) {\r\n        addDFAEdge(dfa, previousD, token, DFA_ERROR)\r\n        return DFA_ERROR\r\n    }\r\n\r\n    let newState = newDFAState(reach)\r\n    const predictedAlt = getUniqueAlt(reach, predicateSet)\r\n\r\n    if (predictedAlt !== undefined) {\r\n        newState.isAcceptState = true\r\n        newState.prediction = predictedAlt\r\n        newState.configs.uniqueAlt = predictedAlt\r\n    } else if (hasConflictTerminatingPrediction(reach)) {\r\n        const prediction = min(reach.alts)!\r\n        newState.isAcceptState = true\r\n        newState.prediction = prediction\r\n        newState.configs.uniqueAlt = prediction\r\n        reportLookaheadAmbiguity.apply(this, [dfa, lookahead, reach.alts, logging])\r\n    }\r\n\r\n    newState = addDFAEdge(dfa, previousD, token, newState)\r\n    return newState\r\n}\r\n\r\nfunction reportLookaheadAmbiguity(\r\n    this: BaseParser,\r\n    dfa: DFA,\r\n    lookahead: number,\r\n    ambiguityIndices: number[],\r\n    logging: AmbiguityReport\r\n) {\r\n    const prefixPath: TokenType[] = []\r\n    for (let i = 1; i <= lookahead; i++) {\r\n        prefixPath.push(this.LA(i).tokenType)\r\n    }\r\n    const atnState = dfa.atnStartState\r\n    const topLevelRule = atnState.rule\r\n    const production = atnState.production\r\n    const message = buildAmbiguityError({\r\n        topLevelRule,\r\n        ambiguityIndices,\r\n        production,\r\n        prefixPath\r\n    })\r\n    logging(message)\r\n}\r\n\r\nfunction buildAmbiguityError(options: {\r\n    topLevelRule: Rule\r\n    prefixPath: TokenType[]\r\n    ambiguityIndices: number[]\r\n    production: IProductionWithOccurrence\r\n}): string {\r\n    const pathMsg = map(options.prefixPath, (currtok) =>\r\n        tokenLabel(currtok)\r\n    ).join(\", \")\r\n    const occurrence =\r\n        options.production.idx === 0 ? \"\" : options.production.idx\r\n    let currMessage =\r\n        `Ambiguous Alternatives Detected: <${options.ambiguityIndices.join(\r\n            \", \"\r\n        )}> in <${getProductionDslName(options.production)}${occurrence}>` +\r\n        ` inside <${options.topLevelRule.name}> Rule,\\n` +\r\n        `<${pathMsg}> may appears as a prefix path in all these alternatives.\\n`\r\n\r\n    currMessage =\r\n        currMessage +\r\n        `See: https://chevrotain.io/docs/guide/resolving_grammar_errors.html#AMBIGUOUS_ALTERNATIVES\\n` +\r\n        `For Further details.`\r\n    return currMessage\r\n}\r\n\r\nfunction getProductionDslName(prod: IProductionWithOccurrence): string {\r\n    if (prod instanceof NonTerminal) {\r\n        return \"SUBRULE\"\r\n    } else if (prod instanceof Option) {\r\n        return \"OPTION\"\r\n    } else if (prod instanceof Alternation) {\r\n        return \"OR\"\r\n    } else if (prod instanceof RepetitionMandatory) {\r\n        return \"AT_LEAST_ONE\"\r\n    } else if (prod instanceof RepetitionMandatoryWithSeparator) {\r\n        return \"AT_LEAST_ONE_SEP\"\r\n    } else if (prod instanceof RepetitionWithSeparator) {\r\n        return \"MANY_SEP\"\r\n    } else if (prod instanceof Repetition) {\r\n        return \"MANY\"\r\n    } else if (prod instanceof Terminal) {\r\n        return \"CONSUME\"\r\n    } else {\r\n        throw Error(\"non exhaustive match\")\r\n    }\r\n}\r\n\r\nfunction buildAdaptivePredictError(\r\n    path: IToken[],\r\n    previous: DFAState,\r\n    current: IToken\r\n): AdaptivePredictError {\r\n    const nextTransitions = flatMap(\r\n        previous.configs.elements,\r\n        (e) => e.state.transitions\r\n    )\r\n    const nextTokenTypes = uniqBy(\r\n        nextTransitions\r\n            .filter((e): e is AtomTransition => e instanceof AtomTransition)\r\n            .map((e) => e.tokenType),\r\n        (e) => e.tokenTypeIdx\r\n    )\r\n    return {\r\n        actualToken: current,\r\n        possibleTokenTypes: nextTokenTypes,\r\n        tokenPath: path\r\n    }\r\n}\r\n\r\nfunction getExistingTargetState(\r\n    state: DFAState,\r\n    token: IToken\r\n): DFAState | undefined {\r\n    return state.edges[token.tokenTypeIdx]\r\n}\r\n\r\nfunction computeReachSet(\r\n    configs: ATNConfigSet,\r\n    token: IToken,\r\n    predicateSet: PredicateSet\r\n): ATNConfigSet {\r\n    const intermediate = new ATNConfigSet()\r\n    const skippedStopStates: ATNConfig[] = []\r\n\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === false) {\r\n            continue\r\n        }\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            skippedStopStates.push(c)\r\n            continue\r\n        }\r\n        const transitionLength = c.state.transitions.length\r\n        for (let i = 0; i < transitionLength; i++) {\r\n            const transition = c.state.transitions[i]\r\n            const target = getReachableTarget(transition, token)\r\n            if (target !== undefined) {\r\n                intermediate.add({\r\n                    state: target,\r\n                    alt: c.alt,\r\n                    stack: c.stack\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let reach: ATNConfigSet | undefined\r\n\r\n    if (skippedStopStates.length === 0 && intermediate.size === 1) {\r\n        reach = intermediate\r\n    }\r\n\r\n    if (reach === undefined) {\r\n        reach = new ATNConfigSet()\r\n        for (const c of intermediate.elements) {\r\n            closure(c, reach)\r\n        }\r\n    }\r\n\r\n    if (skippedStopStates.length > 0 && !hasConfigInRuleStopState(reach)) {\r\n        for (const c of skippedStopStates) {\r\n            reach.add(c)\r\n        }\r\n    }\r\n\r\n    return reach\r\n}\r\n\r\nfunction getReachableTarget(\r\n    transition: Transition,\r\n    token: IToken\r\n): ATNState | undefined {\r\n    if (\r\n        transition instanceof AtomTransition &&\r\n        tokenMatcher(token, transition.tokenType)\r\n    ) {\r\n        return transition.target\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction getUniqueAlt(\r\n    configs: ATNConfigSet,\r\n    predicateSet: PredicateSet\r\n): number | undefined {\r\n    let alt: number | undefined\r\n    for (const c of configs.elements) {\r\n        if (predicateSet.is(c.alt) === true) {\r\n            if (alt === undefined) {\r\n                alt = c.alt\r\n            } else if (alt !== c.alt) {\r\n                return undefined\r\n            }\r\n        }\r\n    }\r\n    return alt\r\n}\r\n\r\nfunction newDFAState(closure: ATNConfigSet): DFAState {\r\n    return {\r\n        configs: closure,\r\n        edges: {},\r\n        isAcceptState: false,\r\n        prediction: -1\r\n    }\r\n}\r\n\r\nfunction addDFAEdge(\r\n    dfa: DFA,\r\n    from: DFAState,\r\n    token: IToken,\r\n    to: DFAState\r\n): DFAState {\r\n    to = addDFAState(dfa, to)\r\n    from.edges[token.tokenTypeIdx] = to\r\n    return to\r\n}\r\n\r\nfunction addDFAState(dfa: DFA, state: DFAState): DFAState {\r\n    if (state === DFA_ERROR) {\r\n        return state\r\n    }\r\n    // Repetitions have the same config set\r\n    // Therefore, storing the key of the config in a map allows us to create a loop in our DFA\r\n    const mapKey = state.configs.key\r\n    const existing = dfa.states[mapKey]\r\n    if (existing !== undefined) {\r\n        return existing\r\n    }\r\n    state.configs.finalize()\r\n    dfa.states[mapKey] = state\r\n    return state\r\n}\r\n\r\nfunction computeStartState(atnState: ATNState): ATNConfigSet {\r\n    const configs = new ATNConfigSet()\r\n\r\n    const numberOfTransitions = atnState.transitions.length\r\n    for (let i = 0; i < numberOfTransitions; i++) {\r\n        const target = atnState.transitions[i].target\r\n        const config: ATNConfig = {\r\n            state: target,\r\n            alt: i,\r\n            stack: []\r\n        }\r\n        closure(config, configs)\r\n    }\r\n\r\n    return configs\r\n}\r\n\r\nfunction closure(config: ATNConfig, configs: ATNConfigSet): void {\r\n    const p = config.state\r\n\r\n    if (p.type === ATN_RULE_STOP) {\r\n        if (config.stack.length > 0) {\r\n            const atnStack = [...config.stack]\r\n            const followState = atnStack.pop()!\r\n            const followConfig: ATNConfig = {\r\n                state: followState,\r\n                alt: config.alt,\r\n                stack: atnStack\r\n            }\r\n            closure(followConfig, configs)\r\n        } else {\r\n            // Dipping into outer context, simply add the config\r\n            // This will stop computation once every config is at the rule stop state\r\n            configs.add(config)\r\n        }\r\n        return\r\n    }\r\n\r\n    if (!p.epsilonOnlyTransitions) {\r\n        configs.add(config)\r\n    }\r\n\r\n    const transitionLength = p.transitions.length\r\n    for (let i = 0; i < transitionLength; i++) {\r\n        const transition = p.transitions[i]\r\n        const c = getEpsilonTarget(config, transition)\r\n\r\n        if (c !== undefined) {\r\n            closure(c, configs)\r\n        }\r\n    }\r\n}\r\n\r\nfunction getEpsilonTarget(\r\n    config: ATNConfig,\r\n    transition: Transition\r\n): ATNConfig | undefined {\r\n    if (transition instanceof EpsilonTransition) {\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack: config.stack\r\n        }\r\n    } else if (transition instanceof RuleTransition) {\r\n        const stack = [...config.stack, transition.followState]\r\n        return {\r\n            state: transition.target,\r\n            alt: config.alt,\r\n            stack\r\n        }\r\n    }\r\n    return undefined\r\n}\r\n\r\nfunction hasConfigInRuleStopState(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type === ATN_RULE_STOP) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction allConfigsInRuleStopStates(configs: ATNConfigSet): boolean {\r\n    for (const c of configs.elements) {\r\n        if (c.state.type !== ATN_RULE_STOP) {\r\n            return false\r\n        }\r\n    }\r\n    return true\r\n}\r\n\r\nfunction hasConflictTerminatingPrediction(configs: ATNConfigSet): boolean {\r\n    if (allConfigsInRuleStopStates(configs)) {\r\n        return true\r\n    }\r\n    const altSets = getConflictingAltSets(configs.elements)\r\n    const heuristic =\r\n        hasConflictingAltSet(altSets) && !hasStateAssociatedWithOneAlt(altSets)\r\n    return heuristic\r\n}\r\n\r\nfunction getConflictingAltSets(\r\n    configs: readonly ATNConfig[]\r\n): Map<string, Record<number, boolean>> {\r\n    const configToAlts = new Map<string, Record<number, boolean>>()\r\n    for (const c of configs) {\r\n        const key = getATNConfigKey(c, false)\r\n        let alts = configToAlts.get(key)\r\n        if (alts === undefined) {\r\n            alts = {}\r\n            configToAlts.set(key, alts)\r\n        }\r\n        alts[c.alt] = true\r\n    }\r\n    return configToAlts\r\n}\r\n\r\nfunction hasConflictingAltSet(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length > 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n\r\nfunction hasStateAssociatedWithOneAlt(\r\n    altSets: Map<string, Record<number, boolean>>\r\n): boolean {\r\n    for (const value of Array.from(altSets.values())) {\r\n        if (Object.keys(value).length === 1) {\r\n            return true\r\n        }\r\n    }\r\n    return false\r\n}\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nexport var DocumentUri;\n(function (DocumentUri) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    DocumentUri.is = is;\n})(DocumentUri || (DocumentUri = {}));\nexport var URI;\n(function (URI) {\n    function is(value) {\n        return typeof value === 'string';\n    }\n    URI.is = is;\n})(URI || (URI = {}));\nexport var integer;\n(function (integer) {\n    integer.MIN_VALUE = -2147483648;\n    integer.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && integer.MIN_VALUE <= value && value <= integer.MAX_VALUE;\n    }\n    integer.is = is;\n})(integer || (integer = {}));\nexport var uinteger;\n(function (uinteger) {\n    uinteger.MIN_VALUE = 0;\n    uinteger.MAX_VALUE = 2147483647;\n    function is(value) {\n        return typeof value === 'number' && uinteger.MIN_VALUE <= value && value <= uinteger.MAX_VALUE;\n    }\n    uinteger.is = is;\n})(uinteger || (uinteger = {}));\n/**\n * The Position namespace provides helper functions to work with\n * {@link Position} literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        if (line === Number.MAX_VALUE) {\n            line = uinteger.MAX_VALUE;\n        }\n        if (character === Number.MAX_VALUE) {\n            character = uinteger.MAX_VALUE;\n        }\n        return { line, character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Position} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.line) && Is.uinteger(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * {@link Range} literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.uinteger(one) && Is.uinteger(two) && Is.uinteger(three) && Is.uinteger(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(`Range#create called with invalid arguments[${one}, ${two}, ${three}, ${four}]`);\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Range} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * {@link Location} literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri, range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Location} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The LocationLink namespace provides helper functions to work with\n * {@link LocationLink} literals.\n */\nexport var LocationLink;\n(function (LocationLink) {\n    /**\n     * Creates a LocationLink literal.\n     * @param targetUri The definition's uri.\n     * @param targetRange The full range of the definition.\n     * @param targetSelectionRange The span of the symbol definition at the target.\n     * @param originSelectionRange The span of the symbol being defined in the originating source file.\n     */\n    function create(targetUri, targetRange, targetSelectionRange, originSelectionRange) {\n        return { targetUri, targetRange, targetSelectionRange, originSelectionRange };\n    }\n    LocationLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link LocationLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.targetRange) && Is.string(candidate.targetUri)\n            && Range.is(candidate.targetSelectionRange)\n            && (Range.is(candidate.originSelectionRange) || Is.undefined(candidate.originSelectionRange));\n    }\n    LocationLink.is = is;\n})(LocationLink || (LocationLink = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link Color} literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red,\n            green,\n            blue,\n            alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Color} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.numberRange(candidate.red, 0, 1)\n            && Is.numberRange(candidate.green, 0, 1)\n            && Is.numberRange(candidate.blue, 0, 1)\n            && Is.numberRange(candidate.alpha, 0, 1);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * {@link ColorInformation} literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range,\n            color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * {@link ColorPresentation} literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label,\n            textEdit,\n            additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ColorInformation} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * A set of predefined range kinds.\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind.Comment = 'comment';\n    /**\n     * Folding range for an import or include\n     */\n    FoldingRangeKind.Imports = 'imports';\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind.Region = 'region';\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * {@link FoldingRange} literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind, collapsedText) {\n        const result = {\n            startLine,\n            endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        if (Is.defined(collapsedText)) {\n            result.collapsedText = collapsedText;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FoldingRange} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.uinteger(candidate.startLine) && Is.uinteger(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.uinteger(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.uinteger(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * {@link DiagnosticRelatedInformation} literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location,\n            message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DiagnosticRelatedInformation} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The diagnostic tags.\n *\n * @since 3.15.0\n */\nexport var DiagnosticTag;\n(function (DiagnosticTag) {\n    /**\n     * Unused or unnecessary code.\n     *\n     * Clients are allowed to render diagnostics with this tag faded out instead of having\n     * an error squiggle.\n     */\n    DiagnosticTag.Unnecessary = 1;\n    /**\n     * Deprecated or obsolete code.\n     *\n     * Clients are allowed to rendered diagnostics with this tag strike through.\n     */\n    DiagnosticTag.Deprecated = 2;\n})(DiagnosticTag || (DiagnosticTag = {}));\n/**\n * The CodeDescription namespace provides functions to deal with descriptions for diagnostic codes.\n *\n * @since 3.16.0\n */\nexport var CodeDescription;\n(function (CodeDescription) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.href);\n    }\n    CodeDescription.is = is;\n})(CodeDescription || (CodeDescription = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * {@link Diagnostic} literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        let result = { range, message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Diagnostic} interface.\n     */\n    function is(value) {\n        var _a;\n        let candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.integer(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.undefined(candidate.codeDescription) || (Is.string((_a = candidate.codeDescription) === null || _a === void 0 ? void 0 : _a.href)))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * {@link Command} literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command, ...args) {\n        let result = { title, command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link Command} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range, newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates an insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\nexport var ChangeAnnotation;\n(function (ChangeAnnotation) {\n    function create(label, needsConfirmation, description) {\n        const result = { label };\n        if (needsConfirmation !== undefined) {\n            result.needsConfirmation = needsConfirmation;\n        }\n        if (description !== undefined) {\n            result.description = description;\n        }\n        return result;\n    }\n    ChangeAnnotation.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Is.string(candidate.label) &&\n            (Is.boolean(candidate.needsConfirmation) || candidate.needsConfirmation === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    ChangeAnnotation.is = is;\n})(ChangeAnnotation || (ChangeAnnotation = {}));\nexport var ChangeAnnotationIdentifier;\n(function (ChangeAnnotationIdentifier) {\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate);\n    }\n    ChangeAnnotationIdentifier.is = is;\n})(ChangeAnnotationIdentifier || (ChangeAnnotationIdentifier = {}));\nexport var AnnotatedTextEdit;\n(function (AnnotatedTextEdit) {\n    /**\n     * Creates an annotated replace text edit.\n     *\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     * @param annotation The annotation.\n     */\n    function replace(range, newText, annotation) {\n        return { range, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.replace = replace;\n    /**\n     * Creates an annotated insert text edit.\n     *\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     * @param annotation The annotation.\n     */\n    function insert(position, newText, annotation) {\n        return { range: { start: position, end: position }, newText, annotationId: annotation };\n    }\n    AnnotatedTextEdit.insert = insert;\n    /**\n     * Creates an annotated delete text edit.\n     *\n     * @param range The range of text to be deleted.\n     * @param annotation The annotation.\n     */\n    function del(range, annotation) {\n        return { range, newText: '', annotationId: annotation };\n    }\n    AnnotatedTextEdit.del = del;\n    function is(value) {\n        const candidate = value;\n        return TextEdit.is(candidate) && (ChangeAnnotation.is(candidate.annotationId) || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    AnnotatedTextEdit.is = is;\n})(AnnotatedTextEdit || (AnnotatedTextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument, edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate)\n            && OptionalVersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var CreateFile;\n(function (CreateFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'create',\n            uri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    CreateFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'create' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    CreateFile.is = is;\n})(CreateFile || (CreateFile = {}));\nexport var RenameFile;\n(function (RenameFile) {\n    function create(oldUri, newUri, options, annotation) {\n        let result = {\n            kind: 'rename',\n            oldUri,\n            newUri\n        };\n        if (options !== undefined && (options.overwrite !== undefined || options.ignoreIfExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    RenameFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'rename' && Is.string(candidate.oldUri) && Is.string(candidate.newUri) && (candidate.options === undefined ||\n            ((candidate.options.overwrite === undefined || Is.boolean(candidate.options.overwrite)) && (candidate.options.ignoreIfExists === undefined || Is.boolean(candidate.options.ignoreIfExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    RenameFile.is = is;\n})(RenameFile || (RenameFile = {}));\nexport var DeleteFile;\n(function (DeleteFile) {\n    function create(uri, options, annotation) {\n        let result = {\n            kind: 'delete',\n            uri\n        };\n        if (options !== undefined && (options.recursive !== undefined || options.ignoreIfNotExists !== undefined)) {\n            result.options = options;\n        }\n        if (annotation !== undefined) {\n            result.annotationId = annotation;\n        }\n        return result;\n    }\n    DeleteFile.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && candidate.kind === 'delete' && Is.string(candidate.uri) && (candidate.options === undefined ||\n            ((candidate.options.recursive === undefined || Is.boolean(candidate.options.recursive)) && (candidate.options.ignoreIfNotExists === undefined || Is.boolean(candidate.options.ignoreIfNotExists)))) && (candidate.annotationId === undefined || ChangeAnnotationIdentifier.is(candidate.annotationId));\n    }\n    DeleteFile.is = is;\n})(DeleteFile || (DeleteFile = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            (candidate.changes !== undefined || candidate.documentChanges !== undefined) &&\n            (candidate.documentChanges === undefined || candidate.documentChanges.every((change) => {\n                if (Is.string(change.kind)) {\n                    return CreateFile.is(change) || RenameFile.is(change) || DeleteFile.is(change);\n                }\n                else {\n                    return TextDocumentEdit.is(change);\n                }\n            }));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nclass TextEditChangeImpl {\n    constructor(edits, changeAnnotations) {\n        this.edits = edits;\n        this.changeAnnotations = changeAnnotations;\n    }\n    insert(position, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.insert(position, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.insert(position, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.insert(position, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    replace(range, newText, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.replace(range, newText);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.replace(range, newText, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.replace(range, newText, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    delete(range, annotation) {\n        let edit;\n        let id;\n        if (annotation === undefined) {\n            edit = TextEdit.del(range);\n        }\n        else if (ChangeAnnotationIdentifier.is(annotation)) {\n            id = annotation;\n            edit = AnnotatedTextEdit.del(range, annotation);\n        }\n        else {\n            this.assertChangeAnnotations(this.changeAnnotations);\n            id = this.changeAnnotations.manage(annotation);\n            edit = AnnotatedTextEdit.del(range, id);\n        }\n        this.edits.push(edit);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    add(edit) {\n        this.edits.push(edit);\n    }\n    all() {\n        return this.edits;\n    }\n    clear() {\n        this.edits.splice(0, this.edits.length);\n    }\n    assertChangeAnnotations(value) {\n        if (value === undefined) {\n            throw new Error(`Text edit change is not configured to manage change annotations.`);\n        }\n    }\n}\n/**\n * A helper class\n */\nclass ChangeAnnotations {\n    constructor(annotations) {\n        this._annotations = annotations === undefined ? Object.create(null) : annotations;\n        this._counter = 0;\n        this._size = 0;\n    }\n    all() {\n        return this._annotations;\n    }\n    get size() {\n        return this._size;\n    }\n    manage(idOrAnnotation, annotation) {\n        let id;\n        if (ChangeAnnotationIdentifier.is(idOrAnnotation)) {\n            id = idOrAnnotation;\n        }\n        else {\n            id = this.nextId();\n            annotation = idOrAnnotation;\n        }\n        if (this._annotations[id] !== undefined) {\n            throw new Error(`Id ${id} is already in use.`);\n        }\n        if (annotation === undefined) {\n            throw new Error(`No annotation provided for id ${id}`);\n        }\n        this._annotations[id] = annotation;\n        this._size++;\n        return id;\n    }\n    nextId() {\n        this._counter++;\n        return this._counter.toString();\n    }\n}\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nexport class WorkspaceChange {\n    constructor(workspaceEdit) {\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit !== undefined) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                this._changeAnnotations = new ChangeAnnotations(workspaceEdit.changeAnnotations);\n                workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n                workspaceEdit.documentChanges.forEach((change) => {\n                    if (TextDocumentEdit.is(change)) {\n                        const textEditChange = new TextEditChangeImpl(change.edits, this._changeAnnotations);\n                        this._textEditChanges[change.textDocument.uri] = textEditChange;\n                    }\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach((key) => {\n                    const textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n        else {\n            this._workspaceEdit = {};\n        }\n    }\n    /**\n     * Returns the underlying {@link WorkspaceEdit} literal\n     * use to be returned from a workspace edit operation like rename.\n     */\n    get edit() {\n        this.initDocumentChanges();\n        if (this._changeAnnotations !== undefined) {\n            if (this._changeAnnotations.size === 0) {\n                this._workspaceEdit.changeAnnotations = undefined;\n            }\n            else {\n                this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n            }\n        }\n        return this._workspaceEdit;\n    }\n    getTextEditChange(key) {\n        if (OptionalVersionedTextDocumentIdentifier.is(key)) {\n            this.initDocumentChanges();\n            if (this._workspaceEdit.documentChanges === undefined) {\n                throw new Error('Workspace edit is not configured for document changes.');\n            }\n            const textDocument = { uri: key.uri, version: key.version };\n            let result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                const edits = [];\n                const textDocumentEdit = {\n                    textDocument,\n                    edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits, this._changeAnnotations);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            this.initChanges();\n            if (this._workspaceEdit.changes === undefined) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            let result = this._textEditChanges[key];\n            if (!result) {\n                let edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    }\n    initDocumentChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._changeAnnotations = new ChangeAnnotations();\n            this._workspaceEdit.documentChanges = [];\n            this._workspaceEdit.changeAnnotations = this._changeAnnotations.all();\n        }\n    }\n    initChanges() {\n        if (this._workspaceEdit.documentChanges === undefined && this._workspaceEdit.changes === undefined) {\n            this._workspaceEdit.changes = Object.create(null);\n        }\n    }\n    createFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = CreateFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = CreateFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    renameFile(oldUri, newUri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = RenameFile.create(oldUri, newUri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = RenameFile.create(oldUri, newUri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n    deleteFile(uri, optionsOrAnnotation, options) {\n        this.initDocumentChanges();\n        if (this._workspaceEdit.documentChanges === undefined) {\n            throw new Error('Workspace edit is not configured for document changes.');\n        }\n        let annotation;\n        if (ChangeAnnotation.is(optionsOrAnnotation) || ChangeAnnotationIdentifier.is(optionsOrAnnotation)) {\n            annotation = optionsOrAnnotation;\n        }\n        else {\n            options = optionsOrAnnotation;\n        }\n        let operation;\n        let id;\n        if (annotation === undefined) {\n            operation = DeleteFile.create(uri, options);\n        }\n        else {\n            id = ChangeAnnotationIdentifier.is(annotation) ? annotation : this._changeAnnotations.manage(annotation);\n            operation = DeleteFile.create(uri, options, id);\n        }\n        this._workspaceEdit.documentChanges.push(operation);\n        if (id !== undefined) {\n            return id;\n        }\n    }\n}\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * {@link TextDocumentIdentifier} literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link VersionedTextDocumentIdentifier} literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link VersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.integer(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The OptionalVersionedTextDocumentIdentifier namespace provides helper functions to work with\n * {@link OptionalVersionedTextDocumentIdentifier} literals.\n */\nexport var OptionalVersionedTextDocumentIdentifier;\n(function (OptionalVersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new OptionalVersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param version The document's version.\n     */\n    function create(uri, version) {\n        return { uri, version };\n    }\n    OptionalVersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link OptionalVersionedTextDocumentIdentifier} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (candidate.version === null || Is.integer(candidate.version));\n    }\n    OptionalVersionedTextDocumentIdentifier.is = is;\n})(OptionalVersionedTextDocumentIdentifier || (OptionalVersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * {@link TextDocumentItem} literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri, languageId, version, text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link TextDocumentItem} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.integer(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n    /**\n     * Checks whether the given value is a value of the {@link MarkupKind} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the {@link MarkupContent} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#snippet_syntax\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * Completion item tags are extra annotations that tweak the rendering of a completion\n * item.\n *\n * @since 3.15.0\n */\nexport var CompletionItemTag;\n(function (CompletionItemTag) {\n    /**\n     * Render a completion as obsolete, usually using a strike-out.\n     */\n    CompletionItemTag.Deprecated = 1;\n})(CompletionItemTag || (CompletionItemTag = {}));\n/**\n * The InsertReplaceEdit namespace provides functions to deal with insert / replace edits.\n *\n * @since 3.16.0\n */\nexport var InsertReplaceEdit;\n(function (InsertReplaceEdit) {\n    /**\n     * Creates a new insert / replace edit\n     */\n    function create(newText, insert, replace) {\n        return { newText, insert, replace };\n    }\n    InsertReplaceEdit.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InsertReplaceEdit} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return candidate && Is.string(candidate.newText) && Range.is(candidate.insert) && Range.is(candidate.replace);\n    }\n    InsertReplaceEdit.is = is;\n})(InsertReplaceEdit || (InsertReplaceEdit = {}));\n/**\n * How whitespace and indentation is handled during completion\n * item insertion.\n *\n * @since 3.16.0\n */\nexport var InsertTextMode;\n(function (InsertTextMode) {\n    /**\n     * The insertion or replace strings is taken as it is. If the\n     * value is multi line the lines below the cursor will be\n     * inserted using the indentation defined in the string value.\n     * The client will not apply any kind of adjustments to the\n     * string.\n     */\n    InsertTextMode.asIs = 1;\n    /**\n     * The editor adjusts leading whitespace of new lines so that\n     * they match the indentation up to the cursor of the line for\n     * which the item is accepted.\n     *\n     * Consider a line like this: <2tabs><cursor><3tabs>foo. Accepting a\n     * multi line completion item is indented using 2 tabs and all\n     * following lines inserted will be indented using 2 tabs as well.\n     */\n    InsertTextMode.adjustIndentation = 2;\n})(InsertTextMode || (InsertTextMode = {}));\nexport var CompletionItemLabelDetails;\n(function (CompletionItemLabelDetails) {\n    function is(value) {\n        const candidate = value;\n        return candidate && (Is.string(candidate.detail) || candidate.detail === undefined) &&\n            (Is.string(candidate.description) || candidate.description === undefined);\n    }\n    CompletionItemLabelDetails.is = is;\n})(CompletionItemLabelDetails || (CompletionItemLabelDetails = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&'); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the {@link MarkedString} type.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the {@link Hover} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return !!candidate && Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === undefined || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * {@link ParameterInformation} literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label, documentation } : { label };\n    }\n    ParameterInformation.create = create;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * {@link SignatureInformation} literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation, ...parameters) {\n        let result = { label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * {@link DocumentHighlight} literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     * @param kind The highlight kind\n     */\n    function create(range, kind) {\n        let result = { range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\n/**\n * Symbol tags are extra annotations that tweak the rendering of a symbol.\n *\n * @since 3.16\n */\nexport var SymbolTag;\n(function (SymbolTag) {\n    /**\n     * Render a symbol as obsolete, usually using a strike-out.\n     */\n    SymbolTag.Deprecated = 1;\n})(SymbolTag || (SymbolTag = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        let result = {\n            name,\n            kind,\n            location: { uri, range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\nexport var WorkspaceSymbol;\n(function (WorkspaceSymbol) {\n    /**\n     * Create a new workspace symbol.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param uri The resource of the location of the symbol.\n     * @param range An options range of the location.\n     * @returns A WorkspaceSymbol.\n     */\n    function create(name, kind, uri, range) {\n        return range !== undefined\n            ? { name, kind, location: { uri, range } }\n            : { name, kind, location: { uri } };\n    }\n    WorkspaceSymbol.create = create;\n})(WorkspaceSymbol || (WorkspaceSymbol = {}));\nexport var DocumentSymbol;\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        let result = {\n            name,\n            detail,\n            kind,\n            range,\n            selectionRange\n        };\n        if (children !== undefined) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentSymbol} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === undefined || Is.string(candidate.detail)) &&\n            (candidate.deprecated === undefined || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === undefined || Array.isArray(candidate.children)) &&\n            (candidate.tags === undefined || Array.isArray(candidate.tags));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Empty kind.\n     */\n    CodeActionKind.Empty = '';\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n    /**\n     * Base kind for auto-fix source actions: `source.fixAll`.\n     *\n     * Fix all actions automatically fix errors that have a clear fix that do not require user input.\n     * They should not suppress errors or perform unsafe fixes such as generating new types or classes.\n     *\n     * @since 3.15.0\n     */\n    CodeActionKind.SourceFixAll = 'source.fixAll';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The reason why code actions were requested.\n *\n * @since 3.17.0\n */\nexport var CodeActionTriggerKind;\n(function (CodeActionTriggerKind) {\n    /**\n     * Code actions were explicitly requested by the user or by an extension.\n     */\n    CodeActionTriggerKind.Invoked = 1;\n    /**\n     * Code actions were requested automatically.\n     *\n     * This typically happens when current selection in a file changes, but can\n     * also be triggered when file content changes.\n     */\n    CodeActionTriggerKind.Automatic = 2;\n})(CodeActionTriggerKind || (CodeActionTriggerKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * {@link CodeActionContext} literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only, triggerKind) {\n        let result = { diagnostics };\n        if (only !== undefined && only !== null) {\n            result.only = only;\n        }\n        if (triggerKind !== undefined && triggerKind !== null) {\n            result.triggerKind = triggerKind;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeActionContext} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is)\n            && (candidate.only === undefined || Is.typedArray(candidate.only, Is.string))\n            && (candidate.triggerKind === undefined || candidate.triggerKind === CodeActionTriggerKind.Invoked || candidate.triggerKind === CodeActionTriggerKind.Automatic);\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, kindOrCommandOrEdit, kind) {\n        let result = { title };\n        let checkKind = true;\n        if (typeof kindOrCommandOrEdit === 'string') {\n            checkKind = false;\n            result.kind = kindOrCommandOrEdit;\n        }\n        else if (Command.is(kindOrCommandOrEdit)) {\n            result.command = kindOrCommandOrEdit;\n        }\n        else {\n            result.edit = kindOrCommandOrEdit;\n        }\n        if (checkKind && kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        let candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === undefined || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === undefined || Is.string(candidate.kind)) &&\n            (candidate.edit !== undefined || candidate.command !== undefined) &&\n            (candidate.command === undefined || Command.is(candidate.command)) &&\n            (candidate.isPreferred === undefined || Is.boolean(candidate.isPreferred)) &&\n            (candidate.edit === undefined || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * {@link CodeLens} literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        let result = { range };\n        if (Is.defined(data)) {\n            result.data = data;\n        }\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link CodeLens} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * {@link FormattingOptions} literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize, insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link FormattingOptions} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.uinteger(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * The DocumentLink namespace provides helper functions to work with\n * {@link DocumentLink} literals.\n */\nexport var DocumentLink;\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range, target, data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link DocumentLink} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\n/**\n * The SelectionRange namespace provides helper function to work with\n * SelectionRange literals.\n */\nexport var SelectionRange;\n(function (SelectionRange) {\n    /**\n     * Creates a new SelectionRange\n     * @param range the range.\n     * @param parent an optional parent.\n     */\n    function create(range, parent) {\n        return { range, parent };\n    }\n    SelectionRange.create = create;\n    function is(value) {\n        let candidate = value;\n        return Is.objectLiteral(candidate) && Range.is(candidate.range) && (candidate.parent === undefined || SelectionRange.is(candidate.parent));\n    }\n    SelectionRange.is = is;\n})(SelectionRange || (SelectionRange = {}));\n/**\n * A set of predefined token types. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenTypes;\n(function (SemanticTokenTypes) {\n    SemanticTokenTypes[\"namespace\"] = \"namespace\";\n    /**\n     * Represents a generic type. Acts as a fallback for types which can't be mapped to\n     * a specific type like class or enum.\n     */\n    SemanticTokenTypes[\"type\"] = \"type\";\n    SemanticTokenTypes[\"class\"] = \"class\";\n    SemanticTokenTypes[\"enum\"] = \"enum\";\n    SemanticTokenTypes[\"interface\"] = \"interface\";\n    SemanticTokenTypes[\"struct\"] = \"struct\";\n    SemanticTokenTypes[\"typeParameter\"] = \"typeParameter\";\n    SemanticTokenTypes[\"parameter\"] = \"parameter\";\n    SemanticTokenTypes[\"variable\"] = \"variable\";\n    SemanticTokenTypes[\"property\"] = \"property\";\n    SemanticTokenTypes[\"enumMember\"] = \"enumMember\";\n    SemanticTokenTypes[\"event\"] = \"event\";\n    SemanticTokenTypes[\"function\"] = \"function\";\n    SemanticTokenTypes[\"method\"] = \"method\";\n    SemanticTokenTypes[\"macro\"] = \"macro\";\n    SemanticTokenTypes[\"keyword\"] = \"keyword\";\n    SemanticTokenTypes[\"modifier\"] = \"modifier\";\n    SemanticTokenTypes[\"comment\"] = \"comment\";\n    SemanticTokenTypes[\"string\"] = \"string\";\n    SemanticTokenTypes[\"number\"] = \"number\";\n    SemanticTokenTypes[\"regexp\"] = \"regexp\";\n    SemanticTokenTypes[\"operator\"] = \"operator\";\n    /**\n     * @since 3.17.0\n     */\n    SemanticTokenTypes[\"decorator\"] = \"decorator\";\n})(SemanticTokenTypes || (SemanticTokenTypes = {}));\n/**\n * A set of predefined token modifiers. This set is not fixed\n * an clients can specify additional token types via the\n * corresponding client capabilities.\n *\n * @since 3.16.0\n */\nexport var SemanticTokenModifiers;\n(function (SemanticTokenModifiers) {\n    SemanticTokenModifiers[\"declaration\"] = \"declaration\";\n    SemanticTokenModifiers[\"definition\"] = \"definition\";\n    SemanticTokenModifiers[\"readonly\"] = \"readonly\";\n    SemanticTokenModifiers[\"static\"] = \"static\";\n    SemanticTokenModifiers[\"deprecated\"] = \"deprecated\";\n    SemanticTokenModifiers[\"abstract\"] = \"abstract\";\n    SemanticTokenModifiers[\"async\"] = \"async\";\n    SemanticTokenModifiers[\"modification\"] = \"modification\";\n    SemanticTokenModifiers[\"documentation\"] = \"documentation\";\n    SemanticTokenModifiers[\"defaultLibrary\"] = \"defaultLibrary\";\n})(SemanticTokenModifiers || (SemanticTokenModifiers = {}));\n/**\n * @since 3.16.0\n */\nexport var SemanticTokens;\n(function (SemanticTokens) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && (candidate.resultId === undefined || typeof candidate.resultId === 'string') &&\n            Array.isArray(candidate.data) && (candidate.data.length === 0 || typeof candidate.data[0] === 'number');\n    }\n    SemanticTokens.is = is;\n})(SemanticTokens || (SemanticTokens = {}));\n/**\n * The InlineValueText namespace provides functions to deal with InlineValueTexts.\n *\n * @since 3.17.0\n */\nexport var InlineValueText;\n(function (InlineValueText) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, text) {\n        return { range, text };\n    }\n    InlineValueText.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.string(candidate.text);\n    }\n    InlineValueText.is = is;\n})(InlineValueText || (InlineValueText = {}));\n/**\n * The InlineValueVariableLookup namespace provides functions to deal with InlineValueVariableLookups.\n *\n * @since 3.17.0\n */\nexport var InlineValueVariableLookup;\n(function (InlineValueVariableLookup) {\n    /**\n     * Creates a new InlineValueText literal.\n     */\n    function create(range, variableName, caseSensitiveLookup) {\n        return { range, variableName, caseSensitiveLookup };\n    }\n    InlineValueVariableLookup.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range) && Is.boolean(candidate.caseSensitiveLookup)\n            && (Is.string(candidate.variableName) || candidate.variableName === undefined);\n    }\n    InlineValueVariableLookup.is = is;\n})(InlineValueVariableLookup || (InlineValueVariableLookup = {}));\n/**\n * The InlineValueEvaluatableExpression namespace provides functions to deal with InlineValueEvaluatableExpression.\n *\n * @since 3.17.0\n */\nexport var InlineValueEvaluatableExpression;\n(function (InlineValueEvaluatableExpression) {\n    /**\n     * Creates a new InlineValueEvaluatableExpression literal.\n     */\n    function create(range, expression) {\n        return { range, expression };\n    }\n    InlineValueEvaluatableExpression.create = create;\n    function is(value) {\n        const candidate = value;\n        return candidate !== undefined && candidate !== null && Range.is(candidate.range)\n            && (Is.string(candidate.expression) || candidate.expression === undefined);\n    }\n    InlineValueEvaluatableExpression.is = is;\n})(InlineValueEvaluatableExpression || (InlineValueEvaluatableExpression = {}));\n/**\n * The InlineValueContext namespace provides helper functions to work with\n * {@link InlineValueContext} literals.\n *\n * @since 3.17.0\n */\nexport var InlineValueContext;\n(function (InlineValueContext) {\n    /**\n     * Creates a new InlineValueContext literal.\n     */\n    function create(frameId, stoppedLocation) {\n        return { frameId, stoppedLocation };\n    }\n    InlineValueContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link InlineValueContext} interface.\n     */\n    function is(value) {\n        const candidate = value;\n        return Is.defined(candidate) && Range.is(value.stoppedLocation);\n    }\n    InlineValueContext.is = is;\n})(InlineValueContext || (InlineValueContext = {}));\n/**\n * Inlay hint kinds.\n *\n * @since 3.17.0\n */\nexport var InlayHintKind;\n(function (InlayHintKind) {\n    /**\n     * An inlay hint that for a type annotation.\n     */\n    InlayHintKind.Type = 1;\n    /**\n     * An inlay hint that is for a parameter.\n     */\n    InlayHintKind.Parameter = 2;\n    function is(value) {\n        return value === 1 || value === 2;\n    }\n    InlayHintKind.is = is;\n})(InlayHintKind || (InlayHintKind = {}));\nexport var InlayHintLabelPart;\n(function (InlayHintLabelPart) {\n    function create(value) {\n        return { value };\n    }\n    InlayHintLabelPart.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.location === undefined || Location.is(candidate.location))\n            && (candidate.command === undefined || Command.is(candidate.command));\n    }\n    InlayHintLabelPart.is = is;\n})(InlayHintLabelPart || (InlayHintLabelPart = {}));\nexport var InlayHint;\n(function (InlayHint) {\n    function create(position, label, kind) {\n        const result = { position, label };\n        if (kind !== undefined) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    InlayHint.create = create;\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.position)\n            && (Is.string(candidate.label) || Is.typedArray(candidate.label, InlayHintLabelPart.is))\n            && (candidate.kind === undefined || InlayHintKind.is(candidate.kind))\n            && (candidate.textEdits === undefined) || Is.typedArray(candidate.textEdits, TextEdit.is)\n            && (candidate.tooltip === undefined || Is.string(candidate.tooltip) || MarkupContent.is(candidate.tooltip))\n            && (candidate.paddingLeft === undefined || Is.boolean(candidate.paddingLeft))\n            && (candidate.paddingRight === undefined || Is.boolean(candidate.paddingRight));\n    }\n    InlayHint.is = is;\n})(InlayHint || (InlayHint = {}));\nexport var StringValue;\n(function (StringValue) {\n    function createSnippet(value) {\n        return { kind: 'snippet', value };\n    }\n    StringValue.createSnippet = createSnippet;\n})(StringValue || (StringValue = {}));\nexport var InlineCompletionItem;\n(function (InlineCompletionItem) {\n    function create(insertText, filterText, range, command) {\n        return { insertText, filterText, range, command };\n    }\n    InlineCompletionItem.create = create;\n})(InlineCompletionItem || (InlineCompletionItem = {}));\nexport var InlineCompletionList;\n(function (InlineCompletionList) {\n    function create(items) {\n        return { items };\n    }\n    InlineCompletionList.create = create;\n})(InlineCompletionList || (InlineCompletionList = {}));\n/**\n * Describes how an {@link InlineCompletionItemProvider inline completion provider} was triggered.\n *\n * @since 3.18.0\n * @proposed\n */\nexport var InlineCompletionTriggerKind;\n(function (InlineCompletionTriggerKind) {\n    /**\n     * Completion was triggered explicitly by a user gesture.\n     */\n    InlineCompletionTriggerKind.Invoked = 0;\n    /**\n     * Completion was triggered automatically while editing.\n     */\n    InlineCompletionTriggerKind.Automatic = 1;\n})(InlineCompletionTriggerKind || (InlineCompletionTriggerKind = {}));\nexport var SelectedCompletionInfo;\n(function (SelectedCompletionInfo) {\n    function create(range, text) {\n        return { range, text };\n    }\n    SelectedCompletionInfo.create = create;\n})(SelectedCompletionInfo || (SelectedCompletionInfo = {}));\nexport var InlineCompletionContext;\n(function (InlineCompletionContext) {\n    function create(triggerKind, selectedCompletionInfo) {\n        return { triggerKind, selectedCompletionInfo };\n    }\n    InlineCompletionContext.create = create;\n})(InlineCompletionContext || (InlineCompletionContext = {}));\nexport var WorkspaceFolder;\n(function (WorkspaceFolder) {\n    function is(value) {\n        const candidate = value;\n        return Is.objectLiteral(candidate) && URI.is(candidate.uri) && Is.string(candidate.name);\n    }\n    WorkspaceFolder.is = is;\n})(WorkspaceFolder || (WorkspaceFolder = {}));\nexport const EOL = ['\\n', '\\r\\n', '\\r'];\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId The document's language Id.\n     * @param version The document's version.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the {@link ITextDocument} interface.\n     */\n    function is(value) {\n        let candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.uinteger(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        let text = document.getText();\n        let sortedEdits = mergeSort(edits, (a, b) => {\n            let diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = text.length;\n        for (let i = sortedEdits.length - 1; i >= 0; i--) {\n            let e = sortedEdits[i];\n            let startOffset = document.offsetAt(e.range.start);\n            let endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Overlapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        const p = (data.length / 2) | 0;\n        const left = data.slice(0, p);\n        const right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        let leftIdx = 0;\n        let rightIdx = 0;\n        let i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            let ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * @deprecated Use the text document from the new vscode-languageserver-textdocument package.\n */\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            let start = this.offsetAt(range.start);\n            let end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = undefined;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            let lineOffsets = [];\n            let text = this._content;\n            let isLineStart = true;\n            for (let i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                let ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        let lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            let mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        let line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    }\n    offsetAt(position) {\n        let lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        let lineOffset = lineOffsets[position.line];\n        let nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n}\nvar Is;\n(function (Is) {\n    const toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function numberRange(value, min, max) {\n        return toString.call(value) === '[object Number]' && min <= value && value <= max;\n    }\n    Is.numberRange = numberRange;\n    function integer(value) {\n        return toString.call(value) === '[object Number]' && -2147483648 <= value && value <= 2147483647;\n    }\n    Is.integer = integer;\n    function uinteger(value) {\n        return toString.call(value) === '[object Number]' && 0 <= value && value <= 2147483647;\n    }\n    Is.uinteger = uinteger;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IToken, TokenType } from 'chevrotain';\nimport type { Range } from 'vscode-languageserver-types';\nimport type { AbstractElement } from '../languages/generated/ast.js';\nimport type { AstNode, CompositeCstNode, CstNode, LeafCstNode, RootCstNode } from '../syntax-tree.js';\nimport { Position } from 'vscode-languageserver-types';\nimport { isCompositeCstNode } from '../syntax-tree.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\n\nexport class CstNodeBuilder {\n\n    private rootNode!: RootCstNodeImpl;\n    private nodeStack: CompositeCstNodeImpl[] = [];\n\n    private get current(): CompositeCstNodeImpl {\n        return this.nodeStack[this.nodeStack.length - 1];\n    }\n\n    buildRootNode(input: string): RootCstNode {\n        this.rootNode = new RootCstNodeImpl(input);\n        this.rootNode.root = this.rootNode;\n        this.nodeStack = [this.rootNode];\n        return this.rootNode;\n    }\n\n    buildCompositeNode(feature: AbstractElement): CompositeCstNode {\n        const compositeNode = new CompositeCstNodeImpl();\n        compositeNode.grammarSource = feature;\n        compositeNode.root = this.rootNode;\n        this.current.content.push(compositeNode);\n        this.nodeStack.push(compositeNode);\n        return compositeNode;\n    }\n\n    buildLeafNode(token: IToken, feature: AbstractElement): LeafCstNode {\n        const leafNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, false);\n        leafNode.grammarSource = feature;\n        leafNode.root = this.rootNode;\n        this.current.content.push(leafNode);\n        return leafNode;\n    }\n\n    removeNode(node: CstNode): void {\n        const parent = node.container;\n        if (parent) {\n            const index = parent.content.indexOf(node);\n            if (index >= 0) {\n                parent.content.splice(index, 1);\n            }\n        }\n    }\n\n    construct(item: { $type: string | symbol | undefined, $cstNode: CstNode }): void {\n        const current: CstNode = this.current;\n        // The specified item could be a datatype ($type is symbol) or a fragment ($type is undefined)\n        // Only if the $type is a string, we actually assign the element\n        if (typeof item.$type === 'string') {\n            this.current.astNode = <AstNode>item;\n        }\n        item.$cstNode = current;\n        const node = this.nodeStack.pop();\n        // Empty composite nodes are not valid\n        // Simply remove the node from the tree\n        if (node?.content.length === 0) {\n            this.removeNode(node);\n        }\n    }\n\n    addHiddenTokens(hiddenTokens: IToken[]): void {\n        for (const token of hiddenTokens) {\n            const hiddenNode = new LeafCstNodeImpl(token.startOffset, token.image.length, tokenToRange(token), token.tokenType, true);\n            hiddenNode.root = this.rootNode;\n            this.addHiddenToken(this.rootNode, hiddenNode);\n        }\n    }\n\n    private addHiddenToken(node: CompositeCstNode, token: LeafCstNode): void {\n        const { offset: tokenStart, end: tokenEnd } = token;\n\n        for (let i = 0; i < node.content.length; i++) {\n            const child = node.content[i];\n            const { offset: childStart, end: childEnd } = child;\n            if (isCompositeCstNode(child) && tokenStart > childStart && tokenEnd < childEnd) {\n                this.addHiddenToken(child, token);\n                return;\n            } else if (tokenEnd <= childStart) {\n                node.content.splice(i, 0, token);\n                return;\n            }\n        }\n\n        // We know that we haven't found a suited position for the token\n        // So we simply add it to the end of the current node\n        node.content.push(token);\n    }\n}\n\nexport abstract class AbstractCstNode implements CstNode {\n    abstract get offset(): number;\n    abstract get length(): number;\n    abstract get end(): number;\n    abstract get range(): Range;\n\n    container?: CompositeCstNode;\n    grammarSource: AbstractElement;\n    root: RootCstNode;\n    private _astNode?: AstNode;\n\n    /** @deprecated use `container` instead. */\n    get parent(): CompositeCstNode | undefined {\n        return this.container;\n    }\n\n    /** @deprecated use `grammarSource` instead. */\n    get feature(): AbstractElement {\n        return this.grammarSource;\n    }\n\n    get hidden(): boolean {\n        return false;\n    }\n\n    get astNode(): AstNode {\n        const node = typeof this._astNode?.$type === 'string' ? this._astNode : this.container?.astNode;\n        if (!node) {\n            throw new Error('This node has no associated AST element');\n        }\n        return node;\n    }\n\n    set astNode(value: AstNode) {\n        this._astNode = value;\n    }\n\n    /** @deprecated use `astNode` instead. */\n    get element(): AstNode {\n        return this.astNode;\n    }\n\n    get text(): string {\n        return this.root.fullText.substring(this.offset, this.end);\n    }\n}\n\nexport class LeafCstNodeImpl extends AbstractCstNode implements LeafCstNode {\n    get offset(): number {\n        return this._offset;\n    }\n\n    get length(): number {\n        return this._length;\n    }\n\n    get end(): number {\n        return this._offset + this._length;\n    }\n\n    override get hidden(): boolean {\n        return this._hidden;\n    }\n\n    get tokenType(): TokenType {\n        return this._tokenType;\n    }\n\n    get range(): Range {\n        return this._range;\n    }\n\n    private _hidden: boolean;\n    private _offset: number;\n    private _length: number;\n    private _range: Range;\n    private _tokenType: TokenType;\n\n    constructor(offset: number, length: number, range: Range, tokenType: TokenType, hidden = false) {\n        super();\n        this._hidden = hidden;\n        this._offset = offset;\n        this._tokenType = tokenType;\n        this._length = length;\n        this._range = range;\n    }\n}\n\nexport class CompositeCstNodeImpl extends AbstractCstNode implements CompositeCstNode {\n    readonly content: CstNode[] = new CstNodeContainer(this);\n    private _rangeCache?: Range;\n\n    /** @deprecated use `content` instead. */\n    get children(): CstNode[] {\n        return this.content;\n    }\n\n    get offset(): number {\n        return this.firstNonHiddenNode?.offset ?? 0;\n    }\n\n    get length(): number {\n        return this.end - this.offset;\n    }\n\n    get end(): number {\n        return this.lastNonHiddenNode?.end ?? 0;\n    }\n\n    get range(): Range {\n        const firstNode = this.firstNonHiddenNode;\n        const lastNode = this.lastNonHiddenNode;\n        if (firstNode && lastNode) {\n            if (this._rangeCache === undefined) {\n                const { range: firstRange } = firstNode;\n                const { range: lastRange } = lastNode;\n                this._rangeCache = { start: firstRange.start, end: lastRange.end.line < firstRange.start.line ? firstRange.start : lastRange.end };\n            }\n            return this._rangeCache;\n        } else {\n            return { start: Position.create(0, 0), end: Position.create(0, 0) };\n        }\n    }\n\n    private get firstNonHiddenNode(): CstNode | undefined {\n        for (const child of this.content) {\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[0];\n    }\n\n    private get lastNonHiddenNode(): CstNode | undefined {\n        for (let i = this.content.length - 1; i >= 0; i--) {\n            const child = this.content[i];\n            if (!child.hidden) {\n                return child;\n            }\n        }\n        return this.content[this.content.length - 1];\n    }\n}\n\nclass CstNodeContainer extends Array<CstNode> {\n    readonly parent: CompositeCstNode;\n\n    constructor(parent: CompositeCstNode) {\n        super();\n        this.parent = parent;\n        Object.setPrototypeOf(this, CstNodeContainer.prototype);\n    }\n\n    override push(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.push(...items);\n    }\n\n    override unshift(...items: CstNode[]): number {\n        this.addParents(items);\n        return super.unshift(...items);\n    }\n\n    override splice(start: number, count: number, ...items: CstNode[]): CstNode[] {\n        this.addParents(items);\n        return super.splice(start, count, ...items);\n    }\n\n    private addParents(items: CstNode[]): void {\n        for (const item of items) {\n            (<AbstractCstNode>item).container = this.parent;\n        }\n    }\n}\n\nexport class RootCstNodeImpl extends CompositeCstNodeImpl implements RootCstNode {\n    private _text = '';\n\n    override get text(): string {\n        return this._text.substring(this.offset, this.end);\n    }\n\n    get fullText(): string {\n        return this._text;\n    }\n\n    constructor(input?: string) {\n        super();\n        this._text = input ?? '';\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { DSLMethodOpts, ILexingError, IOrAlt, IParserErrorMessageProvider, IRecognitionException, IToken, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractElement, Action, Assignment, ParserRule } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, CompositeCstNode, CstNode } from '../syntax-tree.js';\nimport type { Lexer } from './lexer.js';\nimport type { IParserConfig } from './parser-config.js';\nimport type { ValueConverter } from './value-converter.js';\nimport { defaultParserErrorProvider, EmbeddedActionsParser, LLkLookaheadStrategy } from 'chevrotain';\nimport { LLStarLookaheadStrategy } from 'chevrotain-allstar';\nimport { isAssignment, isCrossReference, isKeyword } from '../languages/generated/ast.js';\nimport { getTypeName, isDataTypeRule } from '../utils/grammar-utils.js';\nimport { assignMandatoryProperties, getContainerOfType, linkContentToContainer } from '../utils/ast-utils.js';\nimport { CstNodeBuilder } from './cst-node-builder.js';\n\nexport type ParseResult<T = AstNode> = {\n    value: T,\n    parserErrors: IRecognitionException[],\n    lexerErrors: ILexingError[]\n}\n\nexport const DatatypeSymbol = Symbol('Datatype');\n\ninterface DataTypeNode {\n    $cstNode: CompositeCstNode\n    /** Instead of a string, this node is uniquely identified by the `Datatype` symbol */\n    $type: symbol\n    /** Used as a storage for all parsed terminals, keywords and sub-datatype rules */\n    value: string\n}\n\nfunction isDataTypeNode(node: { $type: string | symbol | undefined }): node is DataTypeNode {\n    return node.$type === DatatypeSymbol;\n}\n\ntype RuleResult = (args: Args) => any;\n\ntype Args = Record<string, boolean>;\n\ntype RuleImpl = (args: Args) => any;\n\ninterface AssignmentElement {\n    assignment?: Assignment\n    isCrossRef: boolean\n}\n\nexport interface BaseParser {\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void;\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void;\n    many(idx: number, callback: DSLMethodOpts<unknown>): void;\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void;\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    action($type: string, action: Action): void;\n    construct(): unknown;\n    isRecording(): boolean;\n    get unorderedGroups(): Map<string, boolean[]>;\n    getRuleStack(): number[];\n}\n\nconst ruleSuffix = '\\u200B';\nconst withRuleSuffix = (name: string): string => name.endsWith(ruleSuffix) ? name : name + ruleSuffix;\n\nexport abstract class AbstractLangiumParser implements BaseParser {\n\n    protected readonly lexer: Lexer;\n    protected readonly wrapper: ChevrotainWrapper;\n    protected _unorderedGroups: Map<string, boolean[]> = new Map<string, boolean[]>();\n\n    constructor(services: LangiumCoreServices) {\n        this.lexer = services.parser.Lexer;\n        const tokens = this.lexer.definition;\n        this.wrapper = new ChevrotainWrapper(tokens, {\n            ...services.parser.ParserConfig,\n            errorMessageProvider: services.parser.ParserErrorMessageProvider\n        });\n    }\n\n    alternatives(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.wrapper.wrapOr(idx, choices);\n    }\n\n    optional(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapOption(idx, callback);\n    }\n\n    many(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapMany(idx, callback);\n    }\n\n    atLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.wrapper.wrapAtLeastOne(idx, callback);\n    }\n\n    abstract rule(rule: ParserRule, impl: RuleImpl): RuleResult;\n    abstract consume(idx: number, tokenType: TokenType, feature: AbstractElement): void;\n    abstract subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void;\n    abstract action($type: string, action: Action): void;\n    abstract construct(): unknown;\n\n    isRecording(): boolean {\n        return this.wrapper.IS_RECORDING;\n    }\n\n    get unorderedGroups(): Map<string, boolean[]> {\n        return this._unorderedGroups;\n    }\n\n    getRuleStack(): number[] {\n        return (this.wrapper as any).RULE_STACK;\n    }\n\n    finalize(): void {\n        this.wrapper.wrapSelfAnalysis();\n    }\n}\n\nexport class LangiumParser extends AbstractLangiumParser {\n    private readonly linker: Linker;\n    private readonly converter: ValueConverter;\n    private readonly astReflection: AstReflection;\n    private readonly nodeBuilder = new CstNodeBuilder();\n    private stack: any[] = [];\n    private mainRule!: RuleResult;\n    private assignmentMap = new Map<AbstractElement, AssignmentElement | undefined>();\n\n    private get current(): any {\n        return this.stack[this.stack.length - 1];\n    }\n\n    constructor(services: LangiumCoreServices) {\n        super(services);\n        this.linker = services.references.Linker;\n        this.converter = services.parser.ValueConverter;\n        this.astReflection = services.shared.AstReflection;\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const type = rule.fragment ? undefined : isDataTypeRule(rule) ? DatatypeSymbol : getTypeName(rule);\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(type, impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    parse<T extends AstNode = AstNode>(input: string): ParseResult<T> {\n        this.nodeBuilder.buildRootNode(input);\n        const lexerResult = this.lexer.tokenize(input);\n        this.wrapper.input = lexerResult.tokens;\n        const result = this.mainRule.call(this.wrapper, {});\n        this.nodeBuilder.addHiddenTokens(lexerResult.hidden);\n        this.unorderedGroups.clear();\n        return {\n            value: result,\n            lexerErrors: lexerResult.errors,\n            parserErrors: this.wrapper.errors\n        };\n    }\n\n    private startImplementation($type: string | symbol | undefined, implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            if (!this.isRecording()) {\n                const node: any = { $type };\n                this.stack.push(node);\n                if ($type === DatatypeSymbol) {\n                    node.value = '';\n                }\n            }\n            let result: unknown;\n            try {\n                result = implementation(args);\n            } catch (err) {\n                result = undefined;\n            }\n            if (!this.isRecording() && result === undefined) {\n                result = this.construct();\n            }\n            return result;\n        };\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        const token = this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording() && this.isValidToken(token)) {\n            const leafNode = this.nodeBuilder.buildLeafNode(token, feature);\n            const { assignment, isCrossRef } = this.getAssignment(feature);\n            const current = this.current;\n            if (assignment) {\n                const convertedValue = isKeyword(feature) ? token.image : this.converter.convert(token.image, leafNode);\n                this.assign(assignment.operator, assignment.feature, convertedValue, leafNode, isCrossRef);\n            } else if (isDataTypeNode(current)) {\n                let text = token.image;\n                if (!isKeyword(feature)) {\n                    text = this.converter.convert(text, leafNode).toString();\n                }\n                current.value += text;\n            }\n        }\n    }\n\n    /**\n     * Most consumed parser tokens are valid. However there are two cases in which they are not valid:\n     *\n     * 1. They were inserted during error recovery by the parser. These tokens don't really exist and should not be further processed\n     * 2. They contain invalid token ranges. This might include the special EOF token, or other tokens produced by invalid token builders.\n     */\n    private isValidToken(token: IToken): boolean {\n        return !token.isInsertedInRecovery && !isNaN(token.startOffset) && typeof token.endOffset === 'number' && !isNaN(token.endOffset);\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        let cstNode: CompositeCstNode | undefined;\n        if (!this.isRecording()) {\n            cstNode = this.nodeBuilder.buildCompositeNode(feature);\n        }\n        const subruleResult = this.wrapper.wrapSubrule(idx, rule, args) as any;\n        if (!this.isRecording() && cstNode && cstNode.length > 0) {\n            this.performSubruleAssignment(subruleResult, feature, cstNode);\n        }\n    }\n\n    private performSubruleAssignment(result: any, feature: AbstractElement, cstNode: CompositeCstNode): void {\n        const { assignment, isCrossRef } = this.getAssignment(feature);\n        if (assignment) {\n            this.assign(assignment.operator, assignment.feature, result, cstNode, isCrossRef);\n        } else if (!assignment) {\n            // If we call a subrule without an assignment we either:\n            // 1. append the result of the subrule (data type rule)\n            // 2. override the current object with the newly parsed object\n            // If the current element is an AST node and the result of the subrule\n            // is a data type rule, we can safely discard the results.\n            const current = this.current;\n            if (isDataTypeNode(current)) {\n                current.value += result.toString();\n            } else if (typeof result === 'object' && result) {\n                const resultKind = result.$type;\n                const object = this.assignWithoutOverride(result, current);\n                if (resultKind) {\n                    object.$type = resultKind;\n                }\n                const newItem = object;\n                this.stack.pop();\n                this.stack.push(newItem);\n            }\n        }\n    }\n\n    action($type: string, action: Action): void {\n        if (!this.isRecording()) {\n            let last = this.current;\n            // This branch is used for left recursive grammar rules.\n            // Those don't call `construct` before another action.\n            // Therefore, we need to call it here.\n            if (!last.$cstNode && action.feature && action.operator) {\n                last = this.construct(false);\n                const feature = last.$cstNode.feature;\n                this.nodeBuilder.buildCompositeNode(feature);\n            }\n            const newItem = { $type };\n            this.stack.pop();\n            this.stack.push(newItem);\n            if (action.feature && action.operator) {\n                this.assign(action.operator, action.feature, last, last.$cstNode, false);\n            }\n        }\n    }\n\n    construct(pop = true): unknown {\n        if (this.isRecording()) {\n            return undefined;\n        }\n        const obj = this.current;\n        linkContentToContainer(obj);\n        this.nodeBuilder.construct(obj);\n        if (pop) {\n            this.stack.pop();\n        }\n        if (isDataTypeNode(obj)) {\n            return this.converter.convert(obj.value, obj.$cstNode);\n        } else {\n            assignMandatoryProperties(this.astReflection, obj);\n        }\n        return obj;\n    }\n\n    private getAssignment(feature: AbstractElement): AssignmentElement {\n        if (!this.assignmentMap.has(feature)) {\n            const assignment = getContainerOfType(feature, isAssignment);\n            this.assignmentMap.set(feature, {\n                assignment: assignment,\n                isCrossRef: assignment ? isCrossReference(assignment.terminal) : false\n            });\n        }\n        return this.assignmentMap.get(feature)!;\n    }\n\n    private assign(operator: string, feature: string, value: unknown, cstNode: CstNode, isCrossRef: boolean): void {\n        const obj = this.current;\n        let item: unknown;\n        if (isCrossRef && typeof value === 'string') {\n            item = this.linker.buildReference(obj, feature, cstNode, value);\n        } else {\n            item = value;\n        }\n        switch (operator) {\n            case '=': {\n                obj[feature] = item;\n                break;\n            }\n            case '?=': {\n                obj[feature] = true;\n                break;\n            }\n            case '+=': {\n                if (!Array.isArray(obj[feature])) {\n                    obj[feature] = [];\n                }\n                obj[feature].push(item);\n            }\n        }\n    }\n\n    private assignWithoutOverride(target: any, source: any): any {\n        for (const [name, existingValue] of Object.entries(source)) {\n            const newValue = target[name];\n            if (newValue === undefined) {\n                target[name] = existingValue;\n            } else if (Array.isArray(newValue) && Array.isArray(existingValue)) {\n                existingValue.push(...newValue);\n                target[name] = existingValue;\n            }\n        }\n        return target;\n    }\n\n    get definitionErrors(): IParserDefinitionError[] {\n        return this.wrapper.definitionErrors;\n    }\n}\n\nexport interface IParserDefinitionError {\n    message: string\n    type: number\n    ruleName?: string\n}\n\nexport abstract class AbstractParserErrorMessageProvider implements IParserErrorMessageProvider {\n\n    buildMismatchTokenMessage(options: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildMismatchTokenMessage(options);\n    }\n\n    buildNotAllInputParsedMessage(options: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNotAllInputParsedMessage(options);\n    }\n\n    buildNoViableAltMessage(options: {\n        expectedPathsPerAlt: TokenType[][][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildNoViableAltMessage(options);\n    }\n\n    buildEarlyExitMessage(options: {\n        expectedIterationPaths: TokenType[][]\n        actual: IToken[]\n        previous: IToken\n        customUserDescription: string\n        ruleName: string\n    }): string {\n        return defaultParserErrorProvider.buildEarlyExitMessage(options);\n    }\n\n}\n\nexport class LangiumParserErrorMessageProvider extends AbstractParserErrorMessageProvider {\n\n    override buildMismatchTokenMessage({ expected, actual }: {\n        expected: TokenType\n        actual: IToken\n        previous: IToken\n        ruleName: string\n    }): string {\n        const expectedMsg = expected.LABEL\n            ? '`' + expected.LABEL + '`'\n            : expected.name.endsWith(':KW')\n                ? `keyword '${expected.name.substring(0, expected.name.length - 3)}'`\n                : `token of type '${expected.name}'`;\n        return `Expecting ${expectedMsg} but found \\`${actual.image}\\`.`;\n    }\n\n    override buildNotAllInputParsedMessage({ firstRedundant }: {\n        firstRedundant: IToken\n        ruleName: string\n    }): string {\n        return `Expecting end of file but found \\`${firstRedundant.image}\\`.`;\n    }\n}\n\nexport interface CompletionParserResult {\n    tokens: IToken[]\n    elementStack: AbstractElement[]\n    tokenIndex: number\n}\n\nexport class LangiumCompletionParser extends AbstractLangiumParser {\n    private mainRule!: RuleResult;\n    private tokens: IToken[] = [];\n\n    private elementStack: AbstractElement[] = [];\n    private lastElementStack: AbstractElement[] = [];\n    private nextTokenIndex = 0;\n    private stackSize = 0;\n\n    action(): void {\n        // NOOP\n    }\n\n    construct(): unknown {\n        // NOOP\n        return undefined;\n    }\n\n    parse(input: string): CompletionParserResult {\n        this.resetState();\n        const tokens = this.lexer.tokenize(input);\n        this.tokens = tokens.tokens;\n        this.wrapper.input = [...this.tokens];\n        this.mainRule.call(this.wrapper, {});\n        this.unorderedGroups.clear();\n        return {\n            tokens: this.tokens,\n            elementStack: [...this.lastElementStack],\n            tokenIndex: this.nextTokenIndex\n        };\n    }\n\n    rule(rule: ParserRule, impl: RuleImpl): RuleResult {\n        const ruleMethod = this.wrapper.DEFINE_RULE(withRuleSuffix(rule.name), this.startImplementation(impl).bind(this));\n        if (rule.entry) {\n            this.mainRule = ruleMethod;\n        }\n        return ruleMethod;\n    }\n\n    private resetState(): void {\n        this.elementStack = [];\n        this.lastElementStack = [];\n        this.nextTokenIndex = 0;\n        this.stackSize = 0;\n    }\n\n    private startImplementation(implementation: RuleImpl): RuleImpl {\n        return (args) => {\n            const size = this.keepStackSize();\n            try {\n                implementation(args);\n            } finally {\n                this.resetStackSize(size);\n            }\n        };\n    }\n\n    private removeUnexpectedElements(): void {\n        this.elementStack.splice(this.stackSize);\n    }\n\n    keepStackSize(): number {\n        const size = this.elementStack.length;\n        this.stackSize = size;\n        return size;\n    }\n\n    resetStackSize(size: number): void {\n        this.removeUnexpectedElements();\n        this.stackSize = size;\n    }\n\n    consume(idx: number, tokenType: TokenType, feature: AbstractElement): void {\n        this.wrapper.wrapConsume(idx, tokenType);\n        if (!this.isRecording()) {\n            this.lastElementStack = [...this.elementStack, feature];\n            this.nextTokenIndex = this.currIdx + 1;\n        }\n    }\n\n    subrule(idx: number, rule: RuleResult, feature: AbstractElement, args: Args): void {\n        this.before(feature);\n        this.wrapper.wrapSubrule(idx, rule, args);\n        this.after(feature);\n    }\n\n    before(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            this.elementStack.push(element);\n        }\n    }\n\n    after(element: AbstractElement): void {\n        if (!this.isRecording()) {\n            const index = this.elementStack.lastIndexOf(element);\n            if (index >= 0) {\n                this.elementStack.splice(index);\n            }\n        }\n    }\n\n    get currIdx(): number {\n        return (this.wrapper as any).currIdx;\n    }\n}\n\nconst defaultConfig: IParserConfig = {\n    recoveryEnabled: true,\n    nodeLocationTracking: 'full',\n    skipValidations: true,\n    errorMessageProvider: new LangiumParserErrorMessageProvider()\n};\n\n/**\n * This class wraps the embedded actions parser of chevrotain and exposes protected methods.\n * This way, we can build the `LangiumParser` as a composition.\n */\nclass ChevrotainWrapper extends EmbeddedActionsParser {\n\n    // This array is set in the base implementation of Chevrotain.\n    definitionErrors: IParserDefinitionError[];\n\n    constructor(tokens: TokenVocabulary, config?: IParserConfig) {\n        const useDefaultLookahead = config && 'maxLookahead' in config;\n        super(tokens, {\n            ...defaultConfig,\n            lookaheadStrategy: useDefaultLookahead\n                ? new LLkLookaheadStrategy({ maxLookahead: config.maxLookahead })\n                : new LLStarLookaheadStrategy(),\n            ...config,\n        });\n    }\n\n    get IS_RECORDING(): boolean {\n        return this.RECORDING_PHASE;\n    }\n\n    DEFINE_RULE(name: string, impl: RuleImpl): RuleResult {\n        return this.RULE(name, impl);\n    }\n\n    wrapSelfAnalysis(): void {\n        this.performSelfAnalysis();\n    }\n\n    wrapConsume(idx: number, tokenType: TokenType): IToken {\n        return this.consume(idx, tokenType);\n    }\n\n    wrapSubrule(idx: number, rule: RuleResult, args: Args): unknown {\n        return this.subrule(idx, rule, {\n            ARGS: [args]\n        });\n    }\n\n    wrapOr(idx: number, choices: Array<IOrAlt<any>>): void {\n        this.or(idx, choices);\n    }\n\n    wrapOption(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.option(idx, callback);\n    }\n\n    wrapMany(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.many(idx, callback);\n    }\n\n    wrapAtLeastOne(idx: number, callback: DSLMethodOpts<unknown>): void {\n        this.atLeastOne(idx, callback);\n    }\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { IOrAlt, TokenType, TokenTypeDictionary } from 'chevrotain';\nimport type { AbstractElement, Action, Alternatives, Condition, CrossReference, Grammar, Group, Keyword, NamedArgument, ParserRule, RuleCall, UnorderedGroup } from '../languages/generated/ast.js';\nimport type { BaseParser } from './langium-parser.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { Cardinality } from '../utils/grammar-utils.js';\nimport { EMPTY_ALT, EOF } from 'chevrotain';\nimport { isAction, isAlternatives, isEndOfFile, isAssignment, isConjunction, isCrossReference, isDisjunction, isGroup, isKeyword, isNegation, isParameterReference, isParserRule, isRuleCall, isTerminalRule, isUnorderedGroup, isBooleanLiteral } from '../languages/generated/ast.js';\nimport { assertUnreachable, ErrorWithLocation } from '../utils/errors.js';\nimport { stream } from '../utils/stream.js';\nimport { findNameAssignment, getAllReachableRules, getTypeName } from '../utils/grammar-utils.js';\n\ntype RuleContext = {\n    optional: number,\n    consume: number,\n    subrule: number,\n    many: number,\n    or: number\n} & ParserContext;\n\ntype ParserContext = {\n    parser: BaseParser\n    tokens: TokenTypeDictionary\n    rules: Map<string, Rule>\n    ruleNames: Map<AstNode, string>\n}\n\ntype Rule = (args: Args) => unknown;\n\ntype Args = Record<string, boolean>;\n\ntype Predicate = (args: Args) => boolean;\n\ntype Method = (args: Args) => void;\n\nexport function createParser<T extends BaseParser>(grammar: Grammar, parser: T, tokens: TokenTypeDictionary): T {\n    const rules = new Map<string, Rule>();\n    const parserContext: ParserContext = {\n        parser,\n        tokens,\n        rules,\n        ruleNames: new Map()\n    };\n    buildRules(parserContext, grammar);\n    return parser;\n}\n\nfunction buildRules(parserContext: ParserContext, grammar: Grammar): void {\n    const reachable = getAllReachableRules(grammar, false);\n    const parserRules = stream(grammar.rules).filter(isParserRule).filter(rule => reachable.has(rule));\n    for (const rule of parserRules) {\n        const ctx: RuleContext = {\n            ...parserContext,\n            consume: 1,\n            optional: 1,\n            subrule: 1,\n            many: 1,\n            or: 1\n        };\n        ctx.rules.set(\n            rule.name,\n            parserContext.parser.rule(rule, buildElement(ctx, rule.definition))\n        );\n    }\n}\n\nfunction buildElement(ctx: RuleContext, element: AbstractElement, ignoreGuard = false): Method {\n    let method: Method;\n    if (isKeyword(element)) {\n        method = buildKeyword(ctx, element);\n    } else if (isAction(element)) {\n        method = buildAction(ctx, element);\n    } else if (isAssignment(element)) {\n        method = buildElement(ctx, element.terminal);\n    } else if (isCrossReference(element)) {\n        method = buildCrossReference(ctx, element);\n    } else if (isRuleCall(element)) {\n        method = buildRuleCall(ctx, element);\n    } else if (isAlternatives(element)) {\n        method = buildAlternatives(ctx, element);\n    } else if (isUnorderedGroup(element)) {\n        method = buildUnorderedGroup(ctx, element);\n    } else if (isGroup(element)) {\n        method = buildGroup(ctx, element);\n    } else if(isEndOfFile(element)) {\n        const idx = ctx.consume++;\n        method = () => ctx.parser.consume(idx, EOF, element);\n    } else {\n        throw new ErrorWithLocation(element.$cstNode, `Unexpected element type: ${element.$type}`);\n    }\n    return wrap(ctx, ignoreGuard ? undefined : getGuardCondition(element), method, element.cardinality);\n}\n\nfunction buildAction(ctx: RuleContext, action: Action): Method {\n    const actionType = getTypeName(action);\n    return () => ctx.parser.action(actionType, action);\n}\n\nfunction buildRuleCall(ctx: RuleContext, ruleCall: RuleCall): Method {\n    const rule = ruleCall.rule.ref;\n    if (isParserRule(rule)) {\n        const idx = ctx.subrule++;\n        const predicate = ruleCall.arguments.length > 0 ? buildRuleCallPredicate(rule, ruleCall.arguments) : () => ({});\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, rule), ruleCall, predicate(args));\n    } else if (isTerminalRule(rule)) {\n        const idx = ctx.consume++;\n        const method = getToken(ctx, rule.name);\n        return () => ctx.parser.consume(idx, method, ruleCall);\n    } else if (!rule) {\n        throw new ErrorWithLocation(ruleCall.$cstNode, `Undefined rule type: ${ruleCall.$type}`);\n    } else {\n        assertUnreachable(rule);\n    }\n}\n\nfunction buildRuleCallPredicate(rule: ParserRule, namedArgs: NamedArgument[]): (args: Args) => Args {\n    const predicates = namedArgs.map(e => buildPredicate(e.value));\n    return (args) => {\n        const ruleArgs: Args = {};\n        for (let i = 0; i < predicates.length; i++) {\n            const ruleTarget = rule.parameters[i];\n            const predicate = predicates[i];\n            ruleArgs[ruleTarget.name] = predicate(args);\n        }\n        return ruleArgs;\n    };\n}\n\ninterface PredicatedMethod {\n    ALT: Method,\n    GATE?: Predicate\n}\n\nfunction buildPredicate(condition: Condition): Predicate {\n    if (isDisjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) || right(args));\n    } else if (isConjunction(condition)) {\n        const left = buildPredicate(condition.left);\n        const right = buildPredicate(condition.right);\n        return (args) => (left(args) && right(args));\n    } else if (isNegation(condition)) {\n        const value = buildPredicate(condition.value);\n        return (args) => !value(args);\n    } else if (isParameterReference(condition)) {\n        const name = condition.parameter.ref!.name;\n        return (args) => args !== undefined && args[name] === true;\n    } else if (isBooleanLiteral(condition)) {\n        const value = Boolean(condition.true);\n        return () => value;\n    }\n    assertUnreachable(condition);\n}\n\nfunction buildAlternatives(ctx: RuleContext, alternatives: Alternatives): Method {\n    if (alternatives.elements.length === 1) {\n        return buildElement(ctx, alternatives.elements[0]);\n    } else {\n        const methods: PredicatedMethod[] = [];\n\n        for (const element of alternatives.elements) {\n            const predicatedMethod: PredicatedMethod = {\n                // Since we handle the guard condition in the alternative already\n                // We can ignore the group guard condition inside\n                ALT: buildElement(ctx, element, true)\n            };\n            const guard = getGuardCondition(element);\n            if (guard) {\n                predicatedMethod.GATE = buildPredicate(guard);\n            }\n            methods.push(predicatedMethod);\n        }\n\n        const idx = ctx.or++;\n        return (args) => ctx.parser.alternatives(idx, methods.map(method => {\n            const alt: IOrAlt<unknown> = {\n                ALT: () => method.ALT(args)\n            };\n            const gate = method.GATE;\n            if (gate) {\n                alt.GATE = () => gate(args);\n            }\n            return alt;\n        }));\n    }\n}\n\nfunction buildUnorderedGroup(ctx: RuleContext, group: UnorderedGroup): Method {\n    if (group.elements.length === 1) {\n        return buildElement(ctx, group.elements[0]);\n    }\n    const methods: PredicatedMethod[] = [];\n\n    for (const element of group.elements) {\n        const predicatedMethod: PredicatedMethod = {\n            // Since we handle the guard condition in the alternative already\n            // We can ignore the group guard condition inside\n            ALT: buildElement(ctx, element, true)\n        };\n        const guard = getGuardCondition(element);\n        if (guard) {\n            predicatedMethod.GATE = buildPredicate(guard);\n        }\n        methods.push(predicatedMethod);\n    }\n\n    const orIdx = ctx.or++;\n\n    const idFunc = (groupIdx: number, lParser: BaseParser) => {\n        const stackId = lParser.getRuleStack().join('-');\n        return `uGroup_${groupIdx}_${stackId}`;\n    };\n    const alternatives: Method = (args) => ctx.parser.alternatives(orIdx, methods.map((method, idx) => {\n        const alt: IOrAlt<unknown> = { ALT: () => true };\n        const parser = ctx.parser;\n        alt.ALT = () => {\n            method.ALT(args);\n            if (!parser.isRecording()) {\n                const key = idFunc(orIdx, parser);\n                if (!parser.unorderedGroups.get(key)) {\n                    // init after clear state\n                    parser.unorderedGroups.set(key, []);\n                }\n                const groupState = parser.unorderedGroups.get(key)!;\n                if (typeof groupState?.[idx] === 'undefined') {\n                    // Not accessed yet\n                    groupState[idx] = true;\n                }\n            }\n        };\n        const gate = method.GATE;\n        if (gate) {\n            alt.GATE = () => gate(args);\n        } else {\n            alt.GATE = () => {\n                const trackedAlternatives = parser.unorderedGroups.get(idFunc(orIdx, parser));\n                const allow = !trackedAlternatives?.[idx];\n                return allow;\n            };\n        }\n        return alt;\n    }));\n    const wrapped = wrap(ctx, getGuardCondition(group), alternatives, '*');\n    return (args) => {\n        wrapped(args);\n        if (!ctx.parser.isRecording()) {\n            ctx.parser.unorderedGroups.delete(idFunc(orIdx, ctx.parser));\n        }\n    };\n}\n\nfunction buildGroup(ctx: RuleContext, group: Group): Method {\n    const methods = group.elements.map(e => buildElement(ctx, e));\n    return (args) => methods.forEach(method => method(args));\n}\n\nfunction getGuardCondition(element: AbstractElement): Condition | undefined {\n    if (isGroup(element)) {\n        return element.guardCondition;\n    }\n    return undefined;\n}\n\nfunction buildCrossReference(ctx: RuleContext, crossRef: CrossReference, terminal = crossRef.terminal): Method {\n    if (!terminal) {\n        if (!crossRef.type.ref) {\n            throw new Error('Could not resolve reference to type: ' + crossRef.type.$refText);\n        }\n        const assignment = findNameAssignment(crossRef.type.ref);\n        const assignTerminal = assignment?.terminal;\n        if (!assignTerminal) {\n            throw new Error('Could not find name assignment for type: ' + getTypeName(crossRef.type.ref));\n        }\n        return buildCrossReference(ctx, crossRef, assignTerminal);\n    } else if (isRuleCall(terminal) && isParserRule(terminal.rule.ref)) {\n        const idx = ctx.subrule++;\n        return (args) => ctx.parser.subrule(idx, getRule(ctx, terminal.rule.ref as ParserRule), crossRef, args);\n    } else if (isRuleCall(terminal) && isTerminalRule(terminal.rule.ref)) {\n        const idx = ctx.consume++;\n        const terminalRule = getToken(ctx, terminal.rule.ref.name);\n        return () => ctx.parser.consume(idx, terminalRule, crossRef);\n    } else if (isKeyword(terminal)) {\n        const idx = ctx.consume++;\n        const keyword = getToken(ctx, terminal.value);\n        return () => ctx.parser.consume(idx, keyword, crossRef);\n    }\n    else {\n        throw new Error('Could not build cross reference parser');\n    }\n}\n\nfunction buildKeyword(ctx: RuleContext, keyword: Keyword): Method {\n    const idx = ctx.consume++;\n    const token = ctx.tokens[keyword.value];\n    if (!token) {\n        throw new Error('Could not find token for keyword: ' + keyword.value);\n    }\n    return () => ctx.parser.consume(idx, token, keyword);\n}\n\nfunction wrap(ctx: RuleContext, guard: Condition | undefined, method: Method, cardinality: Cardinality): Method {\n    const gate = guard && buildPredicate(guard);\n\n    if (!cardinality) {\n        if (gate) {\n            const idx = ctx.or++;\n            return (args) => ctx.parser.alternatives(idx, [\n                {\n                    ALT: () => method(args),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return method;\n        }\n    }\n\n    if (cardinality === '*') {\n        const idx = ctx.many++;\n        return (args) => ctx.parser.many(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else if (cardinality === '+') {\n        const idx = ctx.many++;\n        if (gate) {\n            const orIdx = ctx.or++;\n            // In the case of a guard condition for the `+` group\n            // We combine it with an empty alternative\n            // If the condition returns true, it needs to parse at least a single iteration\n            // If its false, it is not allowed to parse anything\n            return (args) => ctx.parser.alternatives(orIdx, [\n                {\n                    ALT: () => ctx.parser.atLeastOne(idx, {\n                        DEF: () => method(args)\n                    }),\n                    GATE: () => gate(args)\n                },\n                {\n                    ALT: EMPTY_ALT(),\n                    GATE: () => !gate(args)\n                }\n            ]);\n        } else {\n            return (args) => ctx.parser.atLeastOne(idx, {\n                DEF: () => method(args),\n            });\n        }\n    } else if (cardinality === '?') {\n        const idx = ctx.optional++;\n        return (args) => ctx.parser.optional(idx, {\n            DEF: () => method(args),\n            GATE: gate ? () => gate(args) : undefined\n        });\n    } else {\n        assertUnreachable(cardinality);\n    }\n}\n\nfunction getRule(ctx: ParserContext, element: ParserRule | AbstractElement): Rule {\n    const name = getRuleName(ctx, element);\n    const rule = ctx.rules.get(name);\n    if (!rule) throw new Error(`Rule \"${name}\" not found.\"`);\n    return rule;\n}\n\nfunction getRuleName(ctx: ParserContext, element: ParserRule | AbstractElement): string {\n    if (isParserRule(element)) {\n        return element.name;\n    } else if (ctx.ruleNames.has(element)) {\n        return ctx.ruleNames.get(element)!;\n    } else {\n        let item: AstNode = element;\n        let parent: AstNode = item.$container!;\n        let ruleName: string = element.$type;\n        while (!isParserRule(parent)) {\n            if (isGroup(parent) || isAlternatives(parent) || isUnorderedGroup(parent)) {\n                const index = parent.elements.indexOf(item as AbstractElement);\n                ruleName = index.toString() + ':' + ruleName;\n            }\n            item = parent;\n            parent = parent.$container!;\n        }\n        const rule = parent as ParserRule;\n        ruleName = rule.name + ':' + ruleName;\n        ctx.ruleNames.set(element, ruleName);\n        return ruleName;\n    }\n}\n\nfunction getToken(ctx: ParserContext, name: string): TokenType {\n    const token = ctx.tokens[name];\n    if (!token) throw new Error(`Token \"${name}\" not found.\"`);\n    return token;\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\n/**\n * Create and finalize a Langium parser. The parser rules are derived from the grammar, which is\n * available at `services.Grammar`.\n */\nexport function createLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const parser = prepareLangiumParser(services);\n    parser.finalize();\n    return parser;\n}\n\n/**\n * Create a Langium parser without finalizing it. This is used to extract more detailed error\n * information when the parser is initially validated.\n */\nexport function prepareLangiumParser(services: LangiumCoreServices): LangiumParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumParser(services);\n    return createParser(grammar, parser, lexer.definition);\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CustomPatternMatcherFunc, TokenPattern, TokenType, TokenVocabulary } from 'chevrotain';\nimport type { AbstractRule, Grammar, Keyword, TerminalRule } from '../languages/generated/ast.js';\nimport type { Stream } from '../utils/stream.js';\nimport { Lexer } from 'chevrotain';\nimport { isKeyword, isParserRule, isTerminalRule } from '../languages/generated/ast.js';\nimport { streamAllContents } from '../utils/ast-utils.js';\nimport { getAllReachableRules, terminalRegex } from '../utils/grammar-utils.js';\nimport { getCaseInsensitivePattern, isWhitespace, partialMatches } from '../utils/regexp-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport interface TokenBuilderOptions {\n    caseInsensitive?: boolean\n}\n\nexport interface TokenBuilder {\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary;\n}\n\nexport class DefaultTokenBuilder implements TokenBuilder {\n\n    buildTokens(grammar: Grammar, options?: TokenBuilderOptions): TokenVocabulary {\n        const reachableRules = stream(getAllReachableRules(grammar, false));\n        const terminalTokens: TokenType[] = this.buildTerminalTokens(reachableRules);\n        const tokens: TokenType[] = this.buildKeywordTokens(reachableRules, terminalTokens, options);\n\n        terminalTokens.forEach(terminalToken => {\n            const pattern = terminalToken.PATTERN;\n            if (typeof pattern === 'object' && pattern && 'test' in pattern && isWhitespace(pattern)) {\n                tokens.unshift(terminalToken);\n            } else {\n                tokens.push(terminalToken);\n            }\n        });\n        // We don't need to add the EOF token explicitly.\n        // It is automatically available at the end of the token stream.\n        return tokens;\n    }\n\n    protected buildTerminalTokens(rules: Stream<AbstractRule>): TokenType[] {\n        return rules.filter(isTerminalRule).filter(e => !e.fragment)\n            .map(terminal => this.buildTerminalToken(terminal)).toArray();\n    }\n\n    protected buildTerminalToken(terminal: TerminalRule): TokenType {\n        const regex = terminalRegex(terminal);\n        const pattern = this.requiresCustomPattern(regex) ? this.regexPatternFunction(regex) : regex;\n        const tokenType: TokenType = {\n            name: terminal.name,\n            PATTERN: pattern,\n            LINE_BREAKS: true\n        };\n        if (terminal.hidden) {\n            // Only skip tokens that are able to accept whitespace\n            tokenType.GROUP = isWhitespace(regex) ? Lexer.SKIPPED : 'hidden';\n        }\n        return tokenType;\n    }\n\n    protected requiresCustomPattern(regex: RegExp): boolean {\n        if (regex.flags.includes('u')) {\n            // Unicode regexes are not supported by Chevrotain.\n            return true;\n        } else if (regex.source.includes('?<=') || regex.source.includes('?<!')) {\n            // Negative and positive lookbehind are not supported by Chevrotain yet.\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    protected regexPatternFunction(regex: RegExp): CustomPatternMatcherFunc {\n        const stickyRegex = new RegExp(regex, regex.flags + 'y');\n        return (text, offset) => {\n            stickyRegex.lastIndex = offset;\n            const execResult = stickyRegex.exec(text);\n            return execResult;\n        };\n    }\n\n    protected buildKeywordTokens(rules: Stream<AbstractRule>, terminalTokens: TokenType[], options?: TokenBuilderOptions): TokenType[] {\n        return rules\n            // We filter by parser rules, since keywords in terminal rules get transformed into regex and are not actual tokens\n            .filter(isParserRule)\n            .flatMap(rule => streamAllContents(rule).filter(isKeyword))\n            .distinct(e => e.value).toArray()\n            // Sort keywords by descending length\n            .sort((a, b) => b.value.length - a.value.length)\n            .map(keyword => this.buildKeywordToken(keyword, terminalTokens, Boolean(options?.caseInsensitive)));\n    }\n\n    protected buildKeywordToken(keyword: Keyword, terminalTokens: TokenType[], caseInsensitive: boolean): TokenType {\n        return {\n            name: keyword.value,\n            PATTERN: this.buildKeywordPattern(keyword, caseInsensitive),\n            LONGER_ALT: this.findLongerAlt(keyword, terminalTokens)\n        };\n    }\n\n    protected buildKeywordPattern(keyword: Keyword, caseInsensitive: boolean): TokenPattern {\n        return caseInsensitive ?\n            new RegExp(getCaseInsensitivePattern(keyword.value)) :\n            keyword.value;\n    }\n\n    protected findLongerAlt(keyword: Keyword, terminalTokens: TokenType[]): TokenType[] {\n        return terminalTokens.reduce((longerAlts: TokenType[], token) => {\n            const pattern = token?.PATTERN as RegExp;\n            if (pattern?.source && partialMatches('^' + pattern.source + '$', keyword.value)) {\n                longerAlts.push(token);\n            }\n            return longerAlts;\n        }, []);\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AbstractElement, AbstractRule } from '../languages/generated/ast.js';\nimport type { CstNode } from '../syntax-tree.js';\nimport { isCrossReference, isRuleCall } from '../languages/generated/ast.js';\nimport { getCrossReferenceTerminal, getRuleType } from '../utils/grammar-utils.js';\n\n/**\n * Language-specific service for converting string values from the source text format into a value to be held in the AST.\n */\nexport interface ValueConverter {\n    /**\n     * Converts a string value from the source text format into a value to be held in the AST.\n     */\n    convert(input: string, cstNode: CstNode): ValueType;\n}\n\nexport type ValueType = string | number | boolean | bigint | Date;\n\nexport class DefaultValueConverter implements ValueConverter {\n\n    convert(input: string, cstNode: CstNode): ValueType {\n        let feature: AbstractElement | undefined = cstNode.grammarSource;\n        if (isCrossReference(feature)) {\n            feature = getCrossReferenceTerminal(feature);\n        }\n        if (isRuleCall(feature)) {\n            const rule = feature.rule.ref;\n            if (!rule) {\n                throw new Error('This cst node was not parsed by a rule.');\n            }\n            return this.runConverter(rule, input, cstNode);\n        }\n        return input;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    protected runConverter(rule: AbstractRule, input: string, cstNode: CstNode): ValueType {\n        switch (rule.name.toUpperCase()) {\n            case 'INT': return ValueConverter.convertInt(input);\n            case 'STRING': return ValueConverter.convertString(input);\n            case 'ID': return ValueConverter.convertID(input);\n        }\n        switch (getRuleType(rule)?.toLowerCase()) {\n            case 'number': return ValueConverter.convertNumber(input);\n            case 'boolean': return ValueConverter.convertBoolean(input);\n            case 'bigint': return ValueConverter.convertBigint(input);\n            case 'date': return ValueConverter.convertDate(input);\n            default: return input;\n        }\n    }\n}\n\nexport namespace ValueConverter {\n\n    export function convertString(input: string): string {\n        let result = '';\n        for (let i = 1; i < input.length - 1; i++) {\n            const c = input.charAt(i);\n            if (c === '\\\\') {\n                const c1 = input.charAt(++i);\n                result += convertEscapeCharacter(c1);\n            } else {\n                result += c;\n            }\n        }\n        return result;\n    }\n\n    function convertEscapeCharacter(char: string): string {\n        switch (char) {\n            case 'b': return '\\b';\n            case 'f': return '\\f';\n            case 'n': return '\\n';\n            case 'r': return '\\r';\n            case 't': return '\\t';\n            case 'v': return '\\v';\n            case '0': return '\\0';\n            default: return char;\n        }\n    }\n\n    export function convertID(input: string): string {\n        if (input.charAt(0) === '^') {\n            return input.substring(1);\n        } else {\n            return input;\n        }\n    }\n\n    export function convertInt(input: string): number {\n        return parseInt(input);\n    }\n\n    export function convertBigint(input: string): bigint {\n        return BigInt(input);\n    }\n\n    export function convertDate(input: string): Date {\n        return new Date(input);\n    }\n\n    export function convertNumber(input: string): number {\n        return Number(input);\n    }\n\n    export function convertBoolean(input: string): boolean {\n        return input.toLowerCase() === 'true';\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource, type AbstractCancellationTokenSource } from '../utils/cancellation.js';\n\nexport type MaybePromise<T> = T | Promise<T>\n\n/**\n * Delays the execution of the current code to the next tick of the event loop.\n * Don't call this method directly in a tight loop to prevent too many promises from being created.\n */\nexport function delayNextTick(): Promise<void> {\n    return new Promise(resolve => {\n        // In case we are running in a non-node environment, `setImmediate` isn't available.\n        // Using `setTimeout` of the browser API accomplishes the same result.\n        if (typeof setImmediate === 'undefined') {\n            setTimeout(resolve, 0);\n        } else {\n            setImmediate(resolve);\n        }\n    });\n}\n\nlet lastTick = 0;\nlet globalInterruptionPeriod = 10;\n\n/**\n * Reset the global interruption period and create a cancellation token source.\n */\nexport function startCancelableOperation(): AbstractCancellationTokenSource {\n    lastTick = Date.now();\n    return new CancellationTokenSource();\n}\n\n/**\n * Change the period duration for `interruptAndCheck` to the given number of milliseconds.\n * The default value is 10ms.\n */\nexport function setInterruptionPeriod(period: number): void {\n    globalInterruptionPeriod = period;\n}\n\n/**\n * This symbol may be thrown in an asynchronous context by any Langium service that receives\n * a `CancellationToken`. This means that the promise returned by such a service is rejected with\n * this symbol as rejection reason.\n */\nexport const OperationCancelled = Symbol('OperationCancelled');\n\n/**\n * Use this in a `catch` block to check whether the thrown object indicates that the operation\n * has been cancelled.\n */\nexport function isOperationCancelled(err: unknown): err is typeof OperationCancelled {\n    return err === OperationCancelled;\n}\n\n/**\n * This function does two things:\n *  1. Check the elapsed time since the last call to this function or to `startCancelableOperation`. If the predefined\n *     period (configured with `setInterruptionPeriod`) is exceeded, execution is delayed with `delayNextTick`.\n *  2. If the predefined period is not met yet or execution is resumed after an interruption, the given cancellation\n *     token is checked, and if cancellation is requested, `OperationCanceled` is thrown.\n *\n * All services in Langium that receive a `CancellationToken` may potentially call this function, so the\n * `CancellationToken` must be caught (with an `async` try-catch block or a `catch` callback attached to\n * the promise) to avoid that event being exposed as an error.\n */\nexport async function interruptAndCheck(token: CancellationToken): Promise<void> {\n    if (token === CancellationToken.None) {\n        // Early exit in case cancellation was disabled by the caller\n        return;\n    }\n    const current = Date.now();\n    if (current - lastTick >= globalInterruptionPeriod) {\n        lastTick = current;\n        await delayNextTick();\n    }\n    if (token.isCancellationRequested) {\n        throw OperationCancelled;\n    }\n}\n\n/**\n * Simple implementation of the deferred pattern.\n * An object that exposes a promise and functions to resolve and reject it.\n */\nexport class Deferred<T = void> {\n    resolve: (value: T) => this;\n    reject: (err?: unknown) => this;\n\n    promise = new Promise<T>((resolve, reject) => {\n        this.resolve = (arg) => {\n            resolve(arg);\n            return this;\n        };\n        this.reject = (err) => {\n            reject(err);\n            return this;\n        };\n    });\n}\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\nclass FullTextDocument {\n    constructor(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = undefined;\n    }\n    get uri() {\n        return this._uri;\n    }\n    get languageId() {\n        return this._languageId;\n    }\n    get version() {\n        return this._version;\n    }\n    getText(range) {\n        if (range) {\n            const start = this.offsetAt(range.start);\n            const end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    }\n    update(changes, version) {\n        for (const change of changes) {\n            if (FullTextDocument.isIncremental(change)) {\n                // makes sure start is before end\n                const range = getWellformedRange(change.range);\n                // update content\n                const startOffset = this.offsetAt(range.start);\n                const endOffset = this.offsetAt(range.end);\n                this._content = this._content.substring(0, startOffset) + change.text + this._content.substring(endOffset, this._content.length);\n                // update the offsets\n                const startLine = Math.max(range.start.line, 0);\n                const endLine = Math.max(range.end.line, 0);\n                let lineOffsets = this._lineOffsets;\n                const addedLineOffsets = computeLineOffsets(change.text, false, startOffset);\n                if (endLine - startLine === addedLineOffsets.length) {\n                    for (let i = 0, len = addedLineOffsets.length; i < len; i++) {\n                        lineOffsets[i + startLine + 1] = addedLineOffsets[i];\n                    }\n                }\n                else {\n                    if (addedLineOffsets.length < 10000) {\n                        lineOffsets.splice(startLine + 1, endLine - startLine, ...addedLineOffsets);\n                    }\n                    else { // avoid too many arguments for splice\n                        this._lineOffsets = lineOffsets = lineOffsets.slice(0, startLine + 1).concat(addedLineOffsets, lineOffsets.slice(endLine + 1));\n                    }\n                }\n                const diff = change.text.length - (endOffset - startOffset);\n                if (diff !== 0) {\n                    for (let i = startLine + 1 + addedLineOffsets.length, len = lineOffsets.length; i < len; i++) {\n                        lineOffsets[i] = lineOffsets[i] + diff;\n                    }\n                }\n            }\n            else if (FullTextDocument.isFull(change)) {\n                this._content = change.text;\n                this._lineOffsets = undefined;\n            }\n            else {\n                throw new Error('Unknown change event received');\n            }\n        }\n        this._version = version;\n    }\n    getLineOffsets() {\n        if (this._lineOffsets === undefined) {\n            this._lineOffsets = computeLineOffsets(this._content, true);\n        }\n        return this._lineOffsets;\n    }\n    positionAt(offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        const lineOffsets = this.getLineOffsets();\n        let low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return { line: 0, character: offset };\n        }\n        while (low < high) {\n            const mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        const line = low - 1;\n        offset = this.ensureBeforeEOL(offset, lineOffsets[line]);\n        return { line, character: offset - lineOffsets[line] };\n    }\n    offsetAt(position) {\n        const lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        const lineOffset = lineOffsets[position.line];\n        if (position.character <= 0) {\n            return lineOffset;\n        }\n        const nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        const offset = Math.min(lineOffset + position.character, nextLineOffset);\n        return this.ensureBeforeEOL(offset, lineOffset);\n    }\n    ensureBeforeEOL(offset, lineOffset) {\n        while (offset > lineOffset && isEOL(this._content.charCodeAt(offset - 1))) {\n            offset--;\n        }\n        return offset;\n    }\n    get lineCount() {\n        return this.getLineOffsets().length;\n    }\n    static isIncremental(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range !== undefined &&\n            (candidate.rangeLength === undefined || typeof candidate.rangeLength === 'number');\n    }\n    static isFull(event) {\n        const candidate = event;\n        return candidate !== undefined && candidate !== null &&\n            typeof candidate.text === 'string' && candidate.range === undefined && candidate.rangeLength === undefined;\n    }\n}\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new text document.\n     *\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param version The document's initial version number.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Updates a TextDocument by modifying its content.\n     *\n     * @param document the document to update. Only documents created by TextDocument.create are valid inputs.\n     * @param changes the changes to apply to the document.\n     * @param version the changes version for the document.\n     * @returns The updated TextDocument. Note: That's the same document instance passed in as first parameter.\n     *\n     */\n    function update(document, changes, version) {\n        if (document instanceof FullTextDocument) {\n            document.update(changes, version);\n            return document;\n        }\n        else {\n            throw new Error('TextDocument.update: document must be created by TextDocument.create');\n        }\n    }\n    TextDocument.update = update;\n    function applyEdits(document, edits) {\n        const text = document.getText();\n        const sortedEdits = mergeSort(edits.map(getWellformedEdit), (a, b) => {\n            const diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        let lastModifiedOffset = 0;\n        const spans = [];\n        for (const e of sortedEdits) {\n            const startOffset = document.offsetAt(e.range.start);\n            if (startOffset < lastModifiedOffset) {\n                throw new Error('Overlapping edit');\n            }\n            else if (startOffset > lastModifiedOffset) {\n                spans.push(text.substring(lastModifiedOffset, startOffset));\n            }\n            if (e.newText.length) {\n                spans.push(e.newText);\n            }\n            lastModifiedOffset = document.offsetAt(e.range.end);\n        }\n        spans.push(text.substr(lastModifiedOffset));\n        return spans.join('');\n    }\n    TextDocument.applyEdits = applyEdits;\n})(TextDocument || (TextDocument = {}));\nfunction mergeSort(data, compare) {\n    if (data.length <= 1) {\n        // sorted\n        return data;\n    }\n    const p = (data.length / 2) | 0;\n    const left = data.slice(0, p);\n    const right = data.slice(p);\n    mergeSort(left, compare);\n    mergeSort(right, compare);\n    let leftIdx = 0;\n    let rightIdx = 0;\n    let i = 0;\n    while (leftIdx < left.length && rightIdx < right.length) {\n        const ret = compare(left[leftIdx], right[rightIdx]);\n        if (ret <= 0) {\n            // smaller_equal -> take left to preserve order\n            data[i++] = left[leftIdx++];\n        }\n        else {\n            // greater -> take right\n            data[i++] = right[rightIdx++];\n        }\n    }\n    while (leftIdx < left.length) {\n        data[i++] = left[leftIdx++];\n    }\n    while (rightIdx < right.length) {\n        data[i++] = right[rightIdx++];\n    }\n    return data;\n}\nfunction computeLineOffsets(text, isAtLineStart, textOffset = 0) {\n    const result = isAtLineStart ? [textOffset] : [];\n    for (let i = 0; i < text.length; i++) {\n        const ch = text.charCodeAt(i);\n        if (isEOL(ch)) {\n            if (ch === 13 /* CharCode.CarriageReturn */ && i + 1 < text.length && text.charCodeAt(i + 1) === 10 /* CharCode.LineFeed */) {\n                i++;\n            }\n            result.push(textOffset + i + 1);\n        }\n    }\n    return result;\n}\nfunction isEOL(char) {\n    return char === 13 /* CharCode.CarriageReturn */ || char === 10 /* CharCode.LineFeed */;\n}\nfunction getWellformedRange(range) {\n    const start = range.start;\n    const end = range.end;\n    if (start.line > end.line || (start.line === end.line && start.character > end.character)) {\n        return { start: end, end: start };\n    }\n    return range;\n}\nfunction getWellformedEdit(textEdit) {\n    const range = getWellformedRange(textEdit.range);\n    if (range !== textEdit.range) {\n        return { newText: textEdit.newText, range };\n    }\n    return textEdit;\n}\n","// 'path' module extracted from Node.js v8.11.1 (only the posix part)\n// transplited with Babel\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));\n  }\n}\n\n// Resolves . and .. elements in a path with directory names\nfunction normalizeStringPosix(path, allowAboveRoot) {\n  var res = '';\n  var lastSegmentLength = 0;\n  var lastSlash = -1;\n  var dots = 0;\n  var code;\n  for (var i = 0; i <= path.length; ++i) {\n    if (i < path.length)\n      code = path.charCodeAt(i);\n    else if (code === 47 /*/*/)\n      break;\n    else\n      code = 47 /*/*/;\n    if (code === 47 /*/*/) {\n      if (lastSlash === i - 1 || dots === 1) {\n        // NOOP\n      } else if (lastSlash !== i - 1 && dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/ || res.charCodeAt(res.length - 2) !== 46 /*.*/) {\n          if (res.length > 2) {\n            var lastSlashIndex = res.lastIndexOf('/');\n            if (lastSlashIndex !== res.length - 1) {\n              if (lastSlashIndex === -1) {\n                res = '';\n                lastSegmentLength = 0;\n              } else {\n                res = res.slice(0, lastSlashIndex);\n                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');\n              }\n              lastSlash = i;\n              dots = 0;\n              continue;\n            }\n          } else if (res.length === 2 || res.length === 1) {\n            res = '';\n            lastSegmentLength = 0;\n            lastSlash = i;\n            dots = 0;\n            continue;\n          }\n        }\n        if (allowAboveRoot) {\n          if (res.length > 0)\n            res += '/..';\n          else\n            res = '..';\n          lastSegmentLength = 2;\n        }\n      } else {\n        if (res.length > 0)\n          res += '/' + path.slice(lastSlash + 1, i);\n        else\n          res = path.slice(lastSlash + 1, i);\n        lastSegmentLength = i - lastSlash - 1;\n      }\n      lastSlash = i;\n      dots = 0;\n    } else if (code === 46 /*.*/ && dots !== -1) {\n      ++dots;\n    } else {\n      dots = -1;\n    }\n  }\n  return res;\n}\n\nfunction _format(sep, pathObject) {\n  var dir = pathObject.dir || pathObject.root;\n  var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');\n  if (!dir) {\n    return base;\n  }\n  if (dir === pathObject.root) {\n    return dir + base;\n  }\n  return dir + sep + base;\n}\n\nvar posix = {\n  // path.resolve([from ...], to)\n  resolve: function resolve() {\n    var resolvedPath = '';\n    var resolvedAbsolute = false;\n    var cwd;\n\n    for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n      var path;\n      if (i >= 0)\n        path = arguments[i];\n      else {\n        if (cwd === undefined)\n          cwd = process.cwd();\n        path = cwd;\n      }\n\n      assertPath(path);\n\n      // Skip empty entries\n      if (path.length === 0) {\n        continue;\n      }\n\n      resolvedPath = path + '/' + resolvedPath;\n      resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    }\n\n    // At this point the path should be resolved to a full absolute path, but\n    // handle relative paths to be safe (might happen when process.cwd() fails)\n\n    // Normalize the path\n    resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);\n\n    if (resolvedAbsolute) {\n      if (resolvedPath.length > 0)\n        return '/' + resolvedPath;\n      else\n        return '/';\n    } else if (resolvedPath.length > 0) {\n      return resolvedPath;\n    } else {\n      return '.';\n    }\n  },\n\n  normalize: function normalize(path) {\n    assertPath(path);\n\n    if (path.length === 0) return '.';\n\n    var isAbsolute = path.charCodeAt(0) === 47 /*/*/;\n    var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/;\n\n    // Normalize the path\n    path = normalizeStringPosix(path, !isAbsolute);\n\n    if (path.length === 0 && !isAbsolute) path = '.';\n    if (path.length > 0 && trailingSeparator) path += '/';\n\n    if (isAbsolute) return '/' + path;\n    return path;\n  },\n\n  isAbsolute: function isAbsolute(path) {\n    assertPath(path);\n    return path.length > 0 && path.charCodeAt(0) === 47 /*/*/;\n  },\n\n  join: function join() {\n    if (arguments.length === 0)\n      return '.';\n    var joined;\n    for (var i = 0; i < arguments.length; ++i) {\n      var arg = arguments[i];\n      assertPath(arg);\n      if (arg.length > 0) {\n        if (joined === undefined)\n          joined = arg;\n        else\n          joined += '/' + arg;\n      }\n    }\n    if (joined === undefined)\n      return '.';\n    return posix.normalize(joined);\n  },\n\n  relative: function relative(from, to) {\n    assertPath(from);\n    assertPath(to);\n\n    if (from === to) return '';\n\n    from = posix.resolve(from);\n    to = posix.resolve(to);\n\n    if (from === to) return '';\n\n    // Trim any leading backslashes\n    var fromStart = 1;\n    for (; fromStart < from.length; ++fromStart) {\n      if (from.charCodeAt(fromStart) !== 47 /*/*/)\n        break;\n    }\n    var fromEnd = from.length;\n    var fromLen = fromEnd - fromStart;\n\n    // Trim any leading backslashes\n    var toStart = 1;\n    for (; toStart < to.length; ++toStart) {\n      if (to.charCodeAt(toStart) !== 47 /*/*/)\n        break;\n    }\n    var toEnd = to.length;\n    var toLen = toEnd - toStart;\n\n    // Compare paths to find the longest common path from root\n    var length = fromLen < toLen ? fromLen : toLen;\n    var lastCommonSep = -1;\n    var i = 0;\n    for (; i <= length; ++i) {\n      if (i === length) {\n        if (toLen > length) {\n          if (to.charCodeAt(toStart + i) === 47 /*/*/) {\n            // We get here if `from` is the exact base path for `to`.\n            // For example: from='/foo/bar'; to='/foo/bar/baz'\n            return to.slice(toStart + i + 1);\n          } else if (i === 0) {\n            // We get here if `from` is the root\n            // For example: from='/'; to='/foo'\n            return to.slice(toStart + i);\n          }\n        } else if (fromLen > length) {\n          if (from.charCodeAt(fromStart + i) === 47 /*/*/) {\n            // We get here if `to` is the exact base path for `from`.\n            // For example: from='/foo/bar/baz'; to='/foo/bar'\n            lastCommonSep = i;\n          } else if (i === 0) {\n            // We get here if `to` is the root.\n            // For example: from='/foo'; to='/'\n            lastCommonSep = 0;\n          }\n        }\n        break;\n      }\n      var fromCode = from.charCodeAt(fromStart + i);\n      var toCode = to.charCodeAt(toStart + i);\n      if (fromCode !== toCode)\n        break;\n      else if (fromCode === 47 /*/*/)\n        lastCommonSep = i;\n    }\n\n    var out = '';\n    // Generate the relative path based on the path difference between `to`\n    // and `from`\n    for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n      if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/) {\n        if (out.length === 0)\n          out += '..';\n        else\n          out += '/..';\n      }\n    }\n\n    // Lastly, append the rest of the destination (`to`) path that comes after\n    // the common path parts\n    if (out.length > 0)\n      return out + to.slice(toStart + lastCommonSep);\n    else {\n      toStart += lastCommonSep;\n      if (to.charCodeAt(toStart) === 47 /*/*/)\n        ++toStart;\n      return to.slice(toStart);\n    }\n  },\n\n  _makeLong: function _makeLong(path) {\n    return path;\n  },\n\n  dirname: function dirname(path) {\n    assertPath(path);\n    if (path.length === 0) return '.';\n    var code = path.charCodeAt(0);\n    var hasRoot = code === 47 /*/*/;\n    var end = -1;\n    var matchedSlash = true;\n    for (var i = path.length - 1; i >= 1; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          if (!matchedSlash) {\n            end = i;\n            break;\n          }\n        } else {\n        // We saw the first non-path separator\n        matchedSlash = false;\n      }\n    }\n\n    if (end === -1) return hasRoot ? '/' : '.';\n    if (hasRoot && end === 1) return '//';\n    return path.slice(0, end);\n  },\n\n  basename: function basename(path, ext) {\n    if (ext !== undefined && typeof ext !== 'string') throw new TypeError('\"ext\" argument must be a string');\n    assertPath(path);\n\n    var start = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i;\n\n    if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {\n      if (ext.length === path.length && ext === path) return '';\n      var extIdx = ext.length - 1;\n      var firstNonSlashEnd = -1;\n      for (i = path.length - 1; i >= 0; --i) {\n        var code = path.charCodeAt(i);\n        if (code === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else {\n          if (firstNonSlashEnd === -1) {\n            // We saw the first non-path separator, remember this index in case\n            // we need it if the extension ends up not matching\n            matchedSlash = false;\n            firstNonSlashEnd = i + 1;\n          }\n          if (extIdx >= 0) {\n            // Try to match the explicit extension\n            if (code === ext.charCodeAt(extIdx)) {\n              if (--extIdx === -1) {\n                // We matched the extension, so mark this as the end of our path\n                // component\n                end = i;\n              }\n            } else {\n              // Extension does not match, so our result is the entire path\n              // component\n              extIdx = -1;\n              end = firstNonSlashEnd;\n            }\n          }\n        }\n      }\n\n      if (start === end) end = firstNonSlashEnd;else if (end === -1) end = path.length;\n      return path.slice(start, end);\n    } else {\n      for (i = path.length - 1; i >= 0; --i) {\n        if (path.charCodeAt(i) === 47 /*/*/) {\n            // If we reached a path separator that was not part of a set of path\n            // separators at the end of the string, stop now\n            if (!matchedSlash) {\n              start = i + 1;\n              break;\n            }\n          } else if (end === -1) {\n          // We saw the first non-path separator, mark this as the end of our\n          // path component\n          matchedSlash = false;\n          end = i + 1;\n        }\n      }\n\n      if (end === -1) return '';\n      return path.slice(start, end);\n    }\n  },\n\n  extname: function extname(path) {\n    assertPath(path);\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n    for (var i = path.length - 1; i >= 0; --i) {\n      var code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1)\n            startDot = i;\n          else if (preDotState !== 1)\n            preDotState = 1;\n      } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n        // We saw a non-dot character immediately before the dot\n        preDotState === 0 ||\n        // The (right-most) trimmed path component is exactly '..'\n        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      return '';\n    }\n    return path.slice(startDot, end);\n  },\n\n  format: function format(pathObject) {\n    if (pathObject === null || typeof pathObject !== 'object') {\n      throw new TypeError('The \"pathObject\" argument must be of type Object. Received type ' + typeof pathObject);\n    }\n    return _format('/', pathObject);\n  },\n\n  parse: function parse(path) {\n    assertPath(path);\n\n    var ret = { root: '', dir: '', base: '', ext: '', name: '' };\n    if (path.length === 0) return ret;\n    var code = path.charCodeAt(0);\n    var isAbsolute = code === 47 /*/*/;\n    var start;\n    if (isAbsolute) {\n      ret.root = '/';\n      start = 1;\n    } else {\n      start = 0;\n    }\n    var startDot = -1;\n    var startPart = 0;\n    var end = -1;\n    var matchedSlash = true;\n    var i = path.length - 1;\n\n    // Track the state of characters (if any) we see before our first dot and\n    // after any path separator we find\n    var preDotState = 0;\n\n    // Get non-dir info\n    for (; i >= start; --i) {\n      code = path.charCodeAt(i);\n      if (code === 47 /*/*/) {\n          // If we reached a path separator that was not part of a set of path\n          // separators at the end of the string, stop now\n          if (!matchedSlash) {\n            startPart = i + 1;\n            break;\n          }\n          continue;\n        }\n      if (end === -1) {\n        // We saw the first non-path separator, mark this as the end of our\n        // extension\n        matchedSlash = false;\n        end = i + 1;\n      }\n      if (code === 46 /*.*/) {\n          // If this is our first dot, mark it as the start of our extension\n          if (startDot === -1) startDot = i;else if (preDotState !== 1) preDotState = 1;\n        } else if (startDot !== -1) {\n        // We saw a non-dot and non-path separator before our dot, so we should\n        // have a good chance at having a non-empty extension\n        preDotState = -1;\n      }\n    }\n\n    if (startDot === -1 || end === -1 ||\n    // We saw a non-dot character immediately before the dot\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly '..'\n    preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n      if (end !== -1) {\n        if (startPart === 0 && isAbsolute) ret.base = ret.name = path.slice(1, end);else ret.base = ret.name = path.slice(startPart, end);\n      }\n    } else {\n      if (startPart === 0 && isAbsolute) {\n        ret.name = path.slice(1, startDot);\n        ret.base = path.slice(1, end);\n      } else {\n        ret.name = path.slice(startPart, startDot);\n        ret.base = path.slice(startPart, end);\n      }\n      ret.ext = path.slice(startDot, end);\n    }\n\n    if (startPart > 0) ret.dir = path.slice(0, startPart - 1);else if (isAbsolute) ret.dir = '/';\n\n    return ret;\n  },\n\n  sep: '/',\n  delimiter: ':',\n  win32: null,\n  posix: null\n};\n\nposix.posix = posix;\n\nmodule.exports = posix;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\n// !!!!!\n// SEE https://github.com/microsoft/vscode/blob/master/src/vs/base/common/platform.ts\n// !!!!!\n\ndeclare const process: { platform: 'win32' };\ndeclare const navigator: { userAgent: string };\n\nexport let isWindows: boolean;\n\nif (typeof process === 'object') {\n\tisWindows = process.platform === 'win32';\n} else if (typeof navigator === 'object') {\n\tlet userAgent = navigator.userAgent;\n\tisWindows = userAgent.indexOf('Windows') >= 0;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { CharCode } from './charCode'\nimport { isWindows } from './platform';\n\nconst _schemePattern = /^\\w[\\w\\d+.-]*$/;\nconst _singleSlashStart = /^\\//;\nconst _doubleSlashStart = /^\\/\\//;\n\nfunction _validateUri(ret: URI, _strict?: boolean): void {\n\n\t// scheme, must be set\n\tif (!ret.scheme && _strict) {\n\t\tthrow new Error(`[UriError]: Scheme is missing: {scheme: \"\", authority: \"${ret.authority}\", path: \"${ret.path}\", query: \"${ret.query}\", fragment: \"${ret.fragment}\"}`);\n\t}\n\n\t// scheme, https://tools.ietf.org/html/rfc3986#section-3.1\n\t// ALPHA *( ALPHA / DIGIT / \"+\" / \"-\" / \".\" )\n\tif (ret.scheme && !_schemePattern.test(ret.scheme)) {\n\t\tthrow new Error('[UriError]: Scheme contains illegal characters.');\n\t}\n\n\t// path, http://tools.ietf.org/html/rfc3986#section-3.3\n\t// If a URI contains an authority component, then the path component\n\t// must either be empty or begin with a slash (\"/\") character.  If a URI\n\t// does not contain an authority component, then the path cannot begin\n\t// with two slash characters (\"//\").\n\tif (ret.path) {\n\t\tif (ret.authority) {\n\t\t\tif (!_singleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI contains an authority component, then the path component must either be empty or begin with a slash (\"/\") character');\n\t\t\t}\n\t\t} else {\n\t\t\tif (_doubleSlashStart.test(ret.path)) {\n\t\t\t\tthrow new Error('[UriError]: If a URI does not contain an authority component, then the path cannot begin with two slash characters (\"//\")');\n\t\t\t}\n\t\t}\n\t}\n}\n\n// for a while we allowed uris *without* schemes and this is the migration\n// for them, e.g. an uri without scheme and without strict-mode warns and falls\n// back to the file-scheme. that should cause the least carnage and still be a\n// clear warning\nfunction _schemeFix(scheme: string, _strict: boolean): string {\n\tif (!scheme && !_strict) {\n\t\treturn 'file';\n\t}\n\treturn scheme;\n}\n\n// implements a bit of https://tools.ietf.org/html/rfc3986#section-5\nfunction _referenceResolution(scheme: string, path: string): string {\n\n\t// the slash-character is our 'default base' as we don't\n\t// support constructing URIs relative to other URIs. This\n\t// also means that we alter and potentially break paths.\n\t// see https://tools.ietf.org/html/rfc3986#section-5.1.4\n\tswitch (scheme) {\n\t\tcase 'https':\n\t\tcase 'http':\n\t\tcase 'file':\n\t\t\tif (!path) {\n\t\t\t\tpath = _slash;\n\t\t\t} else if (path[0] !== _slash) {\n\t\t\t\tpath = _slash + path;\n\t\t\t}\n\t\t\tbreak;\n\t}\n\treturn path;\n}\n\nconst _empty = '';\nconst _slash = '/';\nconst _regexp = /^(([^:/?#]+?):)?(\\/\\/([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?/;\n\n/**\n * Uniform Resource Identifier (URI) http://tools.ietf.org/html/rfc3986.\n * This class is a simple parser which creates the basic component parts\n * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n * and encoding.\n *\n * ```txt\n *       foo://example.com:8042/over/there?name=ferret#nose\n *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n *        |           |            |            |        |\n *     scheme     authority       path        query   fragment\n *        |   _____________________|__\n *       / \\ /                        \\\n *       urn:example:animal:ferret:nose\n * ```\n */\nexport class URI implements UriComponents {\n\n\tstatic isUri(thing: any): thing is URI {\n\t\tif (thing instanceof URI) {\n\t\t\treturn true;\n\t\t}\n\t\tif (!thing) {\n\t\t\treturn false;\n\t\t}\n\t\treturn typeof (<URI>thing).authority === 'string'\n\t\t\t&& typeof (<URI>thing).fragment === 'string'\n\t\t\t&& typeof (<URI>thing).path === 'string'\n\t\t\t&& typeof (<URI>thing).query === 'string'\n\t\t\t&& typeof (<URI>thing).scheme === 'string'\n\t\t\t&& typeof (<URI>thing).fsPath === 'string'\n\t\t\t&& typeof (<URI>thing).with === 'function'\n\t\t\t&& typeof (<URI>thing).toString === 'function';\n\t}\n\n\t/**\n\t * scheme is the 'http' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part before the first colon.\n\t */\n\treadonly scheme: string;\n\n\t/**\n\t * authority is the 'www.example.com' part of 'http://www.example.com/some/path?query#fragment'.\n\t * The part between the first double slashes and the next slash.\n\t */\n\treadonly authority: string;\n\n\t/**\n\t * path is the '/some/path' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly path: string;\n\n\t/**\n\t * query is the 'query' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly query: string;\n\n\t/**\n\t * fragment is the 'fragment' part of 'http://www.example.com/some/path?query#fragment'.\n\t */\n\treadonly fragment: string;\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(scheme: string, authority?: string, path?: string, query?: string, fragment?: string, _strict?: boolean);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(components: UriComponents);\n\n\t/**\n\t * @internal\n\t */\n\tprotected constructor(schemeOrData: string | UriComponents, authority?: string, path?: string, query?: string, fragment?: string, _strict: boolean = false) {\n\n\t\tif (typeof schemeOrData === 'object') {\n\t\t\tthis.scheme = schemeOrData.scheme || _empty;\n\t\t\tthis.authority = schemeOrData.authority || _empty;\n\t\t\tthis.path = schemeOrData.path || _empty;\n\t\t\tthis.query = schemeOrData.query || _empty;\n\t\t\tthis.fragment = schemeOrData.fragment || _empty;\n\t\t\t// no validation because it's this URI\n\t\t\t// that creates uri components.\n\t\t\t// _validateUri(this);\n\t\t} else {\n\t\t\tthis.scheme = _schemeFix(schemeOrData, _strict);\n\t\t\tthis.authority = authority || _empty;\n\t\t\tthis.path = _referenceResolution(this.scheme, path || _empty);\n\t\t\tthis.query = query || _empty;\n\t\t\tthis.fragment = fragment || _empty;\n\n\t\t\t_validateUri(this, _strict);\n\t\t}\n\t}\n\n\t// ---- filesystem path -----------------------\n\n\t/**\n\t * Returns a string representing the corresponding file system path of this URI.\n\t * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n\t * platform specific path separator.\n\t *\n\t * * Will *not* validate the path for invalid characters and semantics.\n\t * * Will *not* look at the scheme of this URI.\n\t * * The result shall *not* be used for display purposes but for accessing a file on disk.\n\t *\n\t *\n\t * The *difference* to `URI#path` is the use of the platform specific separator and the handling\n\t * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n\t *\n\t * ```ts\n\t\tconst u = URI.parse('file://server/c$/folder/file.txt')\n\t\tu.authority === 'server'\n\t\tu.path === '/shares/c$/file.txt'\n\t\tu.fsPath === '\\\\server\\c$\\folder\\file.txt'\n\t```\n\t *\n\t * Using `URI#path` to read a file (using fs-apis) would not be enough because parts of the path,\n\t * namely the server name, would be missing. Therefore `URI#fsPath` exists - it's sugar to ease working\n\t * with URIs that represent files on disk (`file` scheme).\n\t */\n\tget fsPath(): string {\n\t\t// if (this.scheme !== 'file') {\n\t\t// \tconsole.warn(`[UriError] calling fsPath with scheme ${this.scheme}`);\n\t\t// }\n\t\treturn uriToFsPath(this, false);\n\t}\n\n\t// ---- modify to new -------------------------\n\n\twith(change: { scheme?: string; authority?: string | null; path?: string | null; query?: string | null; fragment?: string | null }): URI {\n\n\t\tif (!change) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet { scheme, authority, path, query, fragment } = change;\n\t\tif (scheme === undefined) {\n\t\t\tscheme = this.scheme;\n\t\t} else if (scheme === null) {\n\t\t\tscheme = _empty;\n\t\t}\n\t\tif (authority === undefined) {\n\t\t\tauthority = this.authority;\n\t\t} else if (authority === null) {\n\t\t\tauthority = _empty;\n\t\t}\n\t\tif (path === undefined) {\n\t\t\tpath = this.path;\n\t\t} else if (path === null) {\n\t\t\tpath = _empty;\n\t\t}\n\t\tif (query === undefined) {\n\t\t\tquery = this.query;\n\t\t} else if (query === null) {\n\t\t\tquery = _empty;\n\t\t}\n\t\tif (fragment === undefined) {\n\t\t\tfragment = this.fragment;\n\t\t} else if (fragment === null) {\n\t\t\tfragment = _empty;\n\t\t}\n\n\t\tif (scheme === this.scheme\n\t\t\t&& authority === this.authority\n\t\t\t&& path === this.path\n\t\t\t&& query === this.query\n\t\t\t&& fragment === this.fragment) {\n\n\t\t\treturn this;\n\t\t}\n\n\t\treturn new Uri(scheme, authority, path, query, fragment);\n\t}\n\n\t// ---- parse & validate ------------------------\n\n\t/**\n\t * Creates a new URI from a string, e.g. `http://www.example.com/some/path`,\n\t * `file:///usr/home`, or `scheme:with/path`.\n\t *\n\t * @param value A string which represents an URI (see `URI#toString`).\n\t */\n\tstatic parse(value: string, _strict: boolean = false): URI {\n\t\tconst match = _regexp.exec(value);\n\t\tif (!match) {\n\t\t\treturn new Uri(_empty, _empty, _empty, _empty, _empty);\n\t\t}\n\t\treturn new Uri(\n\t\t\tmatch[2] || _empty,\n\t\t\tpercentDecode(match[4] || _empty),\n\t\t\tpercentDecode(match[5] || _empty),\n\t\t\tpercentDecode(match[7] || _empty),\n\t\t\tpercentDecode(match[9] || _empty),\n\t\t\t_strict\n\t\t);\n\t}\n\n\t/**\n\t * Creates a new URI from a file system path, e.g. `c:\\my\\files`,\n\t * `/usr/home`, or `\\\\server\\share\\some\\path`.\n\t *\n\t * The *difference* between `URI#parse` and `URI#file` is that the latter treats the argument\n\t * as path, not as stringified-uri. E.g. `URI.file(path)` is **not the same as**\n\t * `URI.parse('file://' + path)` because the path might contain characters that are\n\t * interpreted (# and ?). See the following sample:\n\t * ```ts\n\tconst good = URI.file('/coding/c#/project1');\n\tgood.scheme === 'file';\n\tgood.path === '/coding/c#/project1';\n\tgood.fragment === '';\n\tconst bad = URI.parse('file://' + '/coding/c#/project1');\n\tbad.scheme === 'file';\n\tbad.path === '/coding/c'; // path is now broken\n\tbad.fragment === '/project1';\n\t```\n\t *\n\t * @param path A file system path (see `URI#fsPath`)\n\t */\n\tstatic file(path: string): URI {\n\n\t\tlet authority = _empty;\n\n\t\t// normalize to fwd-slashes on windows,\n\t\t// on other systems bwd-slashes are valid\n\t\t// filename character, eg /f\\oo/ba\\r.txt\n\t\tif (isWindows) {\n\t\t\tpath = path.replace(/\\\\/g, _slash);\n\t\t}\n\n\t\t// check for authority as used in UNC shares\n\t\t// or use the path as given\n\t\tif (path[0] === _slash && path[1] === _slash) {\n\t\t\tconst idx = path.indexOf(_slash, 2);\n\t\t\tif (idx === -1) {\n\t\t\t\tauthority = path.substring(2);\n\t\t\t\tpath = _slash;\n\t\t\t} else {\n\t\t\t\tauthority = path.substring(2, idx);\n\t\t\t\tpath = path.substring(idx) || _slash;\n\t\t\t}\n\t\t}\n\n\t\treturn new Uri('file', authority, path, _empty, _empty);\n\t}\n\n\tstatic from(components: { scheme: string; authority?: string; path?: string; query?: string; fragment?: string }): URI {\n\t\tconst result = new Uri(\n\t\t\tcomponents.scheme,\n\t\t\tcomponents.authority,\n\t\t\tcomponents.path,\n\t\t\tcomponents.query,\n\t\t\tcomponents.fragment,\n\t\t);\n\t\t_validateUri(result, true);\n\t\treturn result;\n\t}\n\n\t// ---- printing/externalize ---------------------------\n\n\t/**\n\t * Creates a string representation for this URI. It's guaranteed that calling\n\t * `URI.parse` with the result of this function creates an URI which is equal\n\t * to this URI.\n\t *\n\t * * The result shall *not* be used for display purposes but for externalization or transport.\n\t * * The result will be encoded using the percentage encoding and encoding happens mostly\n\t * ignore the scheme-specific encoding rules.\n\t *\n\t * @param skipEncoding Do not encode the result, default is `false`\n\t */\n\ttoString(skipEncoding: boolean = false): string {\n\t\treturn _asFormatted(this, skipEncoding);\n\t}\n\n\ttoJSON(): UriComponents {\n\t\treturn this;\n\t}\n\n\tstatic revive(data: UriComponents | URI): URI;\n\tstatic revive(data: UriComponents | URI | undefined): URI | undefined;\n\tstatic revive(data: UriComponents | URI | null): URI | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null;\n\tstatic revive(data: UriComponents | URI | undefined | null): URI | undefined | null {\n\t\tif (!data) {\n\t\t\treturn <any>data;\n\t\t} else if (data instanceof URI) {\n\t\t\treturn data;\n\t\t} else {\n\t\t\tconst result = new Uri(data);\n\t\t\tresult._formatted = (<UriState>data).external;\n\t\t\tresult._fsPath = (<UriState>data)._sep === _pathSepMarker ? (<UriState>data).fsPath : null;\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport interface UriComponents {\n\tscheme: string;\n\tauthority: string;\n\tpath: string;\n\tquery: string;\n\tfragment: string;\n}\n\ninterface UriState extends UriComponents {\n\t$mid: number;\n\texternal: string;\n\tfsPath: string;\n\t_sep: 1 | undefined;\n}\n\nconst _pathSepMarker = isWindows ? 1 : undefined;\n\n// This class exists so that URI is compatible with vscode.Uri (API).\nclass Uri extends URI {\n\n\t_formatted: string | null = null;\n\t_fsPath: string | null = null;\n\n\toverride get fsPath(): string {\n\t\tif (!this._fsPath) {\n\t\t\tthis._fsPath = uriToFsPath(this, false);\n\t\t}\n\t\treturn this._fsPath;\n\t}\n\n\toverride toString(skipEncoding: boolean = false): string {\n\t\tif (!skipEncoding) {\n\t\t\tif (!this._formatted) {\n\t\t\t\tthis._formatted = _asFormatted(this, false);\n\t\t\t}\n\t\t\treturn this._formatted;\n\t\t} else {\n\t\t\t// we don't cache that\n\t\t\treturn _asFormatted(this, true);\n\t\t}\n\t}\n\n\toverride toJSON(): UriComponents {\n\t\tconst res = <UriState>{\n\t\t\t$mid: 1\n\t\t};\n\t\t// cached state\n\t\tif (this._fsPath) {\n\t\t\tres.fsPath = this._fsPath;\n\t\t\tres._sep = _pathSepMarker;\n\t\t}\n\t\tif (this._formatted) {\n\t\t\tres.external = this._formatted;\n\t\t}\n\t\t// uri components\n\t\tif (this.path) {\n\t\t\tres.path = this.path;\n\t\t}\n\t\tif (this.scheme) {\n\t\t\tres.scheme = this.scheme;\n\t\t}\n\t\tif (this.authority) {\n\t\t\tres.authority = this.authority;\n\t\t}\n\t\tif (this.query) {\n\t\t\tres.query = this.query;\n\t\t}\n\t\tif (this.fragment) {\n\t\t\tres.fragment = this.fragment;\n\t\t}\n\t\treturn res;\n\t}\n}\n\n// reserved characters: https://tools.ietf.org/html/rfc3986#section-2.2\nconst encodeTable: { [ch: number]: string } = {\n\t[CharCode.Colon]: '%3A', // gen-delims\n\t[CharCode.Slash]: '%2F',\n\t[CharCode.QuestionMark]: '%3F',\n\t[CharCode.Hash]: '%23',\n\t[CharCode.OpenSquareBracket]: '%5B',\n\t[CharCode.CloseSquareBracket]: '%5D',\n\t[CharCode.AtSign]: '%40',\n\n\t[CharCode.ExclamationMark]: '%21', // sub-delims\n\t[CharCode.DollarSign]: '%24',\n\t[CharCode.Ampersand]: '%26',\n\t[CharCode.SingleQuote]: '%27',\n\t[CharCode.OpenParen]: '%28',\n\t[CharCode.CloseParen]: '%29',\n\t[CharCode.Asterisk]: '%2A',\n\t[CharCode.Plus]: '%2B',\n\t[CharCode.Comma]: '%2C',\n\t[CharCode.Semicolon]: '%3B',\n\t[CharCode.Equals]: '%3D',\n\n\t[CharCode.Space]: '%20',\n};\n\nfunction encodeURIComponentFast(uriComponent: string, isPath: boolean, isAuthority: boolean): string {\n\tlet res: string | undefined = undefined;\n\tlet nativeEncodePos = -1;\n\n\tfor (let pos = 0; pos < uriComponent.length; pos++) {\n\t\tconst code = uriComponent.charCodeAt(pos);\n\n\t\t// unreserved characters: https://tools.ietf.org/html/rfc3986#section-2.3\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t\t|| code === CharCode.Dash\n\t\t\t|| code === CharCode.Period\n\t\t\t|| code === CharCode.Underline\n\t\t\t|| code === CharCode.Tilde\n\t\t\t|| (isPath && code === CharCode.Slash)\n\t\t\t|| (isAuthority && code === CharCode.OpenSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.CloseSquareBracket)\n\t\t\t|| (isAuthority && code === CharCode.Colon)\n\t\t) {\n\t\t\t// check if we are delaying native encode\n\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\tnativeEncodePos = -1;\n\t\t\t}\n\t\t\t// check if we write into a new string (by default we try to return the param)\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += uriComponent.charAt(pos);\n\t\t\t}\n\n\t\t} else {\n\t\t\t// encoding needed, we need to allocate a new string\n\t\t\tif (res === undefined) {\n\t\t\t\tres = uriComponent.substr(0, pos);\n\t\t\t}\n\n\t\t\t// check with default table first\n\t\t\tconst escaped = encodeTable[code];\n\t\t\tif (escaped !== undefined) {\n\n\t\t\t\t// check if we are delaying native encode\n\t\t\t\tif (nativeEncodePos !== -1) {\n\t\t\t\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos, pos));\n\t\t\t\t\tnativeEncodePos = -1;\n\t\t\t\t}\n\n\t\t\t\t// append escaped variant to result\n\t\t\t\tres += escaped;\n\n\t\t\t} else if (nativeEncodePos === -1) {\n\t\t\t\t// use native encode only when needed\n\t\t\t\tnativeEncodePos = pos;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (nativeEncodePos !== -1) {\n\t\tres += encodeURIComponent(uriComponent.substring(nativeEncodePos));\n\t}\n\n\treturn res !== undefined ? res : uriComponent;\n}\n\nfunction encodeURIComponentMinimal(path: string): string {\n\tlet res: string | undefined = undefined;\n\tfor (let pos = 0; pos < path.length; pos++) {\n\t\tconst code = path.charCodeAt(pos);\n\t\tif (code === CharCode.Hash || code === CharCode.QuestionMark) {\n\t\t\tif (res === undefined) {\n\t\t\t\tres = path.substr(0, pos);\n\t\t\t}\n\t\t\tres += encodeTable[code];\n\t\t} else {\n\t\t\tif (res !== undefined) {\n\t\t\t\tres += path[pos];\n\t\t\t}\n\t\t}\n\t}\n\treturn res !== undefined ? res : path;\n}\n\n/**\n * Compute `fsPath` for the given uri\n */\nexport function uriToFsPath(uri: URI, keepDriveLetterCasing: boolean): string {\n\n\tlet value: string;\n\tif (uri.authority && uri.path.length > 1 && uri.scheme === 'file') {\n\t\t// unc path: file://shares/c$/far/boo\n\t\tvalue = `//${uri.authority}${uri.path}`;\n\t} else if (\n\t\turi.path.charCodeAt(0) === CharCode.Slash\n\t\t&& (uri.path.charCodeAt(1) >= CharCode.A && uri.path.charCodeAt(1) <= CharCode.Z || uri.path.charCodeAt(1) >= CharCode.a && uri.path.charCodeAt(1) <= CharCode.z)\n\t\t&& uri.path.charCodeAt(2) === CharCode.Colon\n\t) {\n\t\tif (!keepDriveLetterCasing) {\n\t\t\t// windows drive letter: file:///c:/far/boo\n\t\t\tvalue = uri.path[1].toLowerCase() + uri.path.substr(2);\n\t\t} else {\n\t\t\tvalue = uri.path.substr(1);\n\t\t}\n\t} else {\n\t\t// other path\n\t\tvalue = uri.path;\n\t}\n\tif (isWindows) {\n\t\tvalue = value.replace(/\\//g, '\\\\');\n\t}\n\treturn value;\n}\n\n/**\n * Create the external version of a uri\n */\nfunction _asFormatted(uri: URI, skipEncoding: boolean): string {\n\n\tconst encoder = !skipEncoding\n\t\t? encodeURIComponentFast\n\t\t: encodeURIComponentMinimal;\n\n\tlet res = '';\n\tlet { scheme, authority, path, query, fragment } = uri;\n\tif (scheme) {\n\t\tres += scheme;\n\t\tres += ':';\n\t}\n\tif (authority || scheme === 'file') {\n\t\tres += _slash;\n\t\tres += _slash;\n\t}\n\tif (authority) {\n\t\tlet idx = authority.indexOf('@');\n\t\tif (idx !== -1) {\n\t\t\t// <user>@<auth>\n\t\t\tconst userinfo = authority.substr(0, idx);\n\t\t\tauthority = authority.substr(idx + 1);\n\t\t\tidx = userinfo.lastIndexOf(':');\n\t\t\tif (idx === -1) {\n\t\t\t\tres += encoder(userinfo, false, false);\n\t\t\t} else {\n\t\t\t\t// <user>:<pass>@<auth>\n\t\t\t\tres += encoder(userinfo.substr(0, idx), false, false);\n\t\t\t\tres += ':';\n\t\t\t\tres += encoder(userinfo.substr(idx + 1), false, true);\n\t\t\t}\n\t\t\tres += '@';\n\t\t}\n\t\tauthority = authority.toLowerCase();\n\t\tidx = authority.lastIndexOf(':');\n\t\tif (idx === -1) {\n\t\t\tres += encoder(authority, false, true);\n\t\t} else {\n\t\t\t// <auth>:<port>\n\t\t\tres += encoder(authority.substr(0, idx), false, true);\n\t\t\tres += authority.substr(idx);\n\t\t}\n\t}\n\tif (path) {\n\t\t// lower-case windows drive letters in /C:/fff or C:/fff\n\t\tif (path.length >= 3 && path.charCodeAt(0) === CharCode.Slash && path.charCodeAt(2) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(1);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `/${String.fromCharCode(code + 32)}:${path.substr(3)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t} else if (path.length >= 2 && path.charCodeAt(1) === CharCode.Colon) {\n\t\t\tconst code = path.charCodeAt(0);\n\t\t\tif (code >= CharCode.A && code <= CharCode.Z) {\n\t\t\t\tpath = `${String.fromCharCode(code + 32)}:${path.substr(2)}`; // \"/c:\".length === 3\n\t\t\t}\n\t\t}\n\t\t// encode the rest of the path\n\t\tres += encoder(path, true, false);\n\t}\n\tif (query) {\n\t\tres += '?';\n\t\tres += encoder(query, false, false);\n\t}\n\tif (fragment) {\n\t\tres += '#';\n\t\tres += !skipEncoding ? encodeURIComponentFast(fragment, false, false) : fragment;\n\t}\n\treturn res;\n}\n\n// --- decode\n\nfunction decodeURIComponentGraceful(str: string): string {\n\ttry {\n\t\treturn decodeURIComponent(str);\n\t} catch {\n\t\tif (str.length > 3) {\n\t\t\treturn str.substr(0, 3) + decodeURIComponentGraceful(str.substr(3));\n\t\t} else {\n\t\t\treturn str;\n\t\t}\n\t}\n}\n\nconst _rEncodedAsHex = /(%[0-9A-Za-z][0-9A-Za-z])+/g;\n\nfunction percentDecode(str: string): string {\n\tif (!str.match(_rEncodedAsHex)) {\n\t\treturn str;\n\t}\n\treturn str.replace(_rEncodedAsHex, (match) => decodeURIComponentGraceful(match));\n}\n\n/**\n * Mapped-type that replaces all occurrences of URI with UriComponents\n */\nexport type UriDto<T> = { [K in keyof T]: T[K] extends URI\n\t? UriComponents\n\t: UriDto<T[K]> };\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nimport { CharCode } from './charCode';\nimport { URI } from './uri';\nimport * as nodePath from 'path';\n\nconst posixPath = nodePath.posix || nodePath;\nconst slash = '/';\n\nexport namespace Utils {\n\n    /**\n     * Joins one or more input paths to the path of URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved.\n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are preserved.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to be joined with the path of URI.\n     * @returns A URI with the joined path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function joinPath(uri: URI, ...paths: string[]): URI {\n        return uri.with({ path: posixPath.join(uri.path, ...paths) });\n    }\n\n\n    /**\n     * Resolves one or more paths against the path of a URI. \n     * '/' is used as the directory separation character. \n     * \n     * The resolved path will be normalized. That means:\n     *  - all '..' and '.' segments are resolved. \n     *  - multiple, sequential occurences of '/' are replaced by a single instance of '/'.\n     *  - trailing separators are removed.\n     * \n     * @param uri The input URI.\n     * @param paths The paths to resolve against the path of URI.\n     * @returns A URI with the resolved path. All other properties of the URI (scheme, authority, query, fragments, ...) will be taken from the input URI.\n     */\n    export function resolvePath(uri: URI, ...paths: string[]): URI {\n        let path = uri.path; \n        let slashAdded = false;\n        if (path[0] !== slash) {\n            path = slash + path; // make the path abstract: for posixPath.resolve the first segments has to be absolute or cwd is used.\n            slashAdded = true;\n        }\n        let resolvedPath = posixPath.resolve(path, ...paths);\n        if (slashAdded && resolvedPath[0] === slash && !uri.authority) {\n            resolvedPath = resolvedPath.substring(1);\n        }\n        return uri.with({ path: resolvedPath });\n    }\n\n    /**\n     * Returns a URI where the path is the directory name of the input uri, similar to the Unix dirname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The orignal URI is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The last segment of the URIs path.\n     */\n    export function dirname(uri: URI): URI {\n        if (uri.path.length === 0 || uri.path === slash) {\n            return uri;\n        }\n        let path = posixPath.dirname(uri.path);\n        if (path.length === 1 && path.charCodeAt(0) === CharCode.Period) {\n            path = '';\n        }\n        return uri.with({ path });\n    }\n\n    /**\n     * Returns the last segment of the path of a URI, similar to the Unix basename command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The base name of the URIs path.\n     */\n    export function basename(uri: URI): string {\n        return posixPath.basename(uri.path);\n    }\n\n    /**\n     * Returns the extension name of the path of a URI, similar to the Unix extname command. \n     * In the path, '/' is recognized as the directory separation character. Trailing directory separators are ignored.\n     * The empty string is returned if the URIs path is empty or does not contain any path segments.\n     * \n     * @param uri The input URI.\n     * @return The extension name of the URIs path.\n     */\n    export function extname(uri: URI): string {\n        return posixPath.extname(uri.path);\n    }\n}","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI, Utils } from 'vscode-uri';\n\nexport { URI };\n\nexport namespace UriUtils {\n\n    export const basename = Utils.basename;\n    export const dirname = Utils.dirname;\n    export const extname = Utils.extname;\n    export const joinPath = Utils.joinPath;\n    export const resolvePath = Utils.resolvePath;\n\n    export function equals(a?: URI | string, b?: URI | string): boolean {\n        return a?.toString() === b?.toString();\n    }\n\n    export function relative(from: URI | string, to: URI | string): string {\n        const fromPath = typeof from === 'string' ? from : from.path;\n        const toPath = typeof to === 'string' ? to : to.path;\n        const fromParts = fromPath.split('/').filter(e => e.length > 0);\n        const toParts = toPath.split('/').filter(e => e.length > 0);\n        let i = 0;\n        for (; i < fromParts.length; i++) {\n            if (fromParts[i] !== toParts[i]) {\n                break;\n            }\n        }\n        const backPart = '../'.repeat(fromParts.length - i);\n        const toPart = toParts.slice(i).join('/');\n        return backPart + toPart;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/**\n * Re-export 'TextDocument' from 'vscode-languageserver-textdocument' for convenience,\n *  including both type _and_ symbol (namespace), as we here and there also refer to the symbol,\n *  the overhead is very small, just a few kilobytes.\n * Everything else of that package (at the time contributing) is also defined\n *  in 'vscode-languageserver-protocol' or 'vscode-languageserver-types'.\n */\nexport { TextDocument } from 'vscode-languageserver-textdocument';\n\nimport type { Diagnostic, Range } from 'vscode-languageserver-types';\nimport type { FileSystemProvider } from './file-system-provider.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, Mutable, Reference } from '../syntax-tree.js';\nimport type { MultiMap } from '../utils/collections.js';\nimport type { Stream } from '../utils/stream.js';\nimport { TextDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { stream } from '../utils/stream.js';\nimport { URI } from '../utils/uri-utils.js';\n\n/**\n * A Langium document holds the parse result (AST and CST) and any additional state that is derived\n * from the AST, e.g. the result of scope precomputation.\n */\nexport interface LangiumDocument<T extends AstNode = AstNode> {\n    /** The Uniform Resource Identifier (URI) of the document */\n    readonly uri: URI;\n    /** The text document used to convert between offsets and positions */\n    readonly textDocument: TextDocument;\n    /** The current state of the document */\n    state: DocumentState;\n    /** The parse result holds the Abstract Syntax Tree (AST) and potentially also parser / lexer errors */\n    parseResult: ParseResult<T>;\n    /** Result of the scope precomputation phase */\n    precomputedScopes?: PrecomputedScopes;\n    /** An array of all cross-references found in the AST while linking */\n    references: Reference[];\n    /** Result of the validation phase */\n    diagnostics?: Diagnostic[]\n}\n\n/**\n * A document is subject to several phases that are run in predefined order. Any state value implies that\n * smaller state values are finished as well.\n */\nexport enum DocumentState {\n    /**\n     * The text content has changed and needs to be parsed again. The AST held by this outdated\n     * document instance is no longer valid.\n     */\n    Changed = 0,\n    /**\n     * An AST has been created from the text content. The document structure can be traversed,\n     * but cross-references cannot be resolved yet. If necessary, the structure can be manipulated\n     * at this stage as a preprocessing step.\n     */\n    Parsed = 1,\n    /**\n     * The `IndexManager` service has processed AST nodes of this document. This means the\n     * exported symbols are available in the global scope and can be resolved from other documents.\n     */\n    IndexedContent = 2,\n    /**\n     * The `ScopeComputation` service has processed this document. This means the local symbols\n     * are stored in a MultiMap so they can be looked up by the `ScopeProvider` service.\n     * Once a document has reached this state, you may follow every reference - it will lazily\n     * resolve its `ref` property and yield either the target AST node or `undefined` in case\n     * the target is not in scope.\n     */\n    ComputedScopes = 3,\n    /**\n     * The `Linker` service has processed this document. All outgoing references have been\n     * resolved or marked as erroneous.\n     */\n    Linked = 4,\n    /**\n     * The `IndexManager` service has processed AST node references of this document. This is\n     * necessary to determine which documents are affected by a change in one of the workspace\n     * documents.\n     */\n    IndexedReferences = 5,\n    /**\n     * The `DocumentValidator` service has processed this document. The language server listens\n     * to the results of this phase and sends diagnostics to the client.\n     */\n    Validated = 6\n}\n\n/**\n * Result of the scope precomputation phase (`ScopeComputation` service).\n * It maps every AST node to the set of symbols that are visible in the subtree of that node.\n */\nexport type PrecomputedScopes = MultiMap<AstNode, AstNodeDescription>\n\nexport interface DocumentSegment {\n    readonly range: Range\n    readonly offset: number\n    readonly length: number\n    readonly end: number\n}\n\n/**\n * Surrogate definition of the `TextDocuments` interface from the `vscode-languageserver` package.\n * No implementation object is expected to be offered by `LangiumCoreServices`, but only by `LangiumLSPServices`.\n */\nexport type TextDocumentProvider = {\n    get(uri: string): TextDocument | undefined\n}\n\n/**\n * Shared service for creating `LangiumDocument` instances.\n *\n * Register a custom implementation if special (additional) behavior is required for your language(s).\n * Note: If you specialize {@link fromString} or {@link fromTextDocument} you probably might want to\n * specialize {@link update}, too!\n */\nexport interface LangiumDocumentFactory {\n    /**\n     * Create a Langium document from a `TextDocument` (usually associated with a file).\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from a `TextDocument` asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from an in-memory string.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    /**\n     * Create a Langium document from an in-memory string asynchronously. This action can be cancelled if a cancellable parser implementation has been provided.\n     */\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Create an Langium document from a model that has been constructed in memory.\n     */\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T>;\n\n    /**\n     * Create an Langium document from a specified `URI`. The factory will use the `FileSystemAccess` service to read the file.\n     */\n    fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument<T>>;\n\n    /**\n     * Update the given document after changes in the corresponding textual representation.\n     * Method is called by the document builder after it has been requested to build an existing\n     * document and the document's state is {@link DocumentState.Changed}.\n     * The text parsing is expected to be done the same way as in {@link fromTextDocument}\n     * and {@link fromString}.\n     */\n    update<T extends AstNode = AstNode>(document: LangiumDocument<T>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>\n}\n\nexport class DefaultLangiumDocumentFactory implements LangiumDocumentFactory {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly textDocuments?: TextDocumentProvider;\n    protected readonly fileSystemProvider: FileSystemProvider;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.textDocuments = services.workspace.TextDocuments;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n    }\n\n    async fromUri<T extends AstNode = AstNode>(uri: URI, cancellationToken = CancellationToken.None): Promise<LangiumDocument<T>> {\n        const content = await this.fileSystemProvider.readFile(uri);\n        return this.createAsync<T>(uri, content, cancellationToken);\n    }\n\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI): LangiumDocument<T>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri: URI | undefined, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromTextDocument<T extends AstNode = AstNode>(textDocument: TextDocument, uri?: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        uri = uri ?? URI.parse(textDocument.uri);\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, textDocument, cancellationToken);\n        } else {\n            return this.create<T>(uri, textDocument);\n        }\n    }\n\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI): LangiumDocument<T>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken: CancellationToken): Promise<LangiumDocument<T>>;\n    fromString<T extends AstNode = AstNode>(text: string, uri: URI, cancellationToken?: CancellationToken): LangiumDocument<T> | Promise<LangiumDocument<T>> {\n        if (cancellationToken) {\n            return this.createAsync<T>(uri, text, cancellationToken);\n        } else {\n            return this.create<T>(uri, text);\n        }\n    }\n\n    fromModel<T extends AstNode = AstNode>(model: T, uri: URI): LangiumDocument<T> {\n        return this.create<T>(uri, { $model: model });\n    }\n\n    protected create<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument | { $model: T }): LangiumDocument<T> {\n        if (typeof content === 'string') {\n            const parseResult = this.parse<T>(uri, content);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n\n        } else if ('$model' in content) {\n            const parseResult = { value: content.$model, parserErrors: [], lexerErrors: [] };\n            return this.createLangiumDocument<T>(parseResult, uri);\n\n        } else {\n            const parseResult = this.parse<T>(uri, content.getText());\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    protected async createAsync<T extends AstNode = AstNode>(uri: URI, content: string | TextDocument, cancelToken: CancellationToken): Promise<LangiumDocument<T>> {\n        if (typeof content === 'string') {\n            const parseResult = await this.parseAsync<T>(uri, content, cancelToken);\n            return this.createLangiumDocument<T>(parseResult, uri, undefined, content);\n        } else {\n            const parseResult = await this.parseAsync<T>(uri, content.getText(), cancelToken);\n            return this.createLangiumDocument(parseResult, uri, content);\n        }\n    }\n\n    /**\n     * Create a LangiumDocument from a given parse result.\n     *\n     * A TextDocument is created on demand if it is not provided as argument here. Usually this\n     * should not be necessary because the main purpose of the TextDocument is to convert between\n     * text ranges and offsets, which is done solely in LSP request handling.\n     *\n     * With the introduction of {@link update} below this method is supposed to be mainly called\n     * during workspace initialization and on addition/recognition of new files, while changes in\n     * existing documents are processed via {@link update}.\n     */\n    protected createLangiumDocument<T extends AstNode = AstNode>(parseResult: ParseResult<T>, uri: URI, textDocument?: TextDocument, text?: string): LangiumDocument<T> {\n        let document: LangiumDocument<T>;\n        if (textDocument) {\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                textDocument\n            };\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(uri, text);\n            document = {\n                parseResult,\n                uri,\n                state: DocumentState.Parsed,\n                references: [],\n                get textDocument() {\n                    return textDocumentGetter();\n                }\n            };\n        }\n        (parseResult.value as Mutable<AstNode>).$document = document;\n        return document;\n    }\n\n    async update<T extends AstNode = AstNode>(document: Mutable<LangiumDocument<T>>, cancellationToken: CancellationToken): Promise<LangiumDocument<T>> {\n        // The CST full text property contains the original text that was used to create the AST.\n        const oldText = document.parseResult.value.$cstNode?.root.fullText;\n        const textDocument = this.textDocuments?.get(document.uri.toString());\n        const text = textDocument ? textDocument.getText() : await this.fileSystemProvider.readFile(document.uri);\n\n        if (textDocument) {\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    value: textDocument\n                }\n            );\n        } else {\n            const textDocumentGetter = this.createTextDocumentGetter(document.uri, text);\n            Object.defineProperty(\n                document,\n                'textDocument',\n                {\n                    get: textDocumentGetter\n                }\n            );\n        }\n\n        // Some of these documents can be pretty large, so parsing them again can be quite expensive.\n        // Therefore, we only parse if the text has actually changed.\n        if (oldText !== text) {\n            document.parseResult = await this.parseAsync(document.uri, text, cancellationToken);\n            (document.parseResult.value as Mutable<AstNode>).$document = document;\n        }\n        document.state = DocumentState.Parsed;\n        return document;\n    }\n\n    protected parse<T extends AstNode>(uri: URI, text: string): ParseResult<T> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.LangiumParser.parse<T>(text);\n    }\n\n    protected parseAsync<T extends AstNode>(uri: URI, text: string, cancellationToken: CancellationToken): Promise<ParseResult<T>> {\n        const services = this.serviceRegistry.getServices(uri);\n        return services.parser.AsyncParser.parse<T>(text, cancellationToken);\n    }\n\n    protected createTextDocumentGetter(uri: URI, text?: string): () => TextDocument {\n        const serviceRegistry = this.serviceRegistry;\n        let textDoc: TextDocument | undefined = undefined;\n        return () => {\n            return textDoc ??= TextDocument.create(\n                uri.toString(), serviceRegistry.getServices(uri).LanguageMetaData.languageId, 0, text ?? ''\n            );\n        };\n    }\n}\n\n/**\n * Shared service for managing Langium documents.\n */\nexport interface LangiumDocuments {\n\n    /**\n     * A stream of all documents managed under this service.\n     */\n    readonly all: Stream<LangiumDocument>\n\n    /**\n     * Manage a new document under this service.\n     * @throws an error if a document with the same URI is already present.\n     */\n    addDocument(document: LangiumDocument): void;\n\n    /**\n     * Retrieve the document with the given URI, if present. Otherwise returns `undefined`.\n     */\n    getDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Retrieve the document with the given URI. If not present, a new one will be created using the file system access.\n     * The new document will be added to the list of documents managed under this service.\n     */\n    getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Creates a new document with the given URI and text content.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string): LangiumDocument;\n\n    /**\n     * Creates a new document with the given URI and text content asynchronously.\n     * The process can be interrupted with a cancellation token.\n     * The new document is automatically added to this service and can be retrieved using {@link getDocument}.\n     *\n     * @throws an error if a document with the same URI is already present.\n     */\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n\n    /**\n     * Returns `true` if a document with the given URI is managed under this service.\n     */\n    hasDocument(uri: URI): boolean;\n\n    /**\n     * Flag the document with the given URI as `Changed`, if present, meaning that its content\n     * is no longer valid. The content (parseResult) stays untouched, while internal data may\n     * be dropped to reduce memory footprint.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    invalidateDocument(uri: URI): LangiumDocument | undefined;\n\n    /**\n     * Remove the document with the given URI, if present, and mark it as `Changed`, meaning\n     * that its content is no longer valid. The next call to `getOrCreateDocument` with the same\n     * URI will create a new document instance.\n     *\n     * @returns the affected {@link LangiumDocument} if existing for convenience\n     */\n    deleteDocument(uri: URI): LangiumDocument | undefined;\n}\n\nexport class DefaultLangiumDocuments implements LangiumDocuments {\n\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n\n    protected readonly documentMap: Map<string, LangiumDocument> = new Map();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n    }\n\n    get all(): Stream<LangiumDocument> {\n        return stream(this.documentMap.values());\n    }\n\n    addDocument(document: LangiumDocument): void {\n        const uriString = document.uri.toString();\n        if (this.documentMap.has(uriString)) {\n            throw new Error(`A document with the URI '${uriString}' is already present.`);\n        }\n        this.documentMap.set(uriString, document);\n    }\n\n    getDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        return this.documentMap.get(uriString);\n    }\n\n    async getOrCreateDocument(uri: URI, cancellationToken?: CancellationToken): Promise<LangiumDocument> {\n        let document = this.getDocument(uri);\n        if (document) {\n            return document;\n        }\n        document = await this.langiumDocumentFactory.fromUri(uri, cancellationToken);\n        this.addDocument(document);\n        return document;\n    }\n\n    createDocument(uri: URI, text: string): LangiumDocument;\n    createDocument(uri: URI, text: string, cancellationToken: CancellationToken): Promise<LangiumDocument>;\n    createDocument(uri: URI, text: string, cancellationToken?: CancellationToken): LangiumDocument | Promise<LangiumDocument> {\n        if (cancellationToken) {\n            return this.langiumDocumentFactory.fromString(text, uri, cancellationToken).then(document => {\n                this.addDocument(document);\n                return document;\n            });\n        } else {\n            const document = this.langiumDocumentFactory.fromString(text, uri);\n            this.addDocument(document);\n            return document;\n        }\n    }\n\n    hasDocument(uri: URI): boolean {\n        return this.documentMap.has(uri.toString());\n    }\n\n    invalidateDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            langiumDoc.precomputedScopes = undefined;\n            langiumDoc.references = [];\n            langiumDoc.diagnostics = undefined;\n        }\n        return langiumDoc;\n    }\n\n    deleteDocument(uri: URI): LangiumDocument | undefined {\n        const uriString = uri.toString();\n        const langiumDoc = this.documentMap.get(uriString);\n        if (langiumDoc) {\n            langiumDoc.state = DocumentState.Changed;\n            this.documentMap.delete(uriString);\n        }\n        return langiumDoc;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, CstNode, LinkingError, Reference, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\nimport type { ScopeProvider } from './scope-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isAstNode, isAstNodeDescription, isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { DocumentState } from '../workspace/documents.js';\n\n/**\n * Language-specific service for resolving cross-references in the AST.\n */\nexport interface Linker {\n\n    /**\n     * Links all cross-references within the specified document. The default implementation loads only target\n     * elements from documents that are present in the `LangiumDocuments` service. The linked references are\n     * stored in the document's `references` property.\n     *\n     * @param document A LangiumDocument that shall be linked.\n     * @param cancelToken A token for cancelling the operation.\n     */\n    link(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Unlinks all references within the specified document and removes them from the list of `references`.\n     *\n     * @param document A LangiumDocument that shall be unlinked.\n     */\n    unlink(document: LangiumDocument): void;\n\n    /**\n     * Determines a candidate AST node description for linking the given reference.\n     *\n     * @param node The AST node containing the reference.\n     * @param refId The reference identifier used to build a scope.\n     * @param reference The actual reference to resolve.\n     */\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError;\n\n    /**\n     * Creates a cross reference node being aware of its containing AstNode, the corresponding CstNode,\n     * the cross reference text denoting the target AstNode being already extracted of the document text,\n     * as well as the unique cross reference identifier.\n     *\n     * Default behavior:\n     *  - The returned Reference's 'ref' property pointing to the target AstNode is populated lazily on its\n     *    first visit.\n     *  - If the target AstNode cannot be resolved on the first visit, an error indicator will be installed\n     *    and further resolution attempts will *not* be performed.\n     *\n     * @param node The containing AST node\n     * @param refNode The corresponding CST node\n     * @param refId The cross reference identifier like '<entityTypeName>:<propertyName>'\n     * @param refText The cross reference text denoting the target AstNode\n     * @returns the desired Reference node, whose behavior wrt. resolving the cross reference is implementation specific.\n     */\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference;\n\n}\n\ninterface DefaultReference extends Reference {\n    _ref?: AstNode | LinkingError;\n    _nodeDescription?: AstNodeDescription;\n}\n\nexport class DefaultLinker implements Linker {\n    protected readonly reflection: AstReflection;\n    protected readonly scopeProvider: ScopeProvider;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly langiumDocuments: () => LangiumDocuments;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.langiumDocuments = () => services.shared.workspace.LangiumDocuments;\n        this.scopeProvider = services.references.ScopeProvider;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async link(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        for (const node of streamAst(document.parseResult.value)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(node).forEach(ref => this.doLink(ref, document));\n        }\n    }\n\n    protected doLink(refInfo: ReferenceInfo, document: LangiumDocument): void {\n        const ref = refInfo.reference as DefaultReference;\n        // The reference may already have been resolved lazily by accessing its `ref` property.\n        if (ref._ref === undefined) {\n            try {\n                const description = this.getCandidate(refInfo);\n                if (isLinkingError(description)) {\n                    ref._ref = description;\n                } else {\n                    ref._nodeDescription = description;\n                    if (this.langiumDocuments().hasDocument(description.documentUri)) {\n                        // The target document is already loaded\n                        const linkedNode = this.loadAstNode(description);\n                        ref._ref = linkedNode ?? this.createLinkingError(refInfo, description);\n                    }\n                }\n            } catch (err) {\n                ref._ref = {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${ref.$refText}': ${err}`\n                };\n            }\n        }\n        // Add the reference to the document's array of references\n        document.references.push(ref);\n    }\n\n    unlink(document: LangiumDocument): void {\n        for (const ref of document.references) {\n            delete (ref as DefaultReference)._ref;\n            delete (ref as DefaultReference)._nodeDescription;\n        }\n        document.references = [];\n    }\n\n    getCandidate(refInfo: ReferenceInfo): AstNodeDescription | LinkingError {\n        const scope = this.scopeProvider.getScope(refInfo);\n        const description = scope.getElement(refInfo.reference.$refText);\n        return description ?? this.createLinkingError(refInfo);\n    }\n\n    buildReference(node: AstNode, property: string, refNode: CstNode | undefined, refText: string): Reference {\n        // See behavior description in doc of Linker, update that on changes in here.\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        const linker = this;\n        const reference: DefaultReference = {\n            $refNode: refNode,\n            $refText: refText,\n\n            get ref() {\n                if (isAstNode(this._ref)) {\n                    // Most frequent case: the target is already resolved.\n                    return this._ref;\n                } else if (isAstNodeDescription(this._nodeDescription)) {\n                    // A candidate has been found before, but it is not loaded yet.\n                    const linkedNode = linker.loadAstNode(this._nodeDescription);\n                    this._ref = linkedNode ??\n                        linker.createLinkingError({ reference, container: node, property }, this._nodeDescription);\n                } else if (this._ref === undefined) {\n                    // The reference has not been linked yet, so do that now.\n                    const refData = linker.getLinkedNode({ reference, container: node, property });\n                    if (refData.error && getDocument(node).state < DocumentState.ComputedScopes) {\n                        // Document scope is not ready, don't set `this._ref` so linker can retry later.\n                        return undefined;\n                    }\n                    this._ref = refData.node ?? refData.error;\n                    this._nodeDescription = refData.descr;\n                }\n                return isAstNode(this._ref) ? this._ref : undefined;\n            },\n            get $nodeDescription() {\n                return this._nodeDescription;\n            },\n            get error() {\n                return isLinkingError(this._ref) ? this._ref : undefined;\n            }\n        };\n        return reference;\n    }\n\n    protected getLinkedNode(refInfo: ReferenceInfo): { node?: AstNode, descr?: AstNodeDescription, error?: LinkingError } {\n        try {\n            const description = this.getCandidate(refInfo);\n            if (isLinkingError(description)) {\n                return { error: description };\n            }\n            const linkedNode = this.loadAstNode(description);\n            if (linkedNode) {\n                return { node: linkedNode, descr: description };\n            }\n            else {\n                return {\n                    descr: description,\n                    error:\n                        this.createLinkingError(refInfo, description)\n                };\n            }\n        } catch (err) {\n            return {\n                error: {\n                    ...refInfo,\n                    message: `An error occurred while resolving reference to '${refInfo.reference.$refText}': ${err}`\n                }\n            };\n        }\n    }\n\n    protected loadAstNode(nodeDescription: AstNodeDescription): AstNode | undefined {\n        if (nodeDescription.node) {\n            return nodeDescription.node;\n        }\n        const doc = this.langiumDocuments().getDocument(nodeDescription.documentUri);\n        if (!doc) {\n            return undefined;\n        }\n        return this.astNodeLocator.getAstNode(doc.parseResult.value, nodeDescription.path);\n    }\n\n    protected createLinkingError(refInfo: ReferenceInfo, targetDescription?: AstNodeDescription): LinkingError {\n        // Check whether the document is sufficiently processed by the DocumentBuilder. If not, this is a hint for a bug\n        // in the language implementation.\n        const document = getDocument(refInfo.container);\n        if (document.state < DocumentState.ComputedScopes) {\n            console.warn(`Attempted reference resolution before document reached ComputedScopes state (${document.uri}).`);\n        }\n        const referenceType = this.reflection.getReferenceType(refInfo);\n        return {\n            ...refInfo,\n            message: `Could not resolve reference to ${referenceType} named '${refInfo.reference.$refText}'.`,\n            targetDescription\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport { findNodeForProperty } from '../utils/grammar-utils.js';\n\nexport interface NamedAstNode extends AstNode {\n    name: string;\n}\n\nexport function isNamed(node: AstNode): node is NamedAstNode {\n    return typeof (node as NamedAstNode).name === 'string';\n}\n\n/**\n * Utility service for retrieving the `name` of an `AstNode` or the `CstNode` containing a `name`.\n */\nexport interface NameProvider {\n    /**\n     * Returns the `name` of a given AstNode.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getName(node: AstNode): string | undefined;\n    /**\n     * Returns the `CstNode` which contains the parsed value of the `name` assignment.\n     * @param node Specified `AstNode` whose name node shall be retrieved.\n     */\n    getNameNode(node: AstNode): CstNode | undefined;\n}\n\nexport class DefaultNameProvider implements NameProvider {\n    getName(node: AstNode): string | undefined {\n        if (isNamed(node)) {\n            return node.name;\n        }\n        return undefined;\n    }\n\n    getNameNode(node: AstNode): CstNode | undefined {\n        return findNodeForProperty(node.$cstNode, 'name');\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { ReferenceDescription } from '../workspace/ast-descriptions.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { findAssignment } from '../utils/grammar-utils.js';\nimport { isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isChildNode, toDocumentSegment } from '../utils/cst-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for finding references and declaration of a given `CstNode`.\n */\nexport interface References {\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined;\n\n    /**\n     * If the CstNode is a reference node the target CstNode will be returned.\n     * If the CstNode is a significant node of the CstNode this CstNode will be returned.\n     *\n     * @param sourceCstNode CstNode that points to a AstNode\n     */\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined;\n\n    /**\n     * Finds all references to the target node as references (local references) or reference descriptions.\n     *\n     * @param targetNode Specified target node whose references should be returned\n     */\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription>;\n}\n\nexport interface FindReferencesOptions {\n    /**\n     * @deprecated Since v1.2.0. Please use `documentUri` instead.\n     */\n    onlyLocal?: boolean;\n    /**\n     * When set, the `findReferences` method will only return references/declarations from the specified document.\n     */\n    documentUri?: URI;\n    /**\n     * Whether the returned list of references should include the declaration.\n     */\n    includeDeclaration?: boolean;\n}\n\nexport class DefaultReferences implements References {\n    protected readonly nameProvider: NameProvider;\n    protected readonly index: IndexManager;\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.index = services.shared.workspace.IndexManager;\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    findDeclaration(sourceCstNode: CstNode): AstNode | undefined {\n        if (sourceCstNode) {\n            const assignment = findAssignment(sourceCstNode);\n            const nodeElem = sourceCstNode.astNode;\n            if (assignment && nodeElem) {\n                const reference = (nodeElem as GenericAstNode)[assignment.feature];\n\n                if (isReference(reference)) {\n                    return reference.ref;\n                } else if (Array.isArray(reference)) {\n                    for (const ref of reference) {\n                        if (isReference(ref) && ref.$refNode\n                            && ref.$refNode.offset <= sourceCstNode.offset\n                            && ref.$refNode.end >= sourceCstNode.end) {\n                            return ref.ref;\n                        }\n                    }\n                }\n            }\n            if (nodeElem) {\n                const nameNode = this.nameProvider.getNameNode(nodeElem);\n                // Only return the targeted node in case the targeted cst node is the name node or part of it\n                if (nameNode && (nameNode === sourceCstNode || isChildNode(sourceCstNode, nameNode))) {\n                    return nodeElem;\n                }\n            }\n        }\n        return undefined;\n    }\n\n    findDeclarationNode(sourceCstNode: CstNode): CstNode | undefined {\n        const astNode = this.findDeclaration(sourceCstNode);\n        if (astNode?.$cstNode) {\n            const targetNode = this.nameProvider.getNameNode(astNode);\n            return targetNode ?? astNode.$cstNode;\n        }\n        return undefined;\n    }\n\n    findReferences(targetNode: AstNode, options: FindReferencesOptions): Stream<ReferenceDescription> {\n        const refs: ReferenceDescription[] = [];\n        if (options.includeDeclaration) {\n            const ref = this.getReferenceToSelf(targetNode);\n            if (ref) {\n                refs.push(ref);\n            }\n        }\n        let indexReferences = this.index.findAllReferences(targetNode, this.nodeLocator.getAstNodePath(targetNode));\n        if (options.documentUri) {\n            indexReferences = indexReferences.filter(ref => UriUtils.equals(ref.sourceUri, options.documentUri));\n        }\n        refs.push(...indexReferences);\n        return stream(refs);\n    }\n\n    protected getReferenceToSelf(targetNode: AstNode): ReferenceDescription | undefined {\n        const nameNode = this.nameProvider.getNameNode(targetNode);\n        if (nameNode) {\n            const doc = getDocument(targetNode);\n            const path = this.nodeLocator.getAstNodePath(targetNode);\n            return {\n                sourceUri: doc.uri,\n                sourcePath: path,\n                targetUri: doc.uri,\n                targetPath: path,\n                segment: toDocumentSegment(nameNode),\n                local: true\n            };\n        }\n        return undefined;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Stream } from './stream.js';\nimport { Reduction, stream } from './stream.js';\n\n/**\n * A multimap is a variation of a Map that has potentially multiple values for every key.\n */\nexport class MultiMap<K, V> {\n\n    private map = new Map<K, V[]>();\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.add(key, value);\n            }\n        }\n    }\n\n    /**\n     * The total number of values in the multimap.\n     */\n    get size(): number {\n        return Reduction.sum(stream(this.map.values()).map(a => a.length));\n    }\n\n    /**\n     * Clear all entries in the multimap.\n     */\n    clear(): void {\n        this.map.clear();\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method deletes the specific key / value pair from the multimap.\n     *  * Without a value, all values associated with the given key are deleted.\n     *\n     * @returns `true` if a value existed and has been removed, or `false` if the specified\n     *     key / value does not exist.\n     */\n    delete(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.delete(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                const index = values.indexOf(value);\n                if (index >= 0) {\n                    if (values.length === 1) {\n                        this.map.delete(key);\n                    } else {\n                        values.splice(index, 1);\n                    }\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Returns an array of all values associated with the given key. If no value exists,\n     * an empty array is returned.\n     *\n     * _Note:_ The returned array is assumed not to be modified. Use the `set` method to add a\n     * value and `delete` to remove a value from the multimap.\n     */\n    get(key: K): readonly V[] {\n        return this.map.get(key) ?? [];\n    }\n\n    /**\n     * Operates differently depending on whether a `value` is given:\n     *  * With a value, this method returns `true` if the specific key / value pair is present in the multimap.\n     *  * Without a value, this method returns `true` if the given key is present in the multimap.\n     */\n    has(key: K, value?: V): boolean {\n        if (value === undefined) {\n            return this.map.has(key);\n        } else {\n            const values = this.map.get(key);\n            if (values) {\n                return values.indexOf(value) >= 0;\n            }\n            return false;\n        }\n    }\n\n    /**\n     * Add the given key / value pair to the multimap.\n     */\n    add(key: K, value: V): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(value);\n        } else {\n            this.map.set(key, [value]);\n        }\n        return this;\n    }\n\n    /**\n     * Add the given set of key / value pairs to the multimap.\n     */\n    addAll(key: K, values: Iterable<V>): this {\n        if (this.map.has(key)) {\n            this.map.get(key)!.push(...values);\n        } else {\n            this.map.set(key, Array.from(values));\n        }\n        return this;\n    }\n\n    /**\n     * Invokes the given callback function for every key / value pair in the multimap.\n     */\n    forEach(callbackfn: (value: V, key: K, map: this) => void): void {\n        this.map.forEach((array, key) =>\n            array.forEach(value => callbackfn(value, key, this))\n        );\n    }\n\n    /**\n     * Returns an iterator of key, value pairs for every entry in the map.\n     */\n    [Symbol.iterator](): Iterator<[K, V]> {\n        return this.entries().iterator();\n    }\n\n    /**\n     * Returns a stream of key, value pairs for every entry in the map.\n     */\n    entries(): Stream<[K, V]> {\n        return stream(this.map.entries())\n            .flatMap(([key, array]) => array.map(value => [key, value] as [K, V]));\n    }\n\n    /**\n     * Returns a stream of keys in the map.\n     */\n    keys(): Stream<K> {\n        return stream(this.map.keys());\n    }\n\n    /**\n     * Returns a stream of values in the map.\n     */\n    values(): Stream<V> {\n        return stream(this.map.values()).flat();\n    }\n\n    /**\n     * Returns a stream of key, value set pairs for every key in the map.\n     */\n    entriesGroupedByKey(): Stream<[K, V[]]> {\n        return stream(this.map.entries());\n    }\n\n}\n\nexport class BiMap<K, V> {\n\n    private map = new Map<K, V>();\n    private inverse = new Map<V, K>();\n\n    get size(): number {\n        return this.map.size;\n    }\n\n    constructor()\n    constructor(elements: Array<[K, V]>)\n    constructor(elements?: Array<[K, V]>) {\n        if (elements) {\n            for (const [key, value] of elements) {\n                this.set(key, value);\n            }\n        }\n    }\n\n    clear(): void {\n        this.map.clear();\n        this.inverse.clear();\n    }\n\n    set(key: K, value: V): this {\n        this.map.set(key, value);\n        this.inverse.set(value, key);\n        return this;\n    }\n\n    get(key: K): V | undefined {\n        return this.map.get(key);\n    }\n\n    getKey(value: V): K | undefined {\n        return this.inverse.get(value);\n    }\n\n    delete(key: K): boolean {\n        const value = this.map.get(key);\n        if (value !== undefined) {\n            this.map.delete(key);\n            this.inverse.delete(value);\n            return true;\n        }\n        return false;\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { LangiumDocument, PrecomputedScopes } from '../workspace/documents.js';\nimport type { NameProvider } from './name-provider.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { streamAllContents, streamContents } from '../utils/ast-utils.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\n\n/**\n * Language-specific service for precomputing global and local scopes. The service methods are executed\n * as the first and second phase in the `DocumentBuilder`.\n */\nexport interface ScopeComputation {\n\n    /**\n     * Creates descriptions of all AST nodes that shall be exported into the _global_ scope from the given\n     * document. These descriptions are gathered by the `IndexManager` and stored in the global index so\n     * they can be referenced from other documents.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference resolution\n     * depends on the scope computation phase to be completed (`computeScope` method), which runs after the\n     * initial indexing where this method is used.\n     *\n     * @param document The document from which to gather exported AST nodes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeExports(document: LangiumDocument, cancelToken?: CancellationToken): Promise<AstNodeDescription[]>;\n\n    /**\n     * Precomputes the _local_ scopes for a document, which are necessary for the default way of\n     * resolving references to symbols in the same document. The result is a multimap assigning a\n     * set of AST node descriptions to every level of the AST. These data are used by the `ScopeProvider`\n     * service to determine which target nodes are visible in the context of a specific cross-reference.\n     *\n     * _Note:_ You should not resolve any cross-references in this service method. Cross-reference\n     * resolution depends on the scope computation phase to be completed.\n     *\n     * @param document The document in which to compute scopes.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    computeLocalScopes(document: LangiumDocument, cancelToken?: CancellationToken): Promise<PrecomputedScopes>;\n\n}\n\n/**\n * The default scope computation creates and collectes descriptions of the AST nodes to be exported into the\n * _global_ scope from the given document. By default those are the document's root AST node and its directly\n * contained child nodes.\n *\n * Besides, it gathers all AST nodes that have a name (according to the `NameProvider` service) and includes them\n * in the local scope of their particular container nodes. As a result, for every cross-reference in the AST,\n * target elements from the same level (siblings) and further up towards the root (parents and siblings of parents)\n * are visible. Elements being nested inside lower levels (children, children of siblings and parents' siblings)\n * are _invisible_ by default, but that can be changed by customizing this service.\n */\nexport class DefaultScopeComputation implements ScopeComputation {\n\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n    }\n\n    async computeExports(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        return this.computeExportsForNode(document.parseResult.value, document, undefined, cancelToken);\n    }\n\n    /**\n     * Creates {@link AstNodeDescription AstNodeDescriptions} for the given {@link AstNode parentNode} and its children.\n     * The list of children to be considered is determined by the function parameter {@link children}.\n     * By default only the direct children of {@link parentNode} are visited, nested nodes are not exported.\n     *\n     * @param parentNode AST node to be exported, i.e., of which an {@link AstNodeDescription} shall be added to the returned list.\n     * @param document The document containing the AST node to be exported.\n     * @param children A function called with {@link parentNode} as single argument and returning an {@link Iterable} supplying the children to be visited, which must be directly or transitively contained in {@link parentNode}.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution.\n     * @returns A list of {@link AstNodeDescription AstNodeDescriptions} to be published to index.\n     */\n    async computeExportsForNode(parentNode: AstNode, document: LangiumDocument<AstNode>, children: (root: AstNode) => Iterable<AstNode> = streamContents, cancelToken: CancellationToken = CancellationToken.None): Promise<AstNodeDescription[]> {\n        const exports: AstNodeDescription[] = [];\n\n        this.exportNode(parentNode, exports, document);\n        for (const node of children(parentNode)) {\n            await interruptAndCheck(cancelToken);\n            this.exportNode(node, exports, document);\n        }\n        return exports;\n    }\n\n    /**\n     * Add a single node to the list of exports if it has a name. Override this method to change how\n     * symbols are exported, e.g. by modifying their exported name.\n     */\n    protected exportNode(node: AstNode, exports: AstNodeDescription[], document: LangiumDocument): void {\n        const name = this.nameProvider.getName(node);\n        if (name) {\n            exports.push(this.descriptions.createDescription(node, name, document));\n        }\n    }\n\n    async computeLocalScopes(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<PrecomputedScopes> {\n        const rootNode = document.parseResult.value;\n        const scopes = new MultiMap<AstNode, AstNodeDescription>();\n        // Here we navigate the full AST - local scopes shall be available in the whole document\n        for (const node of streamAllContents(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            this.processNode(node, document, scopes);\n        }\n        return scopes;\n    }\n\n    /**\n     * Process a single node during scopes computation. The default implementation makes the node visible\n     * in the subtree of its container (if the node has a name). Override this method to change this,\n     * e.g. by increasing the visibility to a higher level in the AST.\n     */\n    protected processNode(node: AstNode, document: LangiumDocument, scopes: PrecomputedScopes): void {\n        const container = node.$container;\n        if (container) {\n            const name = this.nameProvider.getName(node);\n            if (name) {\n                scopes.add(container, this.descriptions.createDescription(node, name, document));\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNodeDescription } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport { EMPTY_STREAM, stream } from '../utils/stream.js';\n\n/**\n * A scope describes what target elements are visible from a specific cross-reference context.\n */\nexport interface Scope {\n\n    /**\n     * Find a target element matching the given name. If no element is found, `undefined` is returned.\n     * If multiple matching elements are present, the selection of the returned element should be done\n     * according to the semantics of your language. Usually it is the element that is most closely defined.\n     *\n     * @param name Name of the cross-reference target as it appears in the source text.\n     */\n    getElement(name: string): AstNodeDescription | undefined;\n\n    /**\n     * Create a stream of all elements in the scope. This is used to compute completion proposals to be\n     * shown in the editor.\n     */\n    getAllElements(): Stream<AstNodeDescription>;\n\n}\n\nexport interface ScopeOptions {\n    caseInsensitive?: boolean;\n}\n\n/**\n * The default scope implementation is based on a `Stream`. It has an optional _outer scope_ describing\n * the next level of elements, which are queried when a target element is not found in the stream provided\n * to this scope.\n */\nexport class StreamScope implements Scope {\n    readonly elements: Stream<AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Stream<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = elements;\n        this.outerScope = outerScope;\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        if (this.outerScope) {\n            return this.elements.concat(this.outerScope.getAllElements());\n        } else {\n            return this.elements;\n        }\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const local = this.caseInsensitive\n            ? this.elements.find(e => e.name.toLowerCase() === name.toLowerCase())\n            : this.elements.find(e => e.name === name);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n}\n\nexport class MapScope implements Scope {\n    readonly elements: Map<string, AstNodeDescription>;\n    readonly outerScope?: Scope;\n    readonly caseInsensitive: boolean;\n\n    constructor(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions) {\n        this.elements = new Map();\n        this.caseInsensitive = options?.caseInsensitive ?? false;\n        for (const element of elements) {\n            const name = this.caseInsensitive\n                ? element.name.toLowerCase()\n                : element.name;\n            this.elements.set(name, element);\n        }\n        this.outerScope = outerScope;\n    }\n\n    getElement(name: string): AstNodeDescription | undefined {\n        const localName = this.caseInsensitive ? name.toLowerCase() : name;\n        const local = this.elements.get(localName);\n        if (local) {\n            return local;\n        }\n        if (this.outerScope) {\n            return this.outerScope.getElement(name);\n        }\n        return undefined;\n    }\n\n    getAllElements(): Stream<AstNodeDescription> {\n        let elementStream = stream(this.elements.values());\n        if (this.outerScope) {\n            elementStream = elementStream.concat(this.outerScope.getAllElements());\n        }\n        return elementStream;\n    }\n\n}\n\nexport const EMPTY_SCOPE: Scope = {\n    getElement(): undefined {\n        return undefined;\n    },\n    getAllElements(): Stream<AstNodeDescription> {\n        return EMPTY_STREAM;\n    }\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { Disposable } from './disposable.js';\nimport type { URI } from './uri-utils.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\n\nexport abstract class DisposableCache implements Disposable {\n\n    protected toDispose: Disposable[] = [];\n    protected isDisposed = false;\n\n    onDispose(disposable: Disposable): void {\n        this.toDispose.push(disposable);\n    }\n\n    dispose(): void {\n        this.throwIfDisposed();\n        this.clear();\n        this.isDisposed = true;\n        this.toDispose.forEach(disposable => disposable.dispose());\n    }\n\n    protected throwIfDisposed(): void {\n        if (this.isDisposed) {\n            throw new Error('This cache has already been disposed');\n        }\n    }\n\n    abstract clear(): void;\n}\n\nexport class SimpleCache<K, V> extends DisposableCache {\n    protected readonly cache = new Map<K, V>();\n\n    has(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.has(key);\n    }\n\n    set(key: K, value: V): void {\n        this.throwIfDisposed();\n        this.cache.set(key, value);\n    }\n\n    get(key: K): V | undefined;\n    get(key: K, provider: () => V): V;\n    get(key: K, provider?: () => V): V | undefined {\n        this.throwIfDisposed();\n        if (this.cache.has(key)) {\n            return this.cache.get(key);\n        } else if (provider) {\n            const value = provider();\n            this.cache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(key: K): boolean {\n        this.throwIfDisposed();\n        return this.cache.delete(key);\n    }\n\n    clear(): void {\n        this.throwIfDisposed();\n        this.cache.clear();\n    }\n}\n\nexport class ContextCache<Context, Key, Value, ContextKey = Context> extends DisposableCache {\n\n    private readonly cache = new Map<ContextKey | Context, Map<Key, Value>>();\n    private readonly converter: (input: Context) => ContextKey | Context;\n\n    constructor(converter?: (input: Context) => ContextKey) {\n        super();\n        this.converter = converter ?? (value => value);\n    }\n\n    has(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).has(key);\n    }\n\n    set(contextKey: Context, key: Key, value: Value): void {\n        this.throwIfDisposed();\n        this.cacheForContext(contextKey).set(key, value);\n    }\n\n    get(contextKey: Context, key: Key): Value | undefined;\n    get(contextKey: Context, key: Key, provider: () => Value): Value;\n    get(contextKey: Context, key: Key, provider?: () => Value): Value | undefined {\n        this.throwIfDisposed();\n        const contextCache = this.cacheForContext(contextKey);\n        if (contextCache.has(key)) {\n            return contextCache.get(key);\n        } else if (provider) {\n            const value = provider();\n            contextCache.set(key, value);\n            return value;\n        } else {\n            return undefined;\n        }\n    }\n\n    delete(contextKey: Context, key: Key): boolean {\n        this.throwIfDisposed();\n        return this.cacheForContext(contextKey).delete(key);\n    }\n\n    clear(): void;\n    clear(contextKey: Context): void;\n    clear(contextKey?: Context): void {\n        this.throwIfDisposed();\n        if (contextKey) {\n            const mapKey = this.converter(contextKey);\n            this.cache.delete(mapKey);\n        } else {\n            this.cache.clear();\n        }\n    }\n\n    protected cacheForContext(contextKey: Context): Map<Key, Value> {\n        const mapKey = this.converter(contextKey);\n        let documentCache = this.cache.get(mapKey);\n        if (!documentCache) {\n            documentCache = new Map();\n            this.cache.set(mapKey, documentCache);\n        }\n        return documentCache;\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to a document.\n * If this document is changed or deleted, all associated key/value pairs are deleted.\n */\nexport class DocumentCache<K, V> extends ContextCache<URI | string, K, V, string> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super(uri => uri.toString());\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate((changed, deleted) => {\n            const allUris = changed.concat(deleted);\n            for (const uri of allUris) {\n                this.clear(uri);\n            }\n        }));\n    }\n}\n\n/**\n * Every key/value pair in this cache is scoped to the whole workspace.\n * If any document in the workspace changes, the whole cache is evicted.\n */\nexport class WorkspaceCache<K, V> extends SimpleCache<K, V> {\n    constructor(sharedServices: LangiumSharedCoreServices) {\n        super();\n        this.onDispose(sharedServices.workspace.DocumentBuilder.onUpdate(() => {\n            this.clear();\n        }));\n    }\n}\n","/******************************************************************************\n * Copyright 2021-2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection, ReferenceInfo } from '../syntax-tree.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { AstNodeDescriptionProvider } from '../workspace/ast-descriptions.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { NameProvider } from './name-provider.js';\nimport type { Scope, ScopeOptions} from './scope.js';\nimport { MapScope, StreamScope } from './scope.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { stream } from '../utils/stream.js';\nimport { WorkspaceCache } from '../utils/caching.js';\n\n/**\n * Language-specific service for determining the scope of target elements visible in a specific cross-reference context.\n */\nexport interface ScopeProvider {\n\n    /**\n     * Return a scope describing what elements are visible for the given AST node and cross-reference\n     * identifier.\n     *\n     * @param context Information about the reference for which a scope is requested.\n     */\n    getScope(context: ReferenceInfo): Scope;\n\n}\n\nexport class DefaultScopeProvider implements ScopeProvider {\n\n    protected readonly reflection: AstReflection;\n    protected readonly nameProvider: NameProvider;\n    protected readonly descriptions: AstNodeDescriptionProvider;\n    protected readonly indexManager: IndexManager;\n\n    protected readonly globalScopeCache: WorkspaceCache<string, Scope>;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n        this.nameProvider = services.references.NameProvider;\n        this.descriptions = services.workspace.AstNodeDescriptionProvider;\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.globalScopeCache = new WorkspaceCache<string, Scope>(services.shared);\n    }\n\n    getScope(context: ReferenceInfo): Scope {\n        const scopes: Array<Stream<AstNodeDescription>> = [];\n        const referenceType = this.reflection.getReferenceType(context);\n\n        const precomputed = getDocument(context.container).precomputedScopes;\n        if (precomputed) {\n            let currentNode: AstNode | undefined = context.container;\n            do {\n                const allDescriptions = precomputed.get(currentNode);\n                if (allDescriptions.length > 0) {\n                    scopes.push(stream(allDescriptions).filter(\n                        desc => this.reflection.isSubtype(desc.type, referenceType)));\n                }\n                currentNode = currentNode.$container;\n            } while (currentNode);\n        }\n\n        let result: Scope = this.getGlobalScope(referenceType, context);\n        for (let i = scopes.length - 1; i >= 0; i--) {\n            result = this.createScope(scopes[i], result);\n        }\n        return result;\n    }\n\n    /**\n     * Create a scope for the given collection of AST node descriptions.\n     */\n    protected createScope(elements: Iterable<AstNodeDescription>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        return new StreamScope(stream(elements), outerScope, options);\n    }\n\n    /**\n     * Create a scope for the given collection of AST nodes, which need to be transformed into respective\n     * descriptions first. This is done using the `NameProvider` and `AstNodeDescriptionProvider` services.\n     */\n    protected createScopeForNodes(elements: Iterable<AstNode>, outerScope?: Scope, options?: ScopeOptions): Scope {\n        const s = stream(elements).map(e => {\n            const name = this.nameProvider.getName(e);\n            if (name) {\n                return this.descriptions.createDescription(e, name);\n            }\n            return undefined;\n        }).nonNullable();\n        return new StreamScope(s, outerScope, options);\n    }\n\n    /**\n     * Create a global scope filtered for the given reference type.\n     */\n    protected getGlobalScope(referenceType: string, _context: ReferenceInfo): Scope {\n        return this.globalScopeCache.get(referenceType, () => new MapScope(this.indexManager.allElements(referenceType)));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { URI } from 'vscode-uri';\nimport type { CommentProvider } from '../documentation/comment-provider.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode, GenericAstNode, Mutable, Reference } from '../syntax-tree.js';\nimport { isAstNode, isReference } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { findNodesForProperty } from '../utils/grammar-utils.js';\nimport type { AstNodeLocator } from '../workspace/ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument, LangiumDocuments } from '../workspace/documents.js';\n\nexport interface JsonSerializeOptions {\n    /** The space parameter for `JSON.stringify`, controlling whether and how to pretty-print the output. */\n    space?: string | number;\n    /** Whether to include the `$refText` property for references (the name used to identify the target node). */\n    refText?: boolean;\n    /** Whether to include the `$sourceText` property, which holds the full source text from which an AST node was parsed. */\n    sourceText?: boolean;\n    /** Whether to include the `$textRegion` property, which holds information to trace AST node properties to their respective source text regions. */\n    textRegions?: boolean;\n    /** Whether to include the `$comment` property, which holds comments according to the CommentProvider service. */\n    comments?: boolean;\n    /** The replacer parameter for `JSON.stringify`; the default replacer given as parameter should be used to apply basic replacements. */\n    replacer?: (key: string, value: unknown, defaultReplacer: (key: string, value: unknown) => unknown) => unknown\n    /** Used to convert and serialize URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: URI, reference: Reference) => string\n}\n\nexport interface JsonDeserializeOptions {\n    /** Used to parse and convert URIs when the target of a cross-reference is in a different document. */\n    uriConverter?: (uri: string) => URI\n}\n\n/**\n * {@link AstNode}s that may carry information on their definition area within the DSL text.\n */\nexport interface AstNodeWithTextRegion extends AstNode {\n    $sourceText?: string;\n    $textRegion?: AstNodeRegionWithAssignments;\n}\n\n/**\n * {@link AstNode}s that may carry a semantically relevant comment.\n */\nexport interface AstNodeWithComment extends AstNode {\n    $comment?: string;\n}\n\nexport function isAstNodeWithComment(node: AstNode): node is AstNodeWithComment {\n    return typeof (node as AstNodeWithComment).$comment === 'string';\n}\n\n/**\n * A {@DocumentSegment} representing the definition area of an AstNode within the DSL text.\n * Usually contains text region information on all assigned property values of the AstNode,\n * and may contain the defining file's URI as string.\n */\nexport interface AstNodeRegionWithAssignments extends DocumentSegment {\n    /**\n     * A record containing an entry for each assigned property of the AstNode.\n     * The key is equal to the property name and the value is an array of the property values'\n     * text regions, regardless of whether the property is a single value or list property.\n     */\n    assignments?: Record<string, DocumentSegment[]>;\n    /**\n     * The AstNode defining file's URI as string\n     */\n    documentURI?: string;\n}\n\n/**\n * Utility service for transforming an `AstNode` into a JSON string and vice versa.\n */\nexport interface JsonSerializer {\n    /**\n     * Serialize an `AstNode` into a JSON `string`.\n     * @param node The `AstNode` to be serialized.\n     * @param space Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    serialize(node: AstNode, options?: JsonSerializeOptions): string;\n    /**\n     * Deserialize (parse) a JSON `string` into an `AstNode`.\n     */\n    deserialize<T extends AstNode = AstNode>(content: string, options?: JsonDeserializeOptions): T;\n}\n\n/**\n * A cross-reference in the serialized JSON representation of an AstNode.\n */\ninterface IntermediateReference {\n    /** URI pointing to the target element. This is either `#${path}` if the target is in the same document, or `${documentURI}#${path}` otherwise. */\n    $ref?: string\n    /** The actual text used to look up the reference target in the surrounding scope. */\n    $refText?: string\n    /** If any problem occurred while resolving the reference, it is described by this property. */\n    $error?: string\n}\n\nfunction isIntermediateReference(obj: unknown): obj is IntermediateReference {\n    return typeof obj === 'object' && !!obj && ('$ref' in obj || '$error' in obj);\n}\n\nexport class DefaultJsonSerializer implements JsonSerializer {\n\n    /** The set of AstNode properties to be ignored by the serializer. */\n    ignoreProperties = new Set(['$container', '$containerProperty', '$containerIndex', '$document', '$cstNode']);\n\n    /** The document that is currently processed by the serializer; this is used by the replacer function.  */\n    protected currentDocument: LangiumDocument | undefined;\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.langiumDocuments = services.shared.workspace.LangiumDocuments;\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    serialize(node: AstNode, options: JsonSerializeOptions = {}): string {\n        const specificReplacer = options?.replacer;\n        const defaultReplacer = (key: string, value: unknown) => this.replacer(key, value, options);\n        const replacer = specificReplacer ? (key: string, value: unknown) => specificReplacer(key, value, defaultReplacer) : defaultReplacer;\n\n        try {\n            this.currentDocument = getDocument(node);\n            return JSON.stringify(node, replacer, options?.space);\n        } finally {\n            this.currentDocument = undefined;\n        }\n    }\n\n    deserialize<T extends AstNode = AstNode>(content: string, options: JsonDeserializeOptions = {}): T {\n        const root = JSON.parse(content);\n        this.linkNode(root, root, options);\n        return root;\n    }\n\n    protected replacer(key: string, value: unknown, { refText, sourceText, textRegions, comments, uriConverter }: JsonSerializeOptions): unknown {\n        if (this.ignoreProperties.has(key)) {\n            return undefined;\n        } else if (isReference(value)) {\n            const refValue = value.ref;\n            const $refText = refText ? value.$refText : undefined;\n            if (refValue) {\n                const targetDocument = getDocument(refValue);\n                let targetUri = '';\n                if (this.currentDocument && this.currentDocument !== targetDocument) {\n                    if (uriConverter) {\n                        targetUri = uriConverter(targetDocument.uri, value);\n                    } else {\n                        targetUri = targetDocument.uri.toString();\n                    }\n                }\n                const targetPath = this.astNodeLocator.getAstNodePath(refValue);\n                return {\n                    $ref: `${targetUri}#${targetPath}`,\n                    $refText\n                } satisfies IntermediateReference;\n            } else {\n                return {\n                    $error: value.error?.message ?? 'Could not resolve reference',\n                    $refText\n                } satisfies IntermediateReference;\n            }\n        } else if (isAstNode(value)) {\n            let astNode: AstNodeWithTextRegion | undefined = undefined;\n            if (textRegions) {\n                astNode = this.addAstNodeRegionWithAssignmentsTo({ ...value });\n                if ((!key || value.$document) && astNode?.$textRegion) {\n                    // The document URI is added to the root node of the resulting JSON tree\n                    astNode.$textRegion.documentURI = this.currentDocument?.uri.toString();\n                }\n            }\n            if (sourceText && !key) {\n                astNode ??= { ...value };\n                astNode.$sourceText = value.$cstNode?.text;\n            }\n            if (comments) {\n                astNode ??= { ...value };\n                const comment = this.commentProvider.getComment(value);\n                if (comment) {\n                    (astNode as AstNodeWithComment).$comment = comment.replace(/\\r/g, '');\n                }\n            }\n            return astNode ?? value;\n        } else {\n            return value;\n        }\n    }\n\n    protected addAstNodeRegionWithAssignmentsTo(node: AstNodeWithTextRegion) {\n        const createDocumentSegment: (cstNode: CstNode) => AstNodeRegionWithAssignments = cstNode => <DocumentSegment>{\n            offset: cstNode.offset,\n            end: cstNode.end,\n            length: cstNode.length,\n            range: cstNode.range,\n        };\n\n        if (node.$cstNode) {\n            const textRegion = node.$textRegion = createDocumentSegment(node.$cstNode);\n            const assignments: Record<string, DocumentSegment[]> = textRegion.assignments = {};\n\n            Object.keys(node).filter(key => !key.startsWith('$')).forEach(key => {\n                const propertyAssignments = findNodesForProperty(node.$cstNode, key).map(createDocumentSegment);\n                if (propertyAssignments.length !== 0) {\n                    assignments[key] = propertyAssignments;\n                }\n            });\n\n            return node;\n        }\n        return undefined;\n    }\n\n    protected linkNode(node: GenericAstNode, root: AstNode, options: JsonDeserializeOptions, container?: AstNode, containerProperty?: string, containerIndex?: number) {\n        for (const [propertyName, item] of Object.entries(node)) {\n            if (Array.isArray(item)) {\n                for (let index = 0; index < item.length; index++) {\n                    const element = item[index];\n                    if (isIntermediateReference(element)) {\n                        item[index] = this.reviveReference(node, propertyName, root, element, options);\n                    } else if (isAstNode(element)) {\n                        this.linkNode(element as GenericAstNode, root, options, node, propertyName, index);\n                    }\n                }\n            } else if (isIntermediateReference(item)) {\n                node[propertyName] = this.reviveReference(node, propertyName, root, item, options);\n            } else if (isAstNode(item)) {\n                this.linkNode(item as GenericAstNode, root, options, node, propertyName);\n            }\n        }\n        const mutable = node as Mutable<AstNode>;\n        mutable.$container = container;\n        mutable.$containerProperty = containerProperty;\n        mutable.$containerIndex = containerIndex;\n    }\n\n    protected reviveReference(container: AstNode, property: string, root: AstNode, reference: IntermediateReference, options: JsonDeserializeOptions): Reference | undefined {\n        let refText = reference.$refText;\n        let error = reference.$error;\n        if (reference.$ref) {\n            const ref = this.getRefNode(root, reference.$ref, options.uriConverter);\n            if (isAstNode(ref)) {\n                if (!refText) {\n                    refText = this.nameProvider.getName(ref);\n                }\n                return {\n                    $refText: refText ?? '',\n                    ref\n                };\n            } else {\n                error = ref;\n            }\n        }\n        if (error) {\n            const ref: Mutable<Reference> = {\n                $refText: refText ?? ''\n            };\n            ref.error = {\n                container,\n                property,\n                message: error,\n                reference: ref\n            };\n            return ref;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected getRefNode(root: AstNode, uri: string, uriConverter?: (uri: string) => URI): AstNode | string {\n        try {\n            const fragmentIndex = uri.indexOf('#');\n            if (fragmentIndex === 0) {\n                const node = this.astNodeLocator.getAstNode(root, uri.substring(1));\n                if (!node) {\n                    return 'Could not resolve path: ' + uri;\n                }\n                return node;\n            }\n            if (fragmentIndex < 0) {\n                const documentUri = uriConverter ? uriConverter(uri) : URI.parse(uri);\n                const document = this.langiumDocuments.getDocument(documentUri);\n                if (!document) {\n                    return 'Could not find document for URI: ' + uri;\n                }\n                return document.parseResult.value;\n            }\n            const documentUri = uriConverter ? uriConverter(uri.substring(0, fragmentIndex)) : URI.parse(uri.substring(0, fragmentIndex));\n            const document = this.langiumDocuments.getDocument(documentUri);\n            if (!document) {\n                return 'Could not find document for URI: ' + uri;\n            }\n            if (fragmentIndex === uri.length - 1) {\n                return document.parseResult.value;\n            }\n            const node = this.astNodeLocator.getAstNode(document.parseResult.value, uri.substring(fragmentIndex + 1));\n            if (!node) {\n                return 'Could not resolve URI: ' + uri;\n            }\n            return node;\n        } catch (err) {\n            return String(err);\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from './services.js';\nimport { UriUtils, type URI } from './utils/uri-utils.js';\n\n/**\n * The service registry provides access to the language-specific {@link LangiumCoreServices} optionally including LSP-related services.\n * These are resolved via the URI of a text document.\n */\nexport interface ServiceRegistry {\n\n    /**\n     * Register a language via its injected services.\n     */\n    register(language: LangiumCoreServices): void;\n\n    /**\n     * Retrieve the language-specific services for the given URI. In case only one language is\n     * registered, it may be used regardless of the URI format.\n     */\n    getServices(uri: URI): LangiumCoreServices;\n\n    /**\n     * The full set of registered language services.\n     */\n    readonly all: readonly LangiumCoreServices[];\n}\n\n/**\n * Generic registry for Langium services, but capable of being used with extending service sets as well (such as the lsp-complete LangiumCoreServices set)\n */\nexport class DefaultServiceRegistry implements ServiceRegistry {\n\n    protected singleton?: LangiumCoreServices;\n    protected map?: Record<string, LangiumCoreServices>;\n\n    register(language: LangiumCoreServices): void {\n        if (!this.singleton && !this.map) {\n            // This is the first language to be registered; store it as singleton.\n            this.singleton = language;\n            return;\n        }\n        if (!this.map) {\n            this.map = {};\n            if (this.singleton) {\n                // Move the previous singleton instance to the new map.\n                for (const ext of this.singleton.LanguageMetaData.fileExtensions) {\n                    this.map[ext] = this.singleton;\n                }\n                this.singleton = undefined;\n            }\n        }\n        // Store the language services in the map.\n        for (const ext of language.LanguageMetaData.fileExtensions) {\n            if (this.map[ext] !== undefined && this.map[ext] !== language) {\n                console.warn(`The file extension ${ext} is used by multiple languages. It is now assigned to '${language.LanguageMetaData.languageId}'.`);\n            }\n            this.map[ext] = language;\n        }\n    }\n\n    getServices(uri: URI): LangiumCoreServices {\n        if (this.singleton !== undefined) {\n            return this.singleton;\n        }\n        if (this.map === undefined) {\n            throw new Error('The service registry is empty. Use `register` to register the services of a language.');\n        }\n        const ext = UriUtils.extname(uri);\n        const services = this.map[ext];\n        if (!services) {\n            throw new Error(`The service registry contains no services for the extension '${ext}'.`);\n        }\n        return services;\n    }\n\n    get all(): readonly LangiumCoreServices[] {\n        if (this.singleton !== undefined) {\n            return [this.singleton];\n        }\n        if (this.map !== undefined) {\n            return Object.values(this.map);\n        }\n        return [];\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CodeDescription, DiagnosticRelatedInformation, DiagnosticTag, integer, Range } from 'vscode-languageserver-types';\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstReflection, Properties } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Stream } from '../utils/stream.js';\nimport type { DocumentSegment } from '../workspace/documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { isOperationCancelled } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\n\nexport type DiagnosticInfo<N extends AstNode, P extends string = Properties<N>> = {\n    /** The AST node to which the diagnostic is attached. */\n    node: N;\n    /** If a property name is given, the diagnostic is restricted to the corresponding text region. */\n    property?: P;\n    /** If the value of a keyword is given, the diagnostic will appear at its corresponding text region */\n    keyword?: string;\n    /** In case of a multi-value property (array), an index can be given to select a specific element. */\n    index?: number;\n    /** If you want to create a diagnostic independent to any property, use the range property. */\n    range?: Range;\n    /** The diagnostic's code, which usually appear in the user interface. */\n    code?: integer | string;\n    /** An optional property to describe the error code. */\n    codeDescription?: CodeDescription;\n    /** Additional metadata about the diagnostic. */\n    tags?: DiagnosticTag[];\n    /** An array of related diagnostic information, e.g. when symbol-names within a scope collide all definitions can be marked via this property. */\n    relatedInformation?: DiagnosticRelatedInformation[];\n    /** A data entry field that is preserved between a `textDocument/publishDiagnostics` notification and `textDocument/codeAction` request. */\n    data?: unknown;\n}\n\n/**\n * Shape of information commonly used in the `data` field of diagnostics.\n */\nexport interface DiagnosticData {\n    /** Diagnostic code for identifying which code action to apply. This code is _not_ shown in the user interface. */\n    code: string\n    /** Specifies where to apply the code action in the form of a `DocumentSegment`. */\n    actionSegment?: DocumentSegment\n    /** Specifies where to apply the code action in the form of a `Range`. */\n    actionRange?: Range\n}\n\n/**\n * Create DiagnosticData for a given diagnostic code. The result can be put into the `data` field of a DiagnosticInfo.\n */\nexport function diagnosticData(code: string): DiagnosticData {\n    return { code };\n}\n\nexport type ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => void\n\nexport type ValidationCheck<T extends AstNode = AstNode> = (node: T, accept: ValidationAcceptor, cancelToken: CancellationToken) => MaybePromise<void>;\n\n/**\n * A utility type for associating non-primitive AST types to corresponding validation checks. For example:\n *\n * ```ts\n *   const checks: ValidationChecks<StatemachineAstType> = {\n *       State: validator.checkStateNameStartsWithCapital\n *    };\n * ```\n *\n * If an AST type does not extend AstNode, e.g. if it describes a union of string literals, that type's name must not occur as a key in objects of type `ValidationCheck<...>`.\n *\n * @param T a type definition mapping language specific type names (keys) to the corresponding types (values)\n */\nexport type ValidationChecks<T> = {\n    [K in keyof T]?: T[K] extends AstNode ? ValidationCheck<T[K]> | Array<ValidationCheck<T[K]>> : never\n} & {\n    AstNode?: ValidationCheck<AstNode> | Array<ValidationCheck<AstNode>>;\n}\n\n/**\n * `fast` checks can be executed after every document change (i.e. as the user is typing). If a check\n * is too slow it can delay the response to document changes, yielding bad user experience. By marking\n * it as `slow`, it will be skipped for normal as-you-type validation. Then it's up to you when to\n * schedule these long-running checks: after the fast checks are done, or after saving a document,\n * or with an explicit command, etc.\n *\n * `built-in` checks are errors produced by the lexer, the parser, or the linker. They cannot be used\n * for custom validation checks.\n */\nexport type ValidationCategory = 'fast' | 'slow' | 'built-in'\n\nexport namespace ValidationCategory {\n    export const all: readonly ValidationCategory[] = ['fast', 'slow', 'built-in'];\n}\n\ntype ValidationCheckEntry = {\n    check: ValidationCheck\n    category: ValidationCategory\n}\n\n/**\n * Manages a set of `ValidationCheck`s to be applied when documents are validated.\n */\nexport class ValidationRegistry {\n    private readonly entries = new MultiMap<string, ValidationCheckEntry>();\n    private readonly reflection: AstReflection;\n\n    constructor(services: LangiumCoreServices) {\n        this.reflection = services.shared.AstReflection;\n    }\n\n    /**\n     * Register a set of validation checks. Each value in the record can be either a single validation check (i.e. a function)\n     * or an array of validation checks.\n     *\n     * @param checksRecord Set of validation checks to register.\n     * @param category Optional category for the validation checks (defaults to `'fast'`).\n     * @param thisObj Optional object to be used as `this` when calling the validation check functions.\n     */\n    register<T>(checksRecord: ValidationChecks<T>, thisObj: ThisParameterType<unknown> = this, category: ValidationCategory = 'fast'): void {\n        if (category === 'built-in') {\n            throw new Error(\"The 'built-in' category is reserved for lexer, parser, and linker errors.\");\n        }\n        for (const [type, ch] of Object.entries(checksRecord)) {\n            const callbacks = ch as ValidationCheck | ValidationCheck[];\n            if (Array.isArray(callbacks)) {\n                for (const check of callbacks) {\n                    const entry: ValidationCheckEntry = {\n                        check: this.wrapValidationException(check, thisObj),\n                        category\n                    };\n                    this.addEntry(type, entry);\n                }\n            } else if (typeof callbacks === 'function') {\n                const entry: ValidationCheckEntry = {\n                    check: this.wrapValidationException(callbacks, thisObj),\n                    category\n                };\n                this.addEntry(type, entry);\n            }\n        }\n    }\n\n    protected wrapValidationException(check: ValidationCheck, thisObj: unknown): ValidationCheck {\n        return async (node, accept, cancelToken) => {\n            try {\n                await check.call(thisObj, node, accept, cancelToken);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    throw err;\n                }\n                console.error('An error occurred during validation:', err);\n                const message = err instanceof Error ? err.message : String(err);\n                if (err instanceof Error && err.stack) {\n                    console.error(err.stack);\n                }\n                accept('error', 'An error occurred during validation: ' + message, { node });\n            }\n        };\n    }\n\n    protected addEntry(type: string, entry: ValidationCheckEntry): void {\n        if (type === 'AstNode') {\n            this.entries.add('AstNode', entry);\n            return;\n        }\n        for (const subtype of this.reflection.getAllSubTypes(type)) {\n            this.entries.add(subtype, entry);\n        }\n    }\n\n    getChecks(type: string, categories?: ValidationCategory[]): Stream<ValidationCheck> {\n        let checks = stream(this.entries.get(type))\n            .concat(this.entries.get('AstNode'));\n        if (categories) {\n            checks = checks.filter(entry => categories.includes(entry.category));\n        }\n        return checks.map(entry => entry.check);\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { MismatchedTokenException } from 'chevrotain';\nimport type { DiagnosticSeverity, Position, Range, Diagnostic } from 'vscode-languageserver-types';\nimport type { LanguageMetaData } from '../languages/language-meta-data.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, CstNode } from '../syntax-tree.js';\nimport type { LangiumDocument } from '../workspace/documents.js';\nimport type { DiagnosticData, DiagnosticInfo, ValidationAcceptor, ValidationCategory, ValidationRegistry } from './validation-registry.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { findNodeForKeyword, findNodeForProperty } from '../utils/grammar-utils.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { tokenToRange } from '../utils/cst-utils.js';\nimport { interruptAndCheck, isOperationCancelled } from '../utils/promise-utils.js';\nimport { diagnosticData } from './validation-registry.js';\n\nexport interface ValidationOptions {\n    /**\n     * If this is set, only the checks associated with these categories are executed; otherwise\n     * all checks are executed. The default category if not specified to the registry is `'fast'`.\n     */\n    categories?: ValidationCategory[];\n    /** If true, no further diagnostics are reported if there are lexing errors. */\n    stopAfterLexingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are parsing errors. */\n    stopAfterParsingErrors?: boolean\n    /** If true, no further diagnostics are reported if there are linking errors. */\n    stopAfterLinkingErrors?: boolean\n}\n\n/**\n * Language-specific service for validating `LangiumDocument`s.\n */\nexport interface DocumentValidator {\n    /**\n     * Validates the whole specified document.\n     *\n     * @param document specified document to validate\n     * @param options options to control the validation process\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    validateDocument(document: LangiumDocument, options?: ValidationOptions, cancelToken?: CancellationToken): Promise<Diagnostic[]>;\n}\n\nexport class DefaultDocumentValidator implements DocumentValidator {\n\n    protected readonly validationRegistry: ValidationRegistry;\n    protected readonly metadata: LanguageMetaData;\n\n    constructor(services: LangiumCoreServices) {\n        this.validationRegistry = services.validation.ValidationRegistry;\n        this.metadata = services.LanguageMetaData;\n    }\n\n    async validateDocument(document: LangiumDocument, options: ValidationOptions = {}, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const parseResult = document.parseResult;\n        const diagnostics: Diagnostic[] = [];\n\n        await interruptAndCheck(cancelToken);\n\n        if (!options.categories || options.categories.includes('built-in')) {\n            this.processLexingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterLexingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LexingError)) {\n                return diagnostics;\n            }\n\n            this.processParsingErrors(parseResult, diagnostics, options);\n            if (options.stopAfterParsingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.ParsingError)) {\n                return diagnostics;\n            }\n\n            this.processLinkingErrors(document, diagnostics, options);\n            if (options.stopAfterLinkingErrors && diagnostics.some(d => d.data?.code === DocumentValidator.LinkingError)) {\n                return diagnostics;\n            }\n        }\n\n        // Process custom validations\n        try {\n            diagnostics.push(...await this.validateAst(parseResult.value, options, cancelToken));\n        } catch (err) {\n            if (isOperationCancelled(err)) {\n                throw err;\n            }\n            console.error('An error occurred during validation:', err);\n        }\n\n        await interruptAndCheck(cancelToken);\n\n        return diagnostics;\n    }\n\n    protected processLexingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const lexerError of parseResult.lexerErrors) {\n            const diagnostic: Diagnostic = {\n                severity: toDiagnosticSeverity('error'),\n                range: {\n                    start: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! - 1\n                    },\n                    end: {\n                        line: lexerError.line! - 1,\n                        character: lexerError.column! + lexerError.length - 1\n                    }\n                },\n                message: lexerError.message,\n                data: diagnosticData(DocumentValidator.LexingError),\n                source: this.getSource()\n            };\n            diagnostics.push(diagnostic);\n        }\n    }\n\n    protected processParsingErrors(parseResult: ParseResult, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const parserError of parseResult.parserErrors) {\n            let range: Range | undefined = undefined;\n            // We can run into the chevrotain error recovery here\n            // The token contained in the parser error might be automatically inserted\n            // In this case every position value will be `NaN`\n            if (isNaN(parserError.token.startOffset)) {\n                // Some special parser error types contain a `previousToken`\n                // We can simply append our diagnostic to that token\n                if ('previousToken' in parserError) {\n                    const token = (parserError as MismatchedTokenException).previousToken;\n                    if (!isNaN(token.startOffset)) {\n                        const position: Position = { line: token.endLine! - 1, character: token.endColumn! };\n                        range = { start: position, end: position};\n                    } else {\n                        // No valid prev token. Might be empty document or containing only hidden tokens.\n                        // Point to document start\n                        const position: Position = { line: 0, character: 0 };\n                        range = { start: position, end: position};\n                    }\n                }\n            } else {\n                range = tokenToRange(parserError.token);\n            }\n            if (range) {\n                const diagnostic: Diagnostic = {\n                    severity: toDiagnosticSeverity('error'),\n                    range,\n                    message: parserError.message,\n                    data: diagnosticData(DocumentValidator.ParsingError),\n                    source: this.getSource()\n                };\n                diagnostics.push(diagnostic);\n            }\n        }\n    }\n\n    protected processLinkingErrors(document: LangiumDocument, diagnostics: Diagnostic[], _options: ValidationOptions): void {\n        for (const reference of document.references) {\n            const linkingError = reference.error;\n            if (linkingError) {\n                const info: DiagnosticInfo<AstNode, string> = {\n                    node: linkingError.container,\n                    property: linkingError.property,\n                    index: linkingError.index,\n                    data: {\n                        code: DocumentValidator.LinkingError,\n                        containerType: linkingError.container.$type,\n                        property: linkingError.property,\n                        refText: linkingError.reference.$refText\n                    } satisfies LinkingErrorData\n                };\n                diagnostics.push(this.toDiagnostic('error', linkingError.message, info));\n            }\n        }\n    }\n\n    protected async validateAst(rootNode: AstNode, options: ValidationOptions, cancelToken = CancellationToken.None): Promise<Diagnostic[]> {\n        const validationItems: Diagnostic[] = [];\n        const acceptor: ValidationAcceptor = <N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N>) => {\n            validationItems.push(this.toDiagnostic(severity, message, info));\n        };\n\n        await Promise.all(streamAst(rootNode).map(async node => {\n            await interruptAndCheck(cancelToken);\n            const checks = this.validationRegistry.getChecks(node.$type, options.categories);\n            for (const check of checks) {\n                await check(node, acceptor, cancelToken);\n            }\n        }));\n        return validationItems;\n    }\n\n    protected toDiagnostic<N extends AstNode>(severity: 'error' | 'warning' | 'info' | 'hint', message: string, info: DiagnosticInfo<N, string>): Diagnostic {\n        return {\n            message,\n            range: getDiagnosticRange(info),\n            severity: toDiagnosticSeverity(severity),\n            code: info.code,\n            codeDescription: info.codeDescription,\n            tags: info.tags,\n            relatedInformation: info.relatedInformation,\n            data: info.data,\n            source: this.getSource()\n        };\n    }\n\n    protected getSource(): string | undefined {\n        return this.metadata.languageId;\n    }\n}\n\nexport function getDiagnosticRange<N extends AstNode>(info: DiagnosticInfo<N, string>): Range {\n    if (info.range) {\n        return info.range;\n    }\n    let cstNode: CstNode | undefined;\n    if (typeof info.property === 'string') {\n        cstNode = findNodeForProperty(info.node.$cstNode, info.property, info.index);\n    } else if (typeof info.keyword === 'string') {\n        cstNode = findNodeForKeyword(info.node.$cstNode, info.keyword, info.index);\n    }\n    cstNode ??= info.node.$cstNode;\n    if (!cstNode) {\n        return {\n            start: { line: 0, character: 0 },\n            end: { line: 0, character: 0 }\n        };\n    }\n    return cstNode.range;\n}\n\nexport function toDiagnosticSeverity(severity: 'error' | 'warning' | 'info' | 'hint'): DiagnosticSeverity {\n    switch (severity) {\n        case 'error':\n            return 1; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Error\n        case 'warning':\n            return 2; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Warning\n        case 'info':\n            return 3; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Information\n        case 'hint':\n            return 4; // according to vscode-languageserver-types/lib/esm/main.js#DiagnosticSeverity.Hint\n        default:\n            throw new Error('Invalid diagnostic severity: ' + severity);\n    }\n}\n\nexport namespace DocumentValidator {\n    export const LexingError = 'lexing-error';\n    export const ParsingError = 'parsing-error';\n    export const LinkingError = 'linking-error';\n}\n\nexport interface LinkingErrorData extends DiagnosticData {\n    containerType: string\n    property: string\n    refText: string\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nexport interface Disposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): void;\n}\n\nexport interface AsyncDisposable {\n    /**\n     * Dispose this object.\n     */\n    dispose(): Promise<void>;\n}\n\nexport namespace Disposable {\n    export function create(callback: () => Promise<void>): AsyncDisposable;\n    export function create(callback: () => void): Disposable;\n    export function create(callback: () => void | Promise<void>): Disposable | AsyncDisposable {\n        return {\n            dispose: async () => await callback()\n        };\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\nimport type { NameProvider } from '../references/name-provider.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, ReferenceInfo } from '../syntax-tree.js';\nimport type { AstNodeLocator } from './ast-node-locator.js';\nimport type { DocumentSegment, LangiumDocument } from './documents.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { isLinkingError } from '../syntax-tree.js';\nimport { getDocument, streamAst, streamReferences } from '../utils/ast-utils.js';\nimport { toDocumentSegment } from '../utils/cst-utils.js';\nimport { interruptAndCheck } from '../utils/promise-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\n\n/**\n * Language-specific service for creating descriptions of AST nodes to be used for cross-reference resolutions.\n */\nexport interface AstNodeDescriptionProvider {\n\n    /**\n     * Create a description for the given AST node. This service method is typically used while indexing\n     * the contents of a document and during scope computation.\n     *\n     * @param node An AST node.\n     * @param name The name to be used to refer to the AST node. By default, this is determined by the\n     *     `NameProvider` service, but alternative names may be provided according to the semantics\n     *     of your language.\n     * @param document The document containing the AST node. If omitted, it is taken from the root AST node.\n     */\n    createDescription(node: AstNode, name: string | undefined, document?: LangiumDocument): AstNodeDescription;\n\n}\n\nexport class DefaultAstNodeDescriptionProvider implements AstNodeDescriptionProvider {\n\n    protected readonly astNodeLocator: AstNodeLocator;\n    protected readonly nameProvider: NameProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.astNodeLocator = services.workspace.AstNodeLocator;\n        this.nameProvider = services.references.NameProvider;\n    }\n\n    createDescription(node: AstNode, name: string | undefined, document: LangiumDocument = getDocument(node)): AstNodeDescription {\n        name ??= this.nameProvider.getName(node);\n        const path = this.astNodeLocator.getAstNodePath(node);\n        if (!name) {\n            throw new Error(`Node at path ${path} has no name.`);\n        }\n        let nameNodeSegment: DocumentSegment | undefined;\n        const nameSegmentGetter = () => nameNodeSegment ??= toDocumentSegment(this.nameProvider.getNameNode(node) ?? node.$cstNode);\n        return {\n            node,\n            name,\n            get nameSegment() {\n                return nameSegmentGetter();\n            },\n            selectionSegment: toDocumentSegment(node.$cstNode),\n            type: node.$type,\n            documentUri: document.uri,\n            path\n        };\n    }\n\n}\n\n/**\n * Describes a cross-reference within a document or between two documents.\n */\nexport interface ReferenceDescription {\n    /** URI of the document that holds a reference */\n    sourceUri: URI\n    /** Path to AstNode that holds a reference */\n    sourcePath: string\n    /** Target document uri */\n    targetUri: URI\n    /** Path to the target AstNode inside the document */\n    targetPath: string\n    /** Segment of the reference text. */\n    segment: DocumentSegment\n    /** Marks a local reference i.e. a cross reference inside a document.   */\n    local?: boolean\n}\n\n/**\n * Language-specific service to create descriptions of all cross-references in a document. These are used by the `IndexManager`\n * to determine which documents are affected and should be rebuilt when a document is changed.\n */\nexport interface ReferenceDescriptionProvider {\n    /**\n     * Create descriptions of all cross-references found in the given document. These descriptions are\n     * gathered by the `IndexManager` and stored in the global index so they can be considered when\n     * a document change is reported by the client.\n     *\n     * @param document The document in which to gather cross-references.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    createDescriptions(document: LangiumDocument, cancelToken?: CancellationToken): Promise<ReferenceDescription[]>;\n}\n\nexport class DefaultReferenceDescriptionProvider implements ReferenceDescriptionProvider {\n\n    protected readonly nodeLocator: AstNodeLocator;\n\n    constructor(services: LangiumCoreServices) {\n        this.nodeLocator = services.workspace.AstNodeLocator;\n    }\n\n    async createDescriptions(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<ReferenceDescription[]> {\n        const descr: ReferenceDescription[] = [];\n        const rootNode = document.parseResult.value;\n        for (const astNode of streamAst(rootNode)) {\n            await interruptAndCheck(cancelToken);\n            streamReferences(astNode).filter(refInfo => !isLinkingError(refInfo)).forEach(refInfo => {\n                // TODO: Consider logging a warning or throw an exception when DocumentState is < than Linked\n                const description = this.createDescription(refInfo);\n                if (description) {\n                    descr.push(description);\n                }\n            });\n        }\n        return descr;\n    }\n\n    protected createDescription(refInfo: ReferenceInfo): ReferenceDescription | undefined {\n        const targetNodeDescr = refInfo.reference.$nodeDescription;\n        const refCstNode = refInfo.reference.$refNode;\n        if (!targetNodeDescr || !refCstNode) {\n            return undefined;\n        }\n        const docUri = getDocument(refInfo.container).uri;\n        return {\n            sourceUri: docUri,\n            sourcePath: this.nodeLocator.getAstNodePath(refInfo.container),\n            targetUri: targetNodeDescr.documentUri,\n            targetPath: targetNodeDescr.path,\n            segment: toDocumentSegment(refCstNode),\n            local: UriUtils.equals(targetNodeDescr.documentUri, docUri)\n        };\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { AstNode } from '../syntax-tree.js';\n\n/**\n * Language-specific service for locating an `AstNode` in a document.\n */\nexport interface AstNodeLocator {\n\n    /**\n     * Creates a path represented by a `string` that identifies an `AstNode` inside its document.\n     * It must be possible to retrieve exactly the same `AstNode` from the document using this path.\n     *\n     * @param node The `AstNode` for which to create the path.\n     * @returns a path represented by a `string` that identifies `node` inside its document.\n     * @see AstNodeLocator.getAstNode\n     */\n    getAstNodePath(node: AstNode): string;\n\n    /**\n     * Locates an `AstNode` inside another node by following the given path.\n     *\n     * @param node Parent element.\n     * @param path Describes how to locate the `AstNode` inside the given `node`.\n     * @returns The `AstNode` located under the given path, or `undefined` if the path cannot be resolved.\n     * @see AstNodeLocator.getAstNodePath\n     */\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined;\n\n}\n\nexport class DefaultAstNodeLocator implements AstNodeLocator {\n    protected segmentSeparator = '/';\n    protected indexSeparator = '@';\n\n    getAstNodePath(node: AstNode): string {\n        if (node.$container) {\n            const containerPath = this.getAstNodePath(node.$container);\n            const newSegment = this.getPathSegment(node);\n            const nodePath = containerPath + this.segmentSeparator + newSegment;\n            return nodePath;\n        }\n        return '';\n    }\n\n    protected getPathSegment({ $containerProperty, $containerIndex }: AstNode): string {\n        if (!$containerProperty) {\n            throw new Error(\"Missing '$containerProperty' in AST node.\");\n        }\n        if ($containerIndex !== undefined) {\n            return $containerProperty + this.indexSeparator + $containerIndex;\n        }\n        return $containerProperty;\n    }\n\n    getAstNode<T extends AstNode = AstNode>(node: AstNode, path: string): T | undefined {\n        const segments = path.split(this.segmentSeparator);\n        return segments.reduce((previousValue, currentValue) => {\n            if (!previousValue || currentValue.length === 0) {\n                return previousValue;\n            }\n            const propertyIndex = currentValue.indexOf(this.indexSeparator);\n            if (propertyIndex > 0) {\n                const property = currentValue.substring(0, propertyIndex);\n                const arrayIndex = parseInt(currentValue.substring(propertyIndex + 1));\n                const array = (previousValue as unknown as Record<string, AstNode[]>)[property];\n                return array?.[arrayIndex];\n            }\n            return (previousValue as unknown as Record<string, AstNode>)[currentValue];\n        }, node) as T;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ConfigurationItem, DidChangeConfigurationParams, DidChangeConfigurationRegistrationOptions, InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { Deferred } from '../utils/promise-utils.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nexport interface ConfigurationProvider {\n\n    /**\n     * A promise that resolves when the configuration provider is ready to be used.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: ConfigurationInitializedParams): Promise<void>;\n\n    /**\n     * Returns a configuration value stored for the given language.\n     *\n     * @param language The language id\n     * @param configuration Configuration name\n     */\n    getConfiguration(language: string, configuration: string): Promise<any>;\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void;\n}\n\nexport interface ConfigurationInitializedParams extends InitializedParams {\n    register?: (params: DidChangeConfigurationRegistrationOptions) => void,\n    fetchConfiguration?: (configuration: ConfigurationItem[]) => Promise<any>\n}\n\n/**\n * Base configuration provider for building up other configuration providers\n */\nexport class DefaultConfigurationProvider implements ConfigurationProvider {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly _ready = new Deferred<void>();\n    protected settings: Record<string, Record<string, any>> = {};\n    protected workspaceConfig = false;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.workspaceConfig = params.capabilities.workspace?.configuration ?? false;\n    }\n\n    async initialized(params: ConfigurationInitializedParams): Promise<void> {\n        if (this.workspaceConfig) {\n            if (params.register) {\n                // params.register(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n\n                const languages = this.serviceRegistry.all;\n                params.register({\n                    // Listen to configuration changes for all languages\n                    section: languages.map(lang => this.toSectionName(lang.LanguageMetaData.languageId))\n                });\n            }\n\n            if (params.fetchConfiguration) {\n                // params.fetchConfiguration(...) is a function to be provided by the calling language server for the sake of\n                //  decoupling this implementation from the concrete LSP implementations, specifically the LSP Connection\n                const configToUpdate = this.serviceRegistry.all.map(lang => <ConfigurationItem>{\n                    // Fetch the configuration changes for all languages\n                    section: this.toSectionName(lang.LanguageMetaData.languageId)\n                });\n\n                // get workspace configurations (default scope URI)\n                const configs = await params.fetchConfiguration(configToUpdate);\n                configToUpdate.forEach((conf, idx) => {\n                    this.updateSectionConfiguration(conf.section!, configs[idx]);\n                });\n            }\n        }\n        this._ready.resolve();\n    }\n\n    /**\n     *  Updates the cached configurations using the `change` notification parameters.\n     *\n     * @param change The parameters of a change configuration notification.\n     * `settings` property of the change object could be expressed as `Record<string, Record<string, any>>`\n     */\n    updateConfiguration(change: DidChangeConfigurationParams): void {\n        if (!change.settings) {\n            return;\n        }\n        Object.keys(change.settings).forEach(section => {\n            this.updateSectionConfiguration(section, change.settings[section]);\n        });\n    }\n\n    protected updateSectionConfiguration(section: string, configuration: any): void {\n        this.settings[section] = configuration;\n    }\n\n    /**\n    * Returns a configuration value stored for the given language.\n    *\n    * @param language The language id\n    * @param configuration Configuration name\n    */\n    async getConfiguration(language: string, configuration: string): Promise<any> {\n        await this.ready;\n\n        const sectionName = this.toSectionName(language);\n        if (this.settings[sectionName]) {\n            return this.settings[sectionName][configuration];\n        }\n    }\n\n    protected toSectionName(languageId: string): string {\n        return `${languageId}`;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Disposable } from '../utils/disposable.js';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { MaybePromise } from '../utils/promise-utils.js';\nimport type { Deferred } from '../utils/promise-utils.js';\nimport type { ValidationOptions } from '../validation/document-validator.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { LangiumDocument, LangiumDocuments, LangiumDocumentFactory } from './documents.js';\nimport { MultiMap } from '../utils/collections.js';\nimport { OperationCancelled, interruptAndCheck } from '../utils/promise-utils.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { ValidationCategory } from '../validation/validation-registry.js';\nimport { DocumentState } from './documents.js';\n\nexport interface BuildOptions {\n    /**\n     * Control the validation phase with this option:\n     *  - `true` enables all validation checks and forces revalidating the documents\n     *  - `false` or `undefined` disables all validation checks\n     *  - An object runs only the necessary validation checks; the `categories` property restricts this to a specific subset\n     */\n    validation?: boolean | ValidationOptions\n}\n\nexport interface DocumentBuildState {\n    /** Whether a document has completed its last build process. */\n    completed: boolean\n    /** The options used for the last build process. */\n    options: BuildOptions\n    /** Additional information about the last build result. */\n    result?: {\n        validationChecks?: ValidationCategory[]\n    }\n}\n\n/**\n * Shared-service for building and updating `LangiumDocument`s.\n */\nexport interface DocumentBuilder {\n\n    /** The options used for rebuilding documents after an update. */\n    updateBuildOptions: BuildOptions;\n\n    /**\n     * Execute all necessary build steps for the given documents.\n     *\n     * @param documents Set of documents to be built.\n     * @param options Options for the document builder.\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options?: BuildOptions, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * This method is called when a document change is detected. It updates the state of all\n     * affected documents, including those with references to the changed ones, so they are rebuilt.\n     *\n     * @param changed URIs of changed or created documents\n     * @param deleted URIs of deleted documents\n     * @param cancelToken allows to cancel the current operation\n     * @throws `OperationCancelled` if cancellation is detected during execution\n     */\n    update(changed: URI[], deleted: URI[], cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Notify the given callback when a document update was triggered, but before any document\n     * is rebuilt. Listeners to this event should not perform any long-running task.\n     */\n    onUpdate(callback: DocumentUpdateListener): Disposable;\n\n    /**\n     * Notify the given callback when a set of documents has been built reaching a desired target state.\n     */\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable;\n\n    /**\n     * Wait until the workspace has reached the specified state for all documents.\n     *\n     * @param state The desired state. The promise won't resolve until all documents have reached this state\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Wait until the document specified by the {@link uri} has reached the specified state.\n     *\n     * @param state The desired state. The promise won't resolve until the document has reached this state.\n     * @param uri The specified URI that points to the document. If the URI does not exist, the promise will resolve once the workspace has reached the specified state.\n     * @param cancelToken Optionally allows to cancel the wait operation, disposing any listeners in the process.\n     * @return The URI of the document that has reached the desired state, or `undefined` if the document does not exist.\n     * @throws `OperationCancelled` if cancellation has been requested before the state has been reached\n     */\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n}\n\nexport type DocumentUpdateListener = (changed: URI[], deleted: URI[]) => void | Promise<void>\nexport type DocumentBuildListener = (built: LangiumDocument[], cancelToken: CancellationToken) => void | Promise<void>\nexport class DefaultDocumentBuilder implements DocumentBuilder {\n\n    updateBuildOptions: BuildOptions = {\n        // Default: run only the built-in validation checks and those in the _fast_ category (includes those without category)\n        validation: {\n            categories: ['built-in', 'fast']\n        }\n    };\n\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly langiumDocumentFactory: LangiumDocumentFactory;\n    protected readonly indexManager: IndexManager;\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly updateListeners: DocumentUpdateListener[] = [];\n    protected readonly buildPhaseListeners = new MultiMap<DocumentState, DocumentBuildListener>();\n    protected readonly buildState = new Map<string, DocumentBuildState>();\n    protected readonly documentBuildWaiters = new Map<string, Deferred<void>>();\n    protected currentState = DocumentState.Changed;\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.langiumDocumentFactory = services.workspace.LangiumDocumentFactory;\n        this.indexManager = services.workspace.IndexManager;\n        this.serviceRegistry = services.ServiceRegistry;\n    }\n\n    async build<T extends AstNode>(documents: Array<LangiumDocument<T>>, options: BuildOptions = {}, cancelToken = CancellationToken.None): Promise<void> {\n        for (const document of documents) {\n            const key = document.uri.toString();\n            if (document.state === DocumentState.Validated) {\n                if (typeof options.validation === 'boolean' && options.validation) {\n                    // Force re-running all validation checks\n                    document.state = DocumentState.IndexedReferences;\n                    document.diagnostics = undefined;\n                    this.buildState.delete(key);\n                } else if (typeof options.validation === 'object') {\n                    const buildState = this.buildState.get(key);\n                    const previousCategories = buildState?.result?.validationChecks;\n                    if (previousCategories) {\n                        // Validation with explicit options was requested for a document that has already been partly validated.\n                        // In this case, we need to merge the previous validation categories with the new ones.\n                        const newCategories = options.validation.categories ?? ValidationCategory.all as ValidationCategory[];\n                        const categories = newCategories.filter(c => !previousCategories.includes(c));\n                        if (categories.length > 0) {\n                            this.buildState.set(key, {\n                                completed: false,\n                                options: {\n                                    validation: {\n                                        ...options.validation,\n                                        categories\n                                    }\n                                },\n                                result: buildState.result\n                            });\n                            document.state = DocumentState.IndexedReferences;\n                        }\n                    }\n                }\n            } else {\n                // Default: forget any previous build options\n                this.buildState.delete(key);\n            }\n        }\n        this.currentState = DocumentState.Changed;\n        await this.emitUpdate(documents.map(e => e.uri), []);\n        await this.buildDocuments(documents, options, cancelToken);\n    }\n\n    async update(changed: URI[], deleted: URI[], cancelToken = CancellationToken.None): Promise<void> {\n        this.currentState = DocumentState.Changed;\n        // Remove all metadata of documents that are reported as deleted\n        for (const deletedUri of deleted) {\n            this.langiumDocuments.deleteDocument(deletedUri);\n            this.buildState.delete(deletedUri.toString());\n            this.indexManager.remove(deletedUri);\n        }\n        // Set the state of all changed documents to `Changed` so they are completely rebuilt\n        for (const changedUri of changed) {\n            const invalidated = this.langiumDocuments.invalidateDocument(changedUri);\n            if (!invalidated) {\n                // We create an unparsed, invalid document.\n                // This will be parsed as soon as we reach the first document builder phase.\n                // This allows to cancel the parsing process later in case we need it.\n                const newDocument = this.langiumDocumentFactory.fromModel({ $type: 'INVALID' }, changedUri);\n                newDocument.state = DocumentState.Changed;\n                this.langiumDocuments.addDocument(newDocument);\n            }\n            this.buildState.delete(changedUri.toString());\n        }\n        // Set the state of all documents that should be relinked to `ComputedScopes` (if not already lower)\n        const allChangedUris = stream(changed).concat(deleted).map(uri => uri.toString()).toSet();\n        this.langiumDocuments.all\n            .filter(doc => !allChangedUris.has(doc.uri.toString()) && this.shouldRelink(doc, allChangedUris))\n            .forEach(doc => {\n                const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n                linker.unlink(doc);\n                doc.state = Math.min(doc.state, DocumentState.ComputedScopes);\n                doc.diagnostics = undefined;\n            });\n        // Notify listeners of the update\n        await this.emitUpdate(changed, deleted);\n        // Only allow interrupting the execution after all state changes are done\n        await interruptAndCheck(cancelToken);\n\n        // Collect all documents that we should rebuild\n        const rebuildDocuments = this.langiumDocuments.all\n            .filter(doc =>\n                // This includes those that were reported as changed and those that we selected for relinking\n                doc.state < DocumentState.Linked\n                // This includes those for which a previous build has been cancelled\n                || !this.buildState.get(doc.uri.toString())?.completed\n            )\n            .toArray();\n        await this.buildDocuments(rebuildDocuments, this.updateBuildOptions, cancelToken);\n    }\n\n    protected async emitUpdate(changed: URI[], deleted: URI[]): Promise<void> {\n        await Promise.all(this.updateListeners.map(listener => listener(changed, deleted)));\n    }\n\n    /**\n     * Check whether the given document should be relinked after changes were found in the given URIs.\n     */\n    protected shouldRelink(document: LangiumDocument, changedUris: Set<string>): boolean {\n        // Relink documents with linking errors -- maybe those references can be resolved now\n        if (document.references.some(ref => ref.error !== undefined)) {\n            return true;\n        }\n        // Check whether the document is affected by any of the changed URIs\n        return this.indexManager.isAffected(document, changedUris);\n    }\n\n    onUpdate(callback: DocumentUpdateListener): Disposable {\n        this.updateListeners.push(callback);\n        return Disposable.create(() => {\n            const index = this.updateListeners.indexOf(callback);\n            if (index >= 0) {\n                this.updateListeners.splice(index, 1);\n            }\n        });\n    }\n\n    /**\n     * Build the given documents by stepping through all build phases. If a document's state indicates\n     * that a certain build phase is already done, the phase is skipped for that document.\n     */\n    protected async buildDocuments(documents: LangiumDocument[], options: BuildOptions, cancelToken: CancellationToken): Promise<void> {\n        this.prepareBuild(documents, options);\n        // 0. Parse content\n        await this.runCancelable(documents, DocumentState.Parsed, cancelToken, doc =>\n            this.langiumDocumentFactory.update(doc, cancelToken)\n        );\n        // 1. Index content\n        await this.runCancelable(documents, DocumentState.IndexedContent, cancelToken, doc =>\n            this.indexManager.updateContent(doc, cancelToken)\n        );\n        // 2. Compute scopes\n        await this.runCancelable(documents, DocumentState.ComputedScopes, cancelToken, async doc => {\n            const scopeComputation = this.serviceRegistry.getServices(doc.uri).references.ScopeComputation;\n            doc.precomputedScopes = await scopeComputation.computeLocalScopes(doc, cancelToken);\n        });\n        // 3. Linking\n        await this.runCancelable(documents, DocumentState.Linked, cancelToken, doc => {\n            const linker = this.serviceRegistry.getServices(doc.uri).references.Linker;\n            return linker.link(doc, cancelToken);\n        });\n        // 4. Index references\n        await this.runCancelable(documents, DocumentState.IndexedReferences, cancelToken, doc =>\n            this.indexManager.updateReferences(doc, cancelToken)\n        );\n        // 5. Validation\n        const toBeValidated = documents.filter(doc => this.shouldValidate(doc));\n        await this.runCancelable(toBeValidated, DocumentState.Validated, cancelToken, doc =>\n            this.validate(doc, cancelToken)\n        );\n\n        // If we've made it to this point without being cancelled, we can mark the build state as completed.\n        for (const doc of documents) {\n            const state = this.buildState.get(doc.uri.toString());\n            if (state) {\n                state.completed = true;\n            }\n        }\n    }\n\n    protected prepareBuild(documents: LangiumDocument[], options: BuildOptions): void {\n        for (const doc of documents) {\n            const key = doc.uri.toString();\n            const state = this.buildState.get(key);\n            // If the document has no previous build state, we set it. If it has one, but it's already marked\n            // as completed, we overwrite it. If the previous build was not completed, we keep its state\n            // and continue where it was cancelled.\n            if (!state || state.completed) {\n                this.buildState.set(key, {\n                    completed: false,\n                    options,\n                    result: state?.result\n                });\n            }\n        }\n    }\n\n    protected async runCancelable(documents: LangiumDocument[], targetState: DocumentState, cancelToken: CancellationToken,\n        callback: (document: LangiumDocument) => MaybePromise<unknown>): Promise<void> {\n        const filtered = documents.filter(e => e.state < targetState);\n        for (const document of filtered) {\n            await interruptAndCheck(cancelToken);\n            await callback(document);\n            document.state = targetState;\n        }\n        await this.notifyBuildPhase(filtered, targetState, cancelToken);\n        this.currentState = targetState;\n    }\n\n    onBuildPhase(targetState: DocumentState, callback: DocumentBuildListener): Disposable {\n        this.buildPhaseListeners.add(targetState, callback);\n        return Disposable.create(() => {\n            this.buildPhaseListeners.delete(targetState, callback);\n        });\n    }\n\n    waitUntil(state: DocumentState, cancelToken?: CancellationToken): Promise<void>;\n    waitUntil(state: DocumentState, uri?: URI, cancelToken?: CancellationToken): Promise<URI | undefined>;\n    waitUntil(state: DocumentState, uriOrToken?: URI | CancellationToken, cancelToken?: CancellationToken): Promise<URI | undefined | void> {\n        let uri: URI | undefined = undefined;\n        if (uriOrToken && 'path' in uriOrToken) {\n            uri = uriOrToken;\n        } else {\n            cancelToken = uriOrToken;\n        }\n        cancelToken ??= CancellationToken.None;\n        if (uri) {\n            const document = this.langiumDocuments.getDocument(uri);\n            if (document && document.state > state) {\n                return Promise.resolve(uri);\n            }\n        }\n        if (this.currentState >= state) {\n            return Promise.resolve(undefined);\n        } else if (cancelToken.isCancellationRequested) {\n            return Promise.reject(OperationCancelled);\n        }\n        return new Promise((resolve, reject) => {\n            const buildDisposable = this.onBuildPhase(state, () => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                if (uri) {\n                    const document = this.langiumDocuments.getDocument(uri);\n                    resolve(document?.uri);\n                } else {\n                    resolve(undefined);\n                }\n            });\n            const cancelDisposable = cancelToken!.onCancellationRequested(() => {\n                buildDisposable.dispose();\n                cancelDisposable.dispose();\n                reject(OperationCancelled);\n            });\n        });\n    }\n\n    protected async notifyBuildPhase(documents: LangiumDocument[], state: DocumentState, cancelToken: CancellationToken): Promise<void> {\n        if (documents.length === 0) {\n            // Don't notify when no document has been processed\n            return;\n        }\n        const listeners = this.buildPhaseListeners.get(state);\n        for (const listener of listeners) {\n            await interruptAndCheck(cancelToken);\n            await listener(documents, cancelToken);\n        }\n    }\n\n    /**\n     * Determine whether the given document should be validated during a build. The default\n     * implementation checks the `validation` property of the build options. If it's set to `true`\n     * or a `ValidationOptions` object, the document is included in the validation phase.\n     */\n    protected shouldValidate(document: LangiumDocument): boolean {\n        return Boolean(this.getBuildOptions(document).validation);\n    }\n\n    /**\n     * Run validation checks on the given document and store the resulting diagnostics in the document.\n     * If the document already contains diagnostics, the new ones are added to the list.\n     */\n    protected async validate(document: LangiumDocument, cancelToken: CancellationToken): Promise<void> {\n        const validator = this.serviceRegistry.getServices(document.uri).validation.DocumentValidator;\n        const validationSetting = this.getBuildOptions(document).validation;\n        const options = typeof validationSetting === 'object' ? validationSetting : undefined;\n        const diagnostics = await validator.validateDocument(document, options, cancelToken);\n        if (document.diagnostics) {\n            document.diagnostics.push(...diagnostics);\n        } else {\n            document.diagnostics = diagnostics;\n        }\n\n        // Store information about the executed validation in the build state\n        const state = this.buildState.get(document.uri.toString());\n        if (state) {\n            state.result ??= {};\n            const newCategories = options?.categories ?? ValidationCategory.all;\n            if (state.result.validationChecks) {\n                state.result.validationChecks.push(...newCategories);\n            } else {\n                state.result.validationChecks = [...newCategories];\n            }\n        }\n    }\n\n    protected getBuildOptions(document: LangiumDocument): BuildOptions {\n        return this.buildState.get(document.uri.toString())?.options ?? {};\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription, AstReflection } from '../syntax-tree.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { ContextCache } from '../utils/caching.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport type { Stream } from '../utils/stream.js';\nimport { stream } from '../utils/stream.js';\nimport type { URI } from '../utils/uri-utils.js';\nimport { UriUtils } from '../utils/uri-utils.js';\nimport type { ReferenceDescription } from './ast-descriptions.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\n\n/**\n * The index manager is responsible for keeping metadata about symbols and cross-references\n * in the workspace. It is used to look up symbols in the global scope, mostly during linking\n * and completion. This service is shared between all languages of a language server.\n */\nexport interface IndexManager {\n\n    /**\n     * Removes the specified document URI from the index.\n     * Necessary when documents are deleted and not referenceable anymore.\n     *\n     * @param uri The URI of the document for which index data shall be removed\n     */\n    remove(uri: URI): void;\n\n    /**\n     * Updates the information about the exportable content of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateContent(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Updates the information about the cross-references of a document inside the index.\n     *\n     * @param document Document to be updated\n     * @param cancelToken Indicates when to cancel the current operation.\n     * @throws `OperationCanceled` if a user action occurs during execution\n     */\n    updateReferences(document: LangiumDocument, cancelToken?: CancellationToken): Promise<void>;\n\n    /**\n     * Determine whether the given document could be affected by changes of the documents\n     * identified by the given URIs (second parameter). The document is typically regarded as\n     * affected if it contains a reference to any of the changed files.\n     *\n     * @param document Document to check whether it's affected\n     * @param changedUris URIs of the changed documents\n     */\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean;\n\n    /**\n     * Compute a list of all exported elements, optionally filtered using a type identifier and document URIs.\n     *\n     * @param nodeType The type to filter with, or `undefined` to return descriptions of all types.\n     * @param uris If specified, only returns elements from the given URIs.\n     * @returns a `Stream` containing all globally visible nodes (of a given type).\n     */\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription>;\n\n    /**\n     * Returns all known references that are pointing to the given `targetNode`.\n     *\n     * @param targetNode the `AstNode` to look up references for\n     * @param astNodePath the path that points to the `targetNode` inside the document. See also `AstNodeLocator`\n     *\n     * @returns a `Stream` of references that are targeting the `targetNode`\n     */\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription>;\n\n}\n\nexport class DefaultIndexManager implements IndexManager {\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly documents: LangiumDocuments;\n    protected readonly astReflection: AstReflection;\n\n    /**\n     * The symbol index stores all `AstNodeDescription` items exported by a document.\n     * The key used in this map is the string representation of the specific document URI.\n     */\n    protected readonly symbolIndex = new Map<string, AstNodeDescription[]>();\n    /**\n     * This is a cache for the `allElements()` method.\n     * It caches the descriptions from `symbolIndex` grouped by types.\n     */\n    protected readonly symbolByTypeIndex = new ContextCache<string, string, AstNodeDescription[]>();\n    /**\n     * This index keeps track of all `ReferenceDescription` items exported by a document.\n     * This is used to compute which elements are affected by a document change\n     * and for finding references to an AST node.\n     */\n    protected readonly referenceIndex = new Map<string, ReferenceDescription[]>();\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.documents = services.workspace.LangiumDocuments;\n        this.serviceRegistry = services.ServiceRegistry;\n        this.astReflection = services.AstReflection;\n    }\n\n    findAllReferences(targetNode: AstNode, astNodePath: string): Stream<ReferenceDescription> {\n        const targetDocUri = getDocument(targetNode).uri;\n        const result: ReferenceDescription[] = [];\n        this.referenceIndex.forEach(docRefs => {\n            docRefs.forEach(refDescr => {\n                if (UriUtils.equals(refDescr.targetUri, targetDocUri) && refDescr.targetPath === astNodePath) {\n                    result.push(refDescr);\n                }\n            });\n        });\n        return stream(result);\n    }\n\n    allElements(nodeType?: string, uris?: Set<string>): Stream<AstNodeDescription> {\n        let documentUris = stream(this.symbolIndex.keys());\n        if (uris) {\n            documentUris = documentUris.filter(uri => !uris || uris.has(uri));\n        }\n        return documentUris\n            .map(uri => this.getFileDescriptions(uri, nodeType))\n            .flat();\n    }\n\n    protected getFileDescriptions(uri: string, nodeType?: string): AstNodeDescription[] {\n        if (!nodeType) {\n            return this.symbolIndex.get(uri) ?? [];\n        }\n        const descriptions = this.symbolByTypeIndex.get(uri, nodeType, () => {\n            const allFileDescriptions = this.symbolIndex.get(uri) ?? [];\n            return allFileDescriptions.filter(e => this.astReflection.isSubtype(e.type, nodeType));\n        });\n        return descriptions;\n    }\n\n    remove(uri: URI): void {\n        const uriString = uri.toString();\n        this.symbolIndex.delete(uriString);\n        this.symbolByTypeIndex.clear(uriString);\n        this.referenceIndex.delete(uriString);\n    }\n\n    async updateContent(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const exports = await services.references.ScopeComputation.computeExports(document, cancelToken);\n        const uri = document.uri.toString();\n        this.symbolIndex.set(uri, exports);\n        this.symbolByTypeIndex.clear(uri);\n    }\n\n    async updateReferences(document: LangiumDocument, cancelToken = CancellationToken.None): Promise<void> {\n        const services = this.serviceRegistry.getServices(document.uri);\n        const indexData = await services.workspace.ReferenceDescriptionProvider.createDescriptions(document, cancelToken);\n        this.referenceIndex.set(document.uri.toString(), indexData);\n    }\n\n    isAffected(document: LangiumDocument, changedUris: Set<string>): boolean {\n        const references = this.referenceIndex.get(document.uri.toString());\n        if (!references) {\n            return false;\n        }\n        return references.some(ref => !ref.local && changedUris.has(ref.targetUri.toString()));\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { InitializeParams, InitializedParams } from 'vscode-languageserver-protocol';\nimport type { WorkspaceFolder } from 'vscode-languageserver-types';\nimport type { ServiceRegistry } from '../service-registry.js';\nimport type { LangiumSharedCoreServices } from '../services.js';\nimport { CancellationToken } from '../utils/cancellation.js';\nimport { Deferred, interruptAndCheck } from '../utils/promise-utils.js';\nimport { URI, UriUtils } from '../utils/uri-utils.js';\nimport type { BuildOptions, DocumentBuilder } from './document-builder.js';\nimport type { LangiumDocument, LangiumDocuments } from './documents.js';\nimport type { FileSystemNode, FileSystemProvider } from './file-system-provider.js';\nimport type { WorkspaceLock } from './workspace-lock.js';\n\n// export type WorkspaceFolder from 'vscode-languageserver-types' for convenience,\n//  is supposed to avoid confusion as 'WorkspaceFolder' might accidentally be imported via 'vscode-languageclient'\nexport type { WorkspaceFolder };\n\n/**\n * The workspace manager is responsible for finding source files in the workspace.\n * This service is shared between all languages of a language server.\n */\nexport interface WorkspaceManager {\n\n    /** The options used for the initial workspace build. */\n    initialBuildOptions: BuildOptions | undefined;\n\n    /**\n     * A promise that resolves when the workspace manager is ready to be used.\n     * Use this to ensure that the workspace manager has finished its initialization.\n     */\n    readonly ready: Promise<void>;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialize` request.\n     */\n    initialize(params: InitializeParams): void;\n\n    /**\n     * When used in a language server context, this method is called when the server receives\n     * the `initialized` notification.\n     */\n    initialized(params: InitializedParams): Promise<void>;\n\n    /**\n     * Does the initial indexing of workspace folders.\n     * Collects information about exported and referenced AstNodes in\n     * each language file and stores it locally.\n     *\n     * @param folders The set of workspace folders to be indexed.\n     */\n    initializeWorkspace(folders: WorkspaceFolder[], cancelToken?: CancellationToken): Promise<void>;\n\n}\n\nexport class DefaultWorkspaceManager implements WorkspaceManager {\n\n    initialBuildOptions: BuildOptions = {};\n\n    protected readonly serviceRegistry: ServiceRegistry;\n    protected readonly langiumDocuments: LangiumDocuments;\n    protected readonly documentBuilder: DocumentBuilder;\n    protected readonly fileSystemProvider: FileSystemProvider;\n    protected readonly mutex: WorkspaceLock;\n    protected readonly _ready = new Deferred<void>();\n    protected folders?: WorkspaceFolder[];\n\n    constructor(services: LangiumSharedCoreServices) {\n        this.serviceRegistry = services.ServiceRegistry;\n        this.langiumDocuments = services.workspace.LangiumDocuments;\n        this.documentBuilder = services.workspace.DocumentBuilder;\n        this.fileSystemProvider = services.workspace.FileSystemProvider;\n        this.mutex = services.workspace.WorkspaceLock;\n    }\n\n    get ready(): Promise<void> {\n        return this._ready.promise;\n    }\n\n    initialize(params: InitializeParams): void {\n        this.folders = params.workspaceFolders ?? undefined;\n    }\n\n    initialized(_params: InitializedParams): Promise<void> {\n        // Initialize the workspace even if there are no workspace folders\n        // We still want to load additional documents (language library or similar) during initialization\n        return this.mutex.write(token => this.initializeWorkspace(this.folders ?? [], token));\n    }\n\n    async initializeWorkspace(folders: WorkspaceFolder[], cancelToken = CancellationToken.None): Promise<void> {\n        const documents = await this.performStartup(folders);\n        // Only after creating all documents do we check whether we need to cancel the initialization\n        // The document builder will later pick up on all unprocessed documents\n        await interruptAndCheck(cancelToken);\n        await this.documentBuilder.build(documents, this.initialBuildOptions, cancelToken);\n    }\n\n    /**\n     * Performs the uninterruptable startup sequence of the workspace manager.\n     * This methods loads all documents in the workspace and other documents and returns them.\n     */\n    protected async performStartup(folders: WorkspaceFolder[]): Promise<LangiumDocument[]> {\n        const fileExtensions = this.serviceRegistry.all.flatMap(e => e.LanguageMetaData.fileExtensions);\n        const documents: LangiumDocument[] = [];\n        const collector = (document: LangiumDocument) => {\n            documents.push(document);\n            if (!this.langiumDocuments.hasDocument(document.uri)) {\n                this.langiumDocuments.addDocument(document);\n            }\n        };\n        // Even though we don't await the initialization of the workspace manager,\n        // we can still assume that all library documents and file documents are loaded by the time we start building documents.\n        // The mutex prevents anything from performing a workspace build until we check the cancellation token\n        await this.loadAdditionalDocuments(folders, collector);\n        await Promise.all(\n            folders.map(wf => [wf, this.getRootFolder(wf)] as [WorkspaceFolder, URI])\n                .map(async entry => this.traverseFolder(...entry, fileExtensions, collector))\n        );\n        this._ready.resolve();\n        return documents;\n    }\n\n    /**\n     * Load all additional documents that shall be visible in the context of the given workspace\n     * folders and add them to the collector. This can be used to include built-in libraries of\n     * your language, which can be either loaded from provided files or constructed in memory.\n     */\n    protected loadAdditionalDocuments(_folders: WorkspaceFolder[], _collector: (document: LangiumDocument) => void): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Determine the root folder of the source documents in the given workspace folder.\n     * The default implementation returns the URI of the workspace folder, but you can override\n     * this to return a subfolder like `src` instead.\n     */\n    protected getRootFolder(workspaceFolder: WorkspaceFolder): URI {\n        return URI.parse(workspaceFolder.uri);\n    }\n\n    /**\n     * Traverse the file system folder identified by the given URI and its subfolders. All\n     * contained files that match the file extensions are added to the collector.\n     */\n    protected async traverseFolder(workspaceFolder: WorkspaceFolder, folderPath: URI, fileExtensions: string[], collector: (document: LangiumDocument) => void): Promise<void> {\n        const content = await this.fileSystemProvider.readDirectory(folderPath);\n        await Promise.all(content.map(async entry => {\n            if (this.includeEntry(workspaceFolder, entry, fileExtensions)) {\n                if (entry.isDirectory) {\n                    await this.traverseFolder(workspaceFolder, entry.uri, fileExtensions, collector);\n                } else if (entry.isFile) {\n                    const document = await this.langiumDocuments.getOrCreateDocument(entry.uri);\n                    collector(document);\n                }\n            }\n        }));\n    }\n\n    /**\n     * Determine whether the given folder entry shall be included while indexing the workspace.\n     */\n    protected includeEntry(_workspaceFolder: WorkspaceFolder, entry: FileSystemNode, fileExtensions: string[]): boolean {\n        const name = UriUtils.basename(entry.uri);\n        if (name.startsWith('.')) {\n            return false;\n        }\n        if (entry.isDirectory) {\n            return name !== 'node_modules' && name !== 'out';\n        } else if (entry.isFile) {\n            const extname = UriUtils.extname(entry.uri);\n            return fileExtensions.includes(extname);\n        }\n        return false;\n    }\n\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { ILexingError, IMultiModeLexerDefinition, IToken, TokenType, TokenTypeDictionary, TokenVocabulary } from 'chevrotain';\nimport type { LangiumCoreServices } from '../services.js';\nimport { Lexer as ChevrotainLexer } from 'chevrotain';\n\nexport interface LexerResult {\n    /**\n     * A list of all tokens that were lexed from the input.\n     *\n     * Note that Langium requires the optional properties\n     * `startLine`, `startColumn`, `endOffset`, `endLine` and `endColumn` to be set on each token.\n     */\n    tokens: IToken[];\n    /**\n     * Contains hidden tokens, usually comments.\n     */\n    hidden: IToken[];\n    errors: ILexingError[];\n}\n\nexport interface Lexer {\n    readonly definition: TokenTypeDictionary;\n    tokenize(text: string): LexerResult;\n}\n\nexport class DefaultLexer implements Lexer {\n\n    protected chevrotainLexer: ChevrotainLexer;\n    protected tokenTypes: TokenTypeDictionary;\n\n    constructor(services: LangiumCoreServices) {\n        const tokens = services.parser.TokenBuilder.buildTokens(services.Grammar, {\n            caseInsensitive: services.LanguageMetaData.caseInsensitive\n        });\n        this.tokenTypes = this.toTokenTypeDictionary(tokens);\n        const lexerTokens = isTokenTypeDictionary(tokens) ? Object.values(tokens) : tokens;\n        this.chevrotainLexer = new ChevrotainLexer(lexerTokens, {\n            positionTracking: 'full'\n        });\n    }\n\n    get definition(): TokenTypeDictionary {\n        return this.tokenTypes;\n    }\n\n    tokenize(text: string): LexerResult {\n        const chevrotainResult = this.chevrotainLexer.tokenize(text);\n        return {\n            tokens: chevrotainResult.tokens,\n            errors: chevrotainResult.errors,\n            hidden: chevrotainResult.groups.hidden ?? []\n        };\n    }\n\n    protected toTokenTypeDictionary(buildTokens: TokenVocabulary): TokenTypeDictionary {\n        if (isTokenTypeDictionary(buildTokens)) return buildTokens;\n        const tokens = isIMultiModeLexerDefinition(buildTokens) ? Object.values(buildTokens.modes).flat() : buildTokens;\n        const res: TokenTypeDictionary = {};\n        tokens.forEach(token => res[token.name] = token);\n        return res;\n    }\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenType array\n */\nexport function isTokenTypeArray(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenType[] {\n    return Array.isArray(tokenVocabulary) && (tokenVocabulary.length === 0 || 'name' in tokenVocabulary[0]);\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is IMultiModeLexerDefinition\n */\nexport function isIMultiModeLexerDefinition(tokenVocabulary: TokenVocabulary): tokenVocabulary is IMultiModeLexerDefinition {\n    return tokenVocabulary && 'modes' in tokenVocabulary && 'defaultMode' in tokenVocabulary;\n}\n\n/**\n * Returns a check whether the given TokenVocabulary is TokenTypeDictionary\n */\nexport function isTokenTypeDictionary(tokenVocabulary: TokenVocabulary): tokenVocabulary is TokenTypeDictionary {\n    return !isTokenTypeArray(tokenVocabulary) && !isIMultiModeLexerDefinition(tokenVocabulary);\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { Position, Range } from 'vscode-languageserver-types';\nimport type { CstNode } from '../syntax-tree.js';\nimport { NEWLINE_REGEXP, escapeRegExp } from '../utils/regexp-utils.js';\nimport { URI } from '../utils/uri-utils.js';\n\nexport interface JSDocComment extends JSDocValue {\n    readonly elements: JSDocElement[]\n    getTag(name: string): JSDocTag | undefined\n    getTags(name: string): JSDocTag[]\n}\n\nexport type JSDocElement = JSDocParagraph | JSDocTag;\n\nexport type JSDocInline = JSDocTag | JSDocLine;\n\nexport interface JSDocValue {\n    /**\n     * Represents the range that this JSDoc element occupies.\n     * If the JSDoc was parsed from a `CstNode`, the range will represent the location in the source document.\n     */\n    readonly range: Range\n    /**\n     * Renders this JSDoc element to a plain text representation.\n     */\n    toString(): string\n    /**\n     * Renders this JSDoc element to a markdown representation.\n     *\n     * @param options Rendering options to customize the markdown result.\n     */\n    toMarkdown(options?: JSDocRenderOptions): string\n}\n\nexport interface JSDocParagraph extends JSDocValue {\n    readonly inlines: JSDocInline[]\n}\n\nexport interface JSDocLine extends JSDocValue {\n    readonly text: string\n}\n\nexport interface JSDocTag extends JSDocValue {\n    readonly name: string\n    readonly content: JSDocParagraph\n    readonly inline: boolean\n}\n\nexport interface JSDocParseOptions {\n    /**\n     * The start symbol of your comment format. Defaults to `/**`.\n     */\n    readonly start?: RegExp | string\n    /**\n     * The symbol that start a line of your comment format. Defaults to `*`.\n     */\n    readonly line?: RegExp | string\n    /**\n     * The end symbol of your comment format. Defaults to `*\\/`.\n     */\n    readonly end?: RegExp | string\n}\n\nexport interface JSDocRenderOptions {\n    /**\n     * Determines the style for rendering tags. Defaults to `italic`.\n     */\n    tag?: 'plain' | 'italic' | 'bold' | 'bold-italic'\n    /**\n     * Determines the default for rendering `@link` tags. Defaults to `plain`.\n     */\n    link?: 'code' | 'plain'\n    /**\n     * Custom tag rendering function.\n     * Return a markdown formatted tag or `undefined` to fall back to the default rendering.\n     */\n    renderTag?(tag: JSDocTag): string | undefined\n    /**\n     * Custom link rendering function. Accepts a link target and a display value for the link.\n     * Return a markdown formatted link with the format `[$display]($link)` or `undefined` if the link is not a valid target.\n     */\n    renderLink?(link: string, display: string): string | undefined\n}\n\n/**\n * Parses a JSDoc from a `CstNode` containing a comment.\n *\n * @param node A `CstNode` from a parsed Langium document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(node: CstNode, options?: JSDocParseOptions): JSDocComment;\n/**\n * Parses a JSDoc from a string comment.\n *\n * @param content A string containing the source of the JSDoc comment.\n * @param start The start position the comment occupies in the source document.\n * @param options Parsing options specialized to your language. See {@link JSDocParseOptions}.\n */\nexport function parseJSDoc(content: string, start?: Position, options?: JSDocParseOptions): JSDocComment;\nexport function parseJSDoc(node: CstNode | string, start?: Position | JSDocParseOptions, options?: JSDocParseOptions): JSDocComment {\n    let opts: JSDocParseOptions | undefined;\n    let position: Position | undefined;\n    if (typeof node === 'string') {\n        position = start as Position | undefined;\n        opts = options as JSDocParseOptions | undefined;\n    } else {\n        position = node.range.start;\n        opts = start as JSDocParseOptions | undefined;\n    }\n    if (!position) {\n        position = Position.create(0, 0);\n    }\n\n    const lines = getLines(node);\n    const normalizedOptions = normalizeOptions(opts);\n\n    const tokens = tokenize({\n        lines,\n        position,\n        options: normalizedOptions\n    });\n\n    return parseJSDocComment({\n        index: 0,\n        tokens,\n        position\n    });\n}\n\nexport function isJSDoc(node: CstNode | string, options?: JSDocParseOptions): boolean {\n    const normalizedOptions = normalizeOptions(options);\n    const lines = getLines(node);\n    if (lines.length === 0) {\n        return false;\n    }\n\n    const first = lines[0];\n    const last = lines[lines.length - 1];\n    const firstRegex = normalizedOptions.start;\n    const lastRegex = normalizedOptions.end;\n\n    return Boolean(firstRegex?.exec(first)) && Boolean(lastRegex?.exec(last));\n}\n\nfunction getLines(node: CstNode | string): string[] {\n    let content = '';\n    if (typeof node === 'string') {\n        content = node;\n    } else {\n        content = node.text;\n    }\n    const lines = content.split(NEWLINE_REGEXP);\n    return lines;\n}\n\n// Tokenization\n\ninterface JSDocToken {\n    type: 'text' | 'tag' | 'inline-tag' | 'break'\n    content: string\n    range: Range\n}\n\nconst tagRegex = /\\s*(@([\\p{L}][\\p{L}\\p{N}]*)?)/uy;\nconst inlineTagRegex = /\\{(@[\\p{L}][\\p{L}\\p{N}]*)(\\s*)([^\\r\\n}]+)?\\}/gu;\n\nfunction tokenize(context: TokenizationContext): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n    let currentLine = context.position.line;\n    let currentCharacter = context.position.character;\n    for (let i = 0; i < context.lines.length; i++) {\n        const first = i === 0;\n        const last = i === context.lines.length - 1;\n        let line = context.lines[i];\n        let index = 0;\n\n        if (first && context.options.start) {\n            const match = context.options.start?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        } else {\n            const match = context.options.line?.exec(line);\n            if (match) {\n                index = match.index + match[0].length;\n            }\n        }\n        if (last) {\n            const match = context.options.end?.exec(line);\n            if (match) {\n                line = line.substring(0, match.index);\n            }\n        }\n\n        line = line.substring(0, lastCharacter(line));\n        const whitespaceEnd = skipWhitespace(line, index);\n\n        if (whitespaceEnd >= line.length) {\n            // Only create a break token when we already have previous tokens\n            if (tokens.length > 0) {\n                const position = Position.create(currentLine, currentCharacter);\n                tokens.push({\n                    type: 'break',\n                    content: '',\n                    range: Range.create(position, position)\n                });\n            }\n        } else {\n            tagRegex.lastIndex = index;\n            const tagMatch = tagRegex.exec(line);\n            if (tagMatch) {\n                const fullMatch = tagMatch[0];\n                const value = tagMatch[1];\n                const start = Position.create(currentLine, currentCharacter + index);\n                const end = Position.create(currentLine, currentCharacter + index + fullMatch.length);\n                tokens.push({\n                    type: 'tag',\n                    content: value,\n                    range: Range.create(start, end)\n                });\n                index += fullMatch.length;\n                index = skipWhitespace(line, index);\n            }\n\n            if (index < line.length) {\n                const rest = line.substring(index);\n                const inlineTagMatches = Array.from(rest.matchAll(inlineTagRegex));\n                tokens.push(...buildInlineTokens(inlineTagMatches, rest, currentLine, currentCharacter + index));\n            }\n        }\n\n        currentLine++;\n        currentCharacter = 0;\n    }\n\n    // Remove last break token if there is one\n    if (tokens.length > 0 && tokens[tokens.length - 1].type === 'break') {\n        return tokens.slice(0, -1);\n    }\n\n    return tokens;\n}\n\nfunction buildInlineTokens(tags: RegExpMatchArray[], line: string, lineIndex: number, characterIndex: number): JSDocToken[] {\n    const tokens: JSDocToken[] = [];\n\n    if (tags.length === 0) {\n        const start = Position.create(lineIndex, characterIndex);\n        const end = Position.create(lineIndex, characterIndex + line.length);\n        tokens.push({\n            type: 'text',\n            content: line,\n            range: Range.create(start, end)\n        });\n    } else {\n        let lastIndex = 0;\n        for (const match of tags) {\n            const matchIndex = match.index!;\n            const startContent = line.substring(lastIndex, matchIndex);\n            if (startContent.length > 0) {\n                tokens.push({\n                    type: 'text',\n                    content: line.substring(lastIndex, matchIndex),\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + characterIndex),\n                        Position.create(lineIndex, matchIndex + characterIndex)\n                    )\n                });\n            }\n            let offset = startContent.length + 1;\n            const tagName = match[1];\n            tokens.push({\n                type: 'inline-tag',\n                content: tagName,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + offset + characterIndex),\n                    Position.create(lineIndex, lastIndex + offset + tagName.length + characterIndex)\n                )\n            });\n            offset += tagName.length;\n            if (match.length === 4) {\n                offset += match[2].length;\n                const value = match[3];\n                tokens.push({\n                    type: 'text',\n                    content: value,\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + value.length + characterIndex)\n                    )\n                });\n            } else {\n                tokens.push({\n                    type: 'text',\n                    content: '',\n                    range: Range.create(\n                        Position.create(lineIndex, lastIndex + offset + characterIndex),\n                        Position.create(lineIndex, lastIndex + offset + characterIndex)\n                    )\n                });\n            }\n            lastIndex = matchIndex + match[0].length;\n        }\n        const endContent = line.substring(lastIndex);\n        if (endContent.length > 0) {\n            tokens.push({\n                type: 'text',\n                content: endContent,\n                range: Range.create(\n                    Position.create(lineIndex, lastIndex + characterIndex),\n                    Position.create(lineIndex, lastIndex + characterIndex + endContent.length)\n                )\n            });\n        }\n    }\n\n    return tokens;\n}\n\nconst nonWhitespaceRegex = /\\S/;\nconst whitespaceEndRegex = /\\s*$/;\n\nfunction skipWhitespace(line: string, index: number): number {\n    const match = line.substring(index).match(nonWhitespaceRegex);\n    if (match) {\n        return index + match.index!;\n    } else {\n        return line.length;\n    }\n}\n\nfunction lastCharacter(line: string): number | undefined {\n    const match = line.match(whitespaceEndRegex);\n    if (match && typeof match.index === 'number') {\n        return match.index;\n    }\n    return undefined;\n}\n\n// Parsing\n\nfunction parseJSDocComment(context: ParseContext): JSDocComment {\n    const startPosition: Position = Position.create(context.position.line, context.position.character);\n    if (context.tokens.length === 0) {\n        return new JSDocCommentImpl([], Range.create(startPosition, startPosition));\n    }\n    const elements: JSDocElement[] = [];\n    while (context.index < context.tokens.length) {\n        const element = parseJSDocElement(context, elements[elements.length - 1]);\n        if (element) {\n            elements.push(element);\n        }\n    }\n    const start = elements[0]?.range.start ?? startPosition;\n    const end = elements[elements.length - 1]?.range.end ?? startPosition;\n    return new JSDocCommentImpl(elements, Range.create(start, end));\n}\n\nfunction parseJSDocElement(context: ParseContext, last?: JSDocElement): JSDocElement | undefined {\n    const next = context.tokens[context.index];\n    if (next.type === 'tag') {\n        return parseJSDocTag(context, false);\n    } else if (next.type === 'text' || next.type === 'inline-tag') {\n        return parseJSDocText(context);\n    } else {\n        appendEmptyLine(next, last);\n        context.index++;\n        return undefined;\n    }\n}\n\nfunction appendEmptyLine(token: JSDocToken, element?: JSDocElement): void {\n    if (element) {\n        const line = new JSDocLineImpl('', token.range);\n        if ('inlines' in element) {\n            element.inlines.push(line);\n        } else {\n            element.content.inlines.push(line);\n        }\n    }\n}\n\nfunction parseJSDocText(context: ParseContext): JSDocParagraph {\n    let token = context.tokens[context.index];\n    const firstToken = token;\n    let lastToken = token;\n    const lines: JSDocInline[] = [];\n    while (token && token.type !== 'break' && token.type !== 'tag') {\n        lines.push(parseJSDocInline(context));\n        lastToken = token;\n        token = context.tokens[context.index];\n    }\n    return new JSDocTextImpl(lines, Range.create(firstToken.range.start, lastToken.range.end));\n}\n\nfunction parseJSDocInline(context: ParseContext): JSDocInline {\n    const token = context.tokens[context.index];\n    if (token.type === 'inline-tag') {\n        return parseJSDocTag(context, true);\n    } else {\n        return parseJSDocLine(context);\n    }\n}\n\nfunction parseJSDocTag(context: ParseContext, inline: boolean): JSDocTag {\n    const tagToken = context.tokens[context.index++];\n    const name = tagToken.content.substring(1);\n    const nextToken = context.tokens[context.index];\n    if (nextToken?.type === 'text') {\n        if (inline) {\n            const docLine = parseJSDocLine(context);\n            return new JSDocTagImpl(\n                name,\n                new JSDocTextImpl([docLine], docLine.range),\n                inline,\n                Range.create(tagToken.range.start, docLine.range.end)\n            );\n        } else {\n            const textDoc = parseJSDocText(context);\n            return new JSDocTagImpl(\n                name,\n                textDoc,\n                inline,\n                Range.create(tagToken.range.start, textDoc.range.end)\n            );\n        }\n    } else {\n        const range = tagToken.range;\n        return new JSDocTagImpl(name, new JSDocTextImpl([], range), inline, range);\n    }\n}\n\nfunction parseJSDocLine(context: ParseContext): JSDocLine {\n    const token = context.tokens[context.index++];\n    return new JSDocLineImpl(token.content, token.range);\n}\n\ninterface NormalizedOptions {\n    start?: RegExp\n    end?: RegExp\n    line?: RegExp\n}\n\ninterface TokenizationContext {\n    position: Position\n    lines: string[]\n    options: NormalizedOptions\n}\n\ninterface ParseContext {\n    position: Position\n    tokens: JSDocToken[]\n    index: number\n}\n\nfunction normalizeOptions(options?: JSDocParseOptions): NormalizedOptions {\n    if (!options) {\n        return normalizeOptions({\n            start: '/**',\n            end: '*/',\n            line: '*'\n        });\n    }\n    const { start, end, line } = options;\n    return {\n        start: normalizeOption(start, true),\n        end: normalizeOption(end, false),\n        line: normalizeOption(line, true)\n    };\n}\n\nfunction normalizeOption(option: RegExp | string | undefined, start: boolean): RegExp | undefined {\n    if (typeof option === 'string' || typeof option === 'object') {\n        const escaped = typeof option === 'string' ? escapeRegExp(option) : option.source;\n        if (start) {\n            return new RegExp(`^\\\\s*${escaped}`);\n        } else {\n            return new RegExp(`\\\\s*${escaped}\\\\s*$`);\n        }\n    } else {\n        return option;\n    }\n}\n\nclass JSDocCommentImpl implements JSDocComment {\n\n    readonly elements: JSDocElement[];\n    readonly range: Range;\n\n    constructor(elements: JSDocElement[], range: Range) {\n        this.elements = elements;\n        this.range = range;\n    }\n\n    getTag(name: string): JSDocTag | undefined {\n        return this.getAllTags().find(e => e.name === name);\n    }\n\n    getTags(name: string): JSDocTag[] {\n        return this.getAllTags().filter(e => e.name === name);\n    }\n\n    private getAllTags(): JSDocTag[] {\n        return this.elements.filter((e): e is JSDocTag => 'name' in e);\n    }\n\n    toString(): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toString();\n            } else {\n                const text = element.toString();\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let value = '';\n        for (const element of this.elements) {\n            if (value.length === 0) {\n                value = element.toMarkdown(options);\n            } else {\n                const text = element.toMarkdown(options);\n                value += fillNewlines(value) + text;\n            }\n        }\n        return value.trim();\n    }\n}\n\nclass JSDocTagImpl implements JSDocTag {\n    name: string;\n    content: JSDocParagraph;\n    range: Range;\n    inline: boolean;\n\n    constructor(name: string, content: JSDocParagraph, inline: boolean, range: Range) {\n        this.name = name;\n        this.content = content;\n        this.inline = inline;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = `@${this.name}`;\n        const content = this.content.toString();\n        if (this.content.inlines.length === 1) {\n            text = `${text} ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        return options?.renderTag?.(this) ?? this.toMarkdownDefault(options);\n    }\n\n    private toMarkdownDefault(options?: JSDocRenderOptions): string {\n        const content = this.content.toMarkdown(options);\n        if (this.inline) {\n            const rendered = renderInlineTag(this.name, content, options ?? {});\n            if (typeof rendered === 'string') {\n                return rendered;\n            }\n        }\n        let marker = '';\n        if (options?.tag === 'italic' || options?.tag === undefined) {\n            marker = '*';\n        } else if (options?.tag === 'bold') {\n            marker = '**';\n        } else if (options?.tag === 'bold-italic') {\n            marker = '***';\n        }\n        let text = `${marker}@${this.name}${marker}`;\n        if (this.content.inlines.length === 1) {\n            text = `${text} — ${content}`;\n        } else if (this.content.inlines.length > 1) {\n            text = `${text}\\n${content}`;\n        }\n        if (this.inline) {\n            // Inline tags are surrounded by curly braces\n            return `{${text}}`;\n        } else {\n            return text;\n        }\n    }\n}\n\nfunction renderInlineTag(tag: string, content: string, options: JSDocRenderOptions): string | undefined {\n    if (tag === 'linkplain' || tag === 'linkcode' || tag === 'link') {\n        const index = content.indexOf(' ');\n        let display = content;\n        if (index > 0) {\n            const displayStart = skipWhitespace(content, index);\n            display = content.substring(displayStart);\n            content = content.substring(0, index);\n        }\n        if (tag === 'linkcode' || (tag === 'link' && options.link === 'code')) {\n            // Surround the display value in a markdown inline code block\n            display = `\\`${display}\\``;\n        }\n        const renderedLink = options.renderLink?.(content, display) ?? renderLinkDefault(content, display);\n        return renderedLink;\n    }\n    return undefined;\n}\n\nfunction renderLinkDefault(content: string, display: string): string {\n    try {\n        URI.parse(content, true);\n        return `[${display}](${content})`;\n    } catch {\n        return content;\n    }\n}\n\nclass JSDocTextImpl implements JSDocParagraph {\n    inlines: JSDocInline[];\n    range: Range;\n\n    constructor(lines: JSDocInline[], range: Range) {\n        this.inlines = lines;\n        this.range = range;\n    }\n\n    toString(): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toString();\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n\n    toMarkdown(options?: JSDocRenderOptions): string {\n        let text = '';\n        for (let i = 0; i < this.inlines.length; i++) {\n            const inline = this.inlines[i];\n            const next = this.inlines[i + 1];\n            text += inline.toMarkdown(options);\n            if (next && next.range.start.line > inline.range.start.line) {\n                text += '\\n';\n            }\n        }\n        return text;\n    }\n}\n\nclass JSDocLineImpl implements JSDocLine {\n    text: string;\n    range: Range;\n\n    constructor(text: string, range: Range) {\n        this.text = text;\n        this.range = range;\n    }\n\n    toString(): string {\n        return this.text;\n    }\n    toMarkdown(): string {\n        return this.text;\n    }\n\n}\n\nfunction fillNewlines(text: string): string {\n    if (text.endsWith('\\n')) {\n        return '\\n';\n    } else {\n        return '\\n\\n';\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode, AstNodeDescription } from '../syntax-tree.js';\nimport type { IndexManager } from '../workspace/index-manager.js';\nimport type { CommentProvider } from './comment-provider.js';\nimport type { JSDocTag } from './jsdoc.js';\nimport { getDocument } from '../utils/ast-utils.js';\nimport { isJSDoc, parseJSDoc } from './jsdoc.js';\n\n/**\n * Provides documentation for AST nodes.\n */\nexport interface DocumentationProvider {\n    /**\n     * Returns a markdown documentation string for the specified AST node.\n     *\n     * The default implementation `JSDocDocumentationProvider` will inspect the comment associated with the specified node.\n     */\n    getDocumentation(node: AstNode): string | undefined;\n}\n\nexport class JSDocDocumentationProvider implements DocumentationProvider {\n\n    protected readonly indexManager: IndexManager;\n    protected readonly commentProvider: CommentProvider;\n\n    constructor(services: LangiumCoreServices) {\n        this.indexManager = services.shared.workspace.IndexManager;\n        this.commentProvider = services.documentation.CommentProvider;\n    }\n\n    getDocumentation(node: AstNode): string | undefined {\n        const comment = this.commentProvider.getComment(node);\n        if (comment && isJSDoc(comment)) {\n            const parsedJSDoc = parseJSDoc(comment);\n            return parsedJSDoc.toMarkdown({\n                renderLink: (link, display) => {\n                    return this.documentationLinkRenderer(node, link, display);\n                },\n                renderTag: (tag) => {\n                    return this.documentationTagRenderer(node, tag);\n                }\n            });\n        }\n        return undefined;\n    }\n\n    protected documentationLinkRenderer(node: AstNode, name: string, display: string): string | undefined {\n        const description = this.findNameInPrecomputedScopes(node, name) ?? this.findNameInGlobalScope(node, name);\n        if (description && description.nameSegment) {\n            const line = description.nameSegment.range.start.line + 1;\n            const character = description.nameSegment.range.start.character + 1;\n            const uri = description.documentUri.with({ fragment: `L${line},${character}` });\n            return `[${display}](${uri.toString()})`;\n        } else {\n            return undefined;\n        }\n    }\n\n    protected documentationTagRenderer(_node: AstNode, _tag: JSDocTag): string | undefined {\n        // Fall back to the default tag rendering\n        return undefined;\n    }\n\n    protected findNameInPrecomputedScopes(node: AstNode, name: string): AstNodeDescription | undefined {\n        const document = getDocument(node);\n        const precomputed = document.precomputedScopes;\n        if (!precomputed) {\n            return undefined;\n        }\n        let currentNode: AstNode | undefined = node;\n        do {\n            const allDescriptions = precomputed.get(currentNode);\n            const description = allDescriptions.find(e => e.name === name);\n            if (description) {\n                return description;\n            }\n            currentNode = currentNode.$container;\n        } while (currentNode);\n\n        return undefined;\n    }\n\n    protected findNameInGlobalScope(node: AstNode, name: string): AstNodeDescription | undefined {\n        const description = this.indexManager.allElements().find(e => e.name === name);\n        return description;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { GrammarConfig } from '../languages/grammar-config.js';\nimport { isAstNodeWithComment } from '../serializer/json-serializer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport { findCommentNode } from '../utils/cst-utils.js';\n\n/**\n * Provides comments for AST nodes.\n */\nexport interface CommentProvider {\n    /**\n     * Returns the comment associated with the specified AST node.\n     * @param node The AST node to get the comment for.\n     * @returns The comment associated with the specified AST node or `undefined` if there is no comment.\n     */\n    getComment(node: AstNode): string | undefined;\n}\n\nexport class DefaultCommentProvider implements CommentProvider {\n    protected readonly grammarConfig: () => GrammarConfig;\n    constructor(services: LangiumCoreServices) {\n        this.grammarConfig = () => services.parser.GrammarConfig;\n    }\n    getComment(node: AstNode): string | undefined {\n        if(isAstNodeWithComment(node)) {\n            return node.$comment;\n        }\n        return findCommentNode(node.$cstNode, this.grammarConfig().multilineCommentRules)?.text;\n    }\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * A `Module<I>` is a description of possibly grouped service factories.\n *\n * Given a type I = { group: { service: A } },\n * Module<I> := { group: { service: (injector: I) => A } }\n *\n * Making `I` available during the creation of `I` allows us to create cyclic\n * dependencies.\n */\nexport type Module<I, T = I> = {\n    [K in keyof T]: Module<I, T[K]> | ((injector: I) => T[K])\n}\n\nexport namespace Module {\n    export const merge = <M1, M2, R extends M1 & M2>(m1: Module<R, M1>, m2: Module<R, M2>) => (_merge(_merge({}, m1), m2) as Module<R, M1 & M2>);\n}\n\n/**\n * Given a set of modules, the inject function returns a lazily evaluated injector\n * that injects dependencies into the requested service when it is requested the\n * first time. Subsequent requests will return the same service.\n *\n * In the case of cyclic dependencies, an Error will be thrown. This can be fixed\n * by injecting a provider `() => T` instead of a `T`.\n *\n * Please note that the arguments may be objects or arrays. However, the result will\n * be an object. Using it with for..of will have no effect.\n *\n * @param module1 first Module\n * @param module2 (optional) second Module\n * @param module3 (optional) third Module\n * @param module4 (optional) fourth Module\n * @param module5 (optional) fifth Module\n * @param module6 (optional) sixth Module\n * @param module7 (optional) seventh Module\n * @param module8 (optional) eighth Module\n * @param module9 (optional) ninth Module\n * @returns a new object of type I\n */\nexport function inject<I1, I2, I3, I4, I5, I6, I7, I8, I9, I extends I1 & I2 & I3 & I4 & I5 & I6 & I7 & I8 & I9>(\n    module1: Module<I, I1>, module2?: Module<I, I2>, module3?: Module<I, I3>, module4?: Module<I, I4>, module5?: Module<I, I5>, module6?: Module<I, I6>, module7?: Module<I, I7>, module8?: Module<I, I8>, module9?: Module<I, I9>\n): I {\n    const module = [module1, module2, module3, module4, module5, module6, module7, module8, module9].reduce(_merge, {}) as Module<I>;\n    return _inject(module);\n}\n\nconst isProxy = Symbol('isProxy');\n\n/**\n * Eagerly load all services in the given dependency injection container. This is sometimes\n * necessary because services can register event listeners in their constructors.\n */\nexport function eagerLoad<T>(item: T): T {\n    if (item && (item as any)[isProxy]) {\n        for (const value of Object.values(item)) {\n            eagerLoad(value);\n        }\n    }\n    return item;\n}\n\n/**\n * Helper function that returns an injector by creating a proxy.\n * Invariant: injector is of type I. If injector is undefined, then T = I.\n */\nfunction _inject<I, T>(module: Module<I, T>, injector?: any): T {\n    const proxy: any = new Proxy({} as any, {\n        deleteProperty: () => false,\n        get: (obj, prop) => _resolve(obj, prop, module, injector || proxy),\n        getOwnPropertyDescriptor: (obj, prop) => (_resolve(obj, prop, module, injector || proxy), Object.getOwnPropertyDescriptor(obj, prop)), // used by for..in\n        has: (_, prop) => prop in module, // used by ..in..\n        ownKeys: () => [...Reflect.ownKeys(module), isProxy] // used by for..in\n    });\n    proxy[isProxy] = true;\n    return proxy;\n}\n\n/**\n * Internally used to tag a requested dependency, directly before calling the factory.\n * This allows us to find cycles during instance creation.\n */\nconst __requested__ = Symbol();\n\n/**\n * Returns the value `obj[prop]`. If the value does not exist, yet, it is resolved from\n * the module description. The result of service factories is cached. Groups are\n * recursively proxied.\n *\n * @param obj an object holding all group proxies and services\n * @param prop the key of a value within obj\n * @param module an object containing groups and service factories\n * @param injector the first level proxy that provides access to all values\n * @returns the requested value `obj[prop]`\n * @throws Error if a dependency cycle is detected\n */\nfunction _resolve<I, T>(obj: any, prop: string | symbol | number, module: Module<I, T>, injector: I): T[keyof T] | undefined {\n    if (prop in obj) {\n        if (obj[prop] instanceof Error) {\n            throw new Error('Construction failure. Please make sure that your dependencies are constructable.', {cause: obj[prop]});\n        }\n        if (obj[prop] === __requested__) {\n            throw new Error('Cycle detected. Please make \"' + String(prop) + '\" lazy. See https://langium.org/docs/configuration-services/#resolving-cyclic-dependencies');\n        }\n        return obj[prop];\n    } else if (prop in module) {\n        const value: Module<I, T[keyof T]> | ((injector: I) => T[keyof T]) = module[prop as keyof T];\n        obj[prop] = __requested__;\n        try {\n            obj[prop] = (typeof value === 'function') ? value(injector) : _inject(value, injector);\n        } catch (error) {\n            obj[prop] = error instanceof Error ? error : undefined;\n            throw error;\n        }\n        return obj[prop];\n    } else {\n        return undefined;\n    }\n}\n\n/**\n * Performs a deep-merge of two modules by writing source entries into the target module.\n *\n * @param target the module which is written\n * @param source the module which is read\n * @returns the target module\n */\nfunction _merge(target: Module<any>, source?: Module<any>): Module<unknown> {\n    if (source) {\n        for (const [key, value2] of Object.entries(source)) {\n            if (value2 !== undefined) {\n                const value1 = target[key];\n                if (value1 !== null && value2 !== null && typeof value1 === 'object' && typeof value2 === 'object') {\n                    target[key] = _merge(value1, value2);\n                } else {\n                    target[key] = value2;\n                }\n            }\n        }\n    }\n    return target;\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { CancellationToken } from '../utils/cancellation.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { AstNode } from '../syntax-tree.js';\nimport type { LangiumParser, ParseResult } from './langium-parser.js';\nimport type { Hydrator } from '../serializer/hydrator.js';\nimport type { Event } from '../utils/event.js';\nimport { Deferred, OperationCancelled } from '../utils/promise-utils.js';\nimport { Emitter } from '../utils/event.js';\n\n/**\n * Async parser that allows to cancel the current parsing process.\n * The sync parser implementation is blocking the event loop, which can become quite problematic for large files.\n *\n * Note that the default implementation is not actually async. It just wraps the sync parser in a promise.\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport interface AsyncParser {\n    parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>>;\n}\n\n/**\n * Default implementation of the async parser. This implementation only wraps the sync parser in a promise.\n *\n * A real implementation would create worker threads or web workers to offload the parsing work.\n */\nexport class DefaultAsyncParser implements AsyncParser {\n\n    protected readonly syncParser: LangiumParser;\n\n    constructor(services: LangiumCoreServices) {\n        this.syncParser = services.parser.LangiumParser;\n    }\n\n    parse<T extends AstNode>(text: string): Promise<ParseResult<T>> {\n        return Promise.resolve(this.syncParser.parse<T>(text));\n    }\n}\n\nexport abstract class AbstractThreadedAsyncParser implements AsyncParser {\n\n    /**\n     * The thread count determines how many threads are used to parse files in parallel.\n     * The default value is 8. Decreasing this value increases startup performance, but decreases parallel parsing performance.\n     */\n    protected threadCount = 8;\n    /**\n     * The termination delay determines how long the parser waits for a thread to finish after a cancellation request.\n     * The default value is 200(ms).\n     */\n    protected terminationDelay = 200;\n    protected workerPool: ParserWorker[] = [];\n    protected queue: Array<Deferred<ParserWorker>> = [];\n\n    protected readonly hydrator: Hydrator;\n\n    constructor(services: LangiumCoreServices) {\n        this.hydrator = services.serializer.Hydrator;\n    }\n\n    protected initializeWorkers(): void {\n        while (this.workerPool.length < this.threadCount) {\n            const worker = this.createWorker();\n            worker.onReady(() => {\n                if (this.queue.length > 0) {\n                    const deferred = this.queue.shift();\n                    if (deferred) {\n                        worker.lock();\n                        deferred.resolve(worker);\n                    }\n                }\n            });\n            this.workerPool.push(worker);\n        }\n    }\n\n    async parse<T extends AstNode>(text: string, cancelToken: CancellationToken): Promise<ParseResult<T>> {\n        const worker = await this.acquireParserWorker(cancelToken);\n        const deferred = new Deferred<ParseResult<T>>();\n        let timeout: NodeJS.Timeout | undefined;\n        // If the cancellation token is requested, we wait for a certain time before terminating the worker.\n        // Since the cancellation token lives longer than the parsing process, we need to dispose the event listener.\n        // Otherwise, we might accidentally terminate the worker after the parsing process has finished.\n        const cancellation = cancelToken.onCancellationRequested(() => {\n            timeout = setTimeout(() => {\n                this.terminateWorker(worker);\n            }, this.terminationDelay);\n        });\n        worker.parse(text).then(result => {\n            const hydrated = this.hydrator.hydrate<T>(result);\n            deferred.resolve(hydrated);\n        }).catch(err => {\n            deferred.reject(err);\n        }).finally(() => {\n            cancellation.dispose();\n            clearTimeout(timeout);\n        });\n        return deferred.promise;\n    }\n\n    protected terminateWorker(worker: ParserWorker): void {\n        worker.terminate();\n        const index = this.workerPool.indexOf(worker);\n        if (index >= 0) {\n            this.workerPool.splice(index, 1);\n        }\n    }\n\n    protected async acquireParserWorker(cancelToken: CancellationToken): Promise<ParserWorker> {\n        this.initializeWorkers();\n        for (const worker of this.workerPool) {\n            if (worker.ready) {\n                worker.lock();\n                return worker;\n            }\n        }\n        const deferred = new Deferred<ParserWorker>();\n        cancelToken.onCancellationRequested(() => {\n            const index = this.queue.indexOf(deferred);\n            if (index >= 0) {\n                this.queue.splice(index, 1);\n            }\n            deferred.reject(OperationCancelled);\n        });\n        this.queue.push(deferred);\n        return deferred.promise;\n    }\n\n    protected abstract createWorker(): ParserWorker;\n}\n\nexport type WorkerMessagePost = (message: unknown) => void;\nexport type WorkerMessageCallback = (cb: (message: unknown) => void) => void;\n\nexport class ParserWorker {\n\n    protected readonly sendMessage: WorkerMessagePost;\n    protected readonly _terminate: () => void;\n    protected readonly onReadyEmitter = new Emitter<void>();\n\n    protected deferred = new Deferred<ParseResult>();\n    protected _ready = true;\n    protected _parsing = false;\n\n    get ready(): boolean {\n        return this._ready;\n    }\n\n    get onReady(): Event<void> {\n        return this.onReadyEmitter.event;\n    }\n\n    constructor(sendMessage: WorkerMessagePost, onMessage: WorkerMessageCallback, onError: WorkerMessageCallback, terminate: () => void) {\n        this.sendMessage = sendMessage;\n        this._terminate = terminate;\n        onMessage(result => {\n            const parseResult = result as ParseResult;\n            this.deferred.resolve(parseResult);\n            this.unlock();\n        });\n        onError(error => {\n            this.deferred.reject(error);\n            this.unlock();\n        });\n    }\n\n    terminate(): void {\n        this.deferred.reject(OperationCancelled);\n        this._terminate();\n    }\n\n    lock(): void {\n        this._ready = false;\n    }\n\n    unlock(): void {\n        this._parsing = false;\n        this._ready = true;\n        this.onReadyEmitter.fire();\n    }\n\n    parse(text: string): Promise<ParseResult> {\n        if (this._parsing) {\n            throw new Error('Parser worker is busy');\n        }\n        this._parsing = true;\n        this.deferred = new Deferred();\n        this.sendMessage(text);\n        return this.deferred.promise;\n    }\n}\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { CancellationToken, CancellationTokenSource } from '../utils/cancellation.js';\nimport { Deferred, isOperationCancelled, type MaybePromise } from '../utils/promise-utils.js';\n\n/**\n * Utility service to execute mutually exclusive actions.\n */\nexport interface WorkspaceLock {\n    /**\n     * Performs a single async action, like initializing the workspace or processing document changes.\n     * Only one action will be executed at a time.\n     *\n     * When another action is queued up, the token provided for the action will be cancelled.\n     * Assuming the action makes use of this token, the next action only has to wait for the current action to finish cancellation.\n     */\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void>;\n\n    /**\n     * Performs a single action, like computing completion results or providing workspace symbols.\n     * Read actions will only be executed after all write actions have finished. They will be executed in parallel if possible.\n     *\n     * If a write action is currently running, the read action will be queued up and executed afterwards.\n     * If a new write action is queued up while a read action is waiting, the write action will receive priority and will be handled before the read action.\n     *\n     * Note that read actions are not allowed to modify anything in the workspace. Please use {@link write} instead.\n     */\n    read<T>(action: () => MaybePromise<T>): Promise<T>;\n\n    /**\n     * Cancels the last queued write action. All previous write actions already have been cancelled.\n     */\n    cancelWrite(): void;\n}\n\ntype LockAction<T = void> = (token: CancellationToken) => MaybePromise<T>;\n\ninterface LockEntry {\n    action: LockAction<unknown>;\n    deferred: Deferred<unknown>;\n    cancellationToken: CancellationToken;\n}\n\nexport class DefaultWorkspaceLock implements WorkspaceLock {\n\n    private previousTokenSource = new CancellationTokenSource();\n    private writeQueue: LockEntry[] = [];\n    private readQueue: LockEntry[] = [];\n    private done = true;\n\n    write(action: (token: CancellationToken) => MaybePromise<void>): Promise<void> {\n        this.cancelWrite();\n        const tokenSource = new CancellationTokenSource();\n        this.previousTokenSource = tokenSource;\n        return this.enqueue(this.writeQueue, action, tokenSource.token);\n    }\n\n    read<T>(action: () => MaybePromise<T>): Promise<T> {\n        return this.enqueue(this.readQueue, action);\n    }\n\n    private enqueue<T = void>(queue: LockEntry[], action: LockAction<T>, cancellationToken?: CancellationToken): Promise<T> {\n        const deferred = new Deferred<unknown>();\n        const entry: LockEntry = {\n            action,\n            deferred,\n            cancellationToken: cancellationToken ?? CancellationToken.None\n        };\n        queue.push(entry);\n        this.performNextOperation();\n        return deferred.promise as Promise<T>;\n    }\n\n    private async performNextOperation(): Promise<void> {\n        if (!this.done) {\n            return;\n        }\n        const entries: LockEntry[] = [];\n        if (this.writeQueue.length > 0) {\n            // Just perform the next write action\n            entries.push(this.writeQueue.shift()!);\n        } else if (this.readQueue.length > 0) {\n            // Empty the read queue and perform all actions in parallel\n            entries.push(...this.readQueue.splice(0, this.readQueue.length));\n        } else {\n            return;\n        }\n        this.done = false;\n        await Promise.all(entries.map(async ({ action, deferred, cancellationToken }) => {\n            try {\n                // Move the execution of the action to the next event loop tick via `Promise.resolve()`\n                const result = await Promise.resolve().then(() => action(cancellationToken));\n                deferred.resolve(result);\n            } catch (err) {\n                if (isOperationCancelled(err)) {\n                    // If the operation was cancelled, we don't want to reject the promise\n                    deferred.resolve(undefined);\n                } else {\n                    deferred.reject(err);\n                }\n            }\n        }));\n        this.done = true;\n        this.performNextOperation();\n    }\n\n    cancelWrite(): void {\n        this.previousTokenSource.cancel();\n    }\n}\n","/******************************************************************************\n * Copyright 2024 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport type { TokenType } from 'chevrotain';\nimport { CompositeCstNodeImpl, LeafCstNodeImpl, RootCstNodeImpl } from '../parser/cst-node-builder.js';\nimport { isAbstractElement, type AbstractElement, type Grammar } from '../languages/generated/ast.js';\nimport type { Linker } from '../references/linker.js';\nimport type { Lexer } from '../parser/lexer.js';\nimport type { LangiumCoreServices } from '../services.js';\nimport type { ParseResult } from '../parser/langium-parser.js';\nimport type { Reference, AstNode, CstNode, LeafCstNode, GenericAstNode, Mutable, RootCstNode } from '../syntax-tree.js';\nimport { isRootCstNode, isCompositeCstNode, isLeafCstNode, isAstNode, isReference } from '../syntax-tree.js';\nimport { streamAst } from '../utils/ast-utils.js';\nimport { BiMap } from '../utils/collections.js';\nimport { streamCst } from '../utils/cst-utils.js';\n\n/**\n * The hydrator service is responsible for allowing AST parse results to be sent across worker threads.\n */\nexport interface Hydrator {\n    /**\n     * Converts a parse result to a plain object. The resulting object can be sent across worker threads.\n     */\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object>;\n    /**\n     * Converts a plain object to a parse result. The included AST node can then be used in the main thread.\n     * Calling this method on objects that have not been dehydrated first will result in undefined behavior.\n     */\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T>;\n}\n\nexport interface DehydrateContext {\n    astNodes: Map<AstNode, any>;\n    cstNodes: Map<CstNode, any>;\n}\n\nexport interface HydrateContext {\n    astNodes: Map<any, AstNode>;\n    cstNodes: Map<any, CstNode>;\n}\n\nexport class DefaultHydrator implements Hydrator {\n\n    protected readonly grammar: Grammar;\n    protected readonly lexer: Lexer;\n    protected readonly linker: Linker;\n\n    protected readonly grammarElementIdMap = new BiMap<AbstractElement, number>();\n    protected readonly tokenTypeIdMap = new BiMap<number, TokenType>();\n\n    constructor(services: LangiumCoreServices) {\n        this.grammar = services.Grammar;\n        this.lexer = services.parser.Lexer;\n        this.linker = services.references.Linker;\n    }\n\n    dehydrate(result: ParseResult<AstNode>): ParseResult<object> {\n        return {\n            // We need to create shallow copies of the errors\n            // The original errors inherit from the `Error` class, which is not transferable across worker threads\n            lexerErrors: result.lexerErrors.map(e => ({ ...e })),\n            parserErrors: result.parserErrors.map(e => ({ ...e })),\n            value: this.dehydrateAstNode(result.value, this.createDehyrationContext(result.value))\n        };\n    }\n\n    protected createDehyrationContext(node: AstNode): DehydrateContext {\n        const astNodes = new Map<AstNode, any>();\n        const cstNodes = new Map<CstNode, any>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {});\n        }\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                cstNodes.set(cstNode, {});\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected dehydrateAstNode(node: AstNode, context: DehydrateContext): object {\n        const obj = context.astNodes.get(node) as Record<string, any>;\n        obj.$type = node.$type;\n        obj.$containerIndex = node.$containerIndex;\n        obj.$containerProperty = node.$containerProperty;\n        if (node.$cstNode !== undefined) {\n            obj.$cstNode = this.dehydrateCstNode(node.$cstNode, context);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: any[] = [];\n                obj[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.dehydrateAstNode(item, context));\n                    } else if (isReference(item)) {\n                        arr.push(this.dehydrateReference(item, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                obj[name] = this.dehydrateAstNode(value, context);\n            } else if (isReference(value)) {\n                obj[name] = this.dehydrateReference(value, context);\n            } else if (value !== undefined) {\n                obj[name] = value;\n            }\n        }\n        return obj;\n    }\n\n    protected dehydrateReference(reference: Reference, context: DehydrateContext): any {\n        const obj: Record<string, unknown> = {};\n        obj.$refText = reference.$refText;\n        if (reference.$refNode) {\n            obj.$refNode = context.cstNodes.get(reference.$refNode);\n        }\n        return obj;\n    }\n\n    protected dehydrateCstNode(node: CstNode, context: DehydrateContext): any {\n        const cstNode = context.cstNodes.get(node) as Record<string, any>;\n        if (isRootCstNode(node)) {\n            cstNode.fullText = node.fullText;\n        } else {\n            // Note: This returns undefined for hidden nodes (i.e. comments)\n            cstNode.grammarSource = this.getGrammarElementId(node.grammarSource);\n        }\n        cstNode.hidden = node.hidden;\n        cstNode.astNode = context.astNodes.get(node.astNode);\n        if (isCompositeCstNode(node)) {\n            cstNode.content = node.content.map(child => this.dehydrateCstNode(child, context));\n        } else if (isLeafCstNode(node)) {\n            cstNode.tokenType = node.tokenType.name;\n            cstNode.offset = node.offset;\n            cstNode.length = node.length;\n            cstNode.startLine = node.range.start.line;\n            cstNode.startColumn = node.range.start.character;\n            cstNode.endLine = node.range.end.line;\n            cstNode.endColumn = node.range.end.character;\n        }\n        return cstNode;\n    }\n\n    hydrate<T extends AstNode = AstNode>(result: ParseResult<object>): ParseResult<T> {\n        const node = result.value;\n        const context = this.createHydrationContext(node);\n        if ('$cstNode' in node) {\n            this.hydrateCstNode(node.$cstNode, context);\n        }\n        return {\n            lexerErrors: result.lexerErrors,\n            parserErrors: result.parserErrors,\n            value: this.hydrateAstNode(node, context) as T\n        };\n    }\n\n    protected createHydrationContext(node: any): HydrateContext {\n        const astNodes = new Map<any, AstNode>();\n        const cstNodes = new Map<any, CstNode>();\n        for (const astNode of streamAst(node)) {\n            astNodes.set(astNode, {} as AstNode);\n        }\n        let root: RootCstNode;\n        if (node.$cstNode) {\n            for (const cstNode of streamCst(node.$cstNode)) {\n                let cst: Mutable<CstNode> | undefined;\n                if ('fullText' in cstNode) {\n                    cst = new RootCstNodeImpl(cstNode.fullText as string);\n                    root = cst as RootCstNode;\n                } else if ('content' in cstNode) {\n                    cst = new CompositeCstNodeImpl();\n                } else if ('tokenType' in cstNode) {\n                    cst = this.hydrateCstLeafNode(cstNode);\n                }\n                if (cst) {\n                    cstNodes.set(cstNode, cst);\n                    cst.root = root!;\n                }\n            }\n        }\n        return {\n            astNodes,\n            cstNodes\n        };\n    }\n\n    protected hydrateAstNode(node: any, context: HydrateContext): AstNode {\n        const astNode = context.astNodes.get(node) as Mutable<GenericAstNode>;\n        astNode.$type = node.$type;\n        astNode.$containerIndex = node.$containerIndex;\n        astNode.$containerProperty = node.$containerProperty;\n        if (node.$cstNode) {\n            astNode.$cstNode = context.cstNodes.get(node.$cstNode);\n        }\n        for (const [name, value] of Object.entries(node)) {\n            if (name.startsWith('$')) {\n                continue;\n            }\n            if (Array.isArray(value)) {\n                const arr: unknown[] = [];\n                astNode[name] = arr;\n                for (const item of value) {\n                    if (isAstNode(item)) {\n                        arr.push(this.setParent(this.hydrateAstNode(item, context), astNode));\n                    } else if (isReference(item)) {\n                        arr.push(this.hydrateReference(item, astNode, name, context));\n                    } else {\n                        arr.push(item);\n                    }\n                }\n            } else if (isAstNode(value)) {\n                astNode[name] = this.setParent(this.hydrateAstNode(value, context), astNode);\n            } else if (isReference(value)) {\n                astNode[name] = this.hydrateReference(value, astNode, name, context);\n            } else if (value !== undefined) {\n                astNode[name] = value;\n            }\n        }\n        return astNode;\n    }\n\n    protected setParent(node: any, parent: any): any {\n        node.$container = parent as AstNode;\n        return node;\n    }\n\n    protected hydrateReference(reference: any, node: AstNode, name: string, context: HydrateContext): Reference {\n        return this.linker.buildReference(node, name, context.cstNodes.get(reference.$refNode)!, reference.$refText);\n    }\n\n    protected hydrateCstNode(cstNode: any, context: HydrateContext, num = 0): CstNode {\n        const cstNodeObj = context.cstNodes.get(cstNode) as Mutable<CstNode>;\n        if (typeof cstNode.grammarSource === 'number') {\n            cstNodeObj.grammarSource = this.getGrammarElement(cstNode.grammarSource);\n        }\n        cstNodeObj.astNode = context.astNodes.get(cstNode.astNode)!;\n        if (isCompositeCstNode(cstNodeObj)) {\n            for (const child of cstNode.content) {\n                const hydrated = this.hydrateCstNode(child, context, num++);\n                cstNodeObj.content.push(hydrated);\n            }\n        }\n        return cstNodeObj;\n    }\n\n    protected hydrateCstLeafNode(cstNode: any): LeafCstNode {\n        const tokenType = this.getTokenType(cstNode.tokenType);\n        const offset = cstNode.offset;\n        const length = cstNode.length;\n        const startLine = cstNode.startLine;\n        const startColumn = cstNode.startColumn;\n        const endLine = cstNode.endLine;\n        const endColumn = cstNode.endColumn;\n        const hidden = cstNode.hidden;\n        const node = new LeafCstNodeImpl(\n            offset,\n            length,\n            {\n                start: {\n                    line: startLine,\n                    character: startColumn\n                },\n                end: {\n                    line: endLine,\n                    character: endColumn\n                }\n            },\n            tokenType,\n            hidden\n        );\n        return node;\n    }\n\n    protected getTokenType(name: string): TokenType {\n        return this.lexer.definition[name];\n    }\n\n    protected getGrammarElementId(node: AbstractElement): number | undefined {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        return this.grammarElementIdMap.get(node);\n    }\n\n    protected getGrammarElement(id: number): AbstractElement {\n        if (this.grammarElementIdMap.size === 0) {\n            this.createGrammarElementIdMap();\n        }\n        const element = this.grammarElementIdMap.getKey(id);\n        if (element) {\n            return element;\n        } else {\n            throw new Error('Invalid grammar element id: ' + id);\n        }\n    }\n\n    protected createGrammarElementIdMap(): void {\n        let id = 0;\n        for (const element of streamAst(this.grammar)) {\n            if (isAbstractElement(element)) {\n                this.grammarElementIdMap.set(element, id++);\n            }\n        }\n    }\n\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n******************************************************************************/\n\nimport type { Module } from './dependency-injection.js';\nimport type { LangiumDefaultCoreServices, LangiumDefaultSharedCoreServices, LangiumCoreServices, LangiumSharedCoreServices } from './services.js';\nimport type { FileSystemProvider } from './workspace/file-system-provider.js';\nimport { createGrammarConfig } from './languages/grammar-config.js';\nimport { createCompletionParser } from './parser/completion-parser-builder.js';\nimport { createLangiumParser } from './parser/langium-parser-builder.js';\nimport { DefaultTokenBuilder } from './parser/token-builder.js';\nimport { DefaultValueConverter } from './parser/value-converter.js';\nimport { DefaultLinker } from './references/linker.js';\nimport { DefaultNameProvider } from './references/name-provider.js';\nimport { DefaultReferences } from './references/references.js';\nimport { DefaultScopeComputation } from './references/scope-computation.js';\nimport { DefaultScopeProvider } from './references/scope-provider.js';\nimport { DefaultJsonSerializer } from './serializer/json-serializer.js';\nimport { DefaultServiceRegistry } from './service-registry.js';\nimport { DefaultDocumentValidator } from './validation/document-validator.js';\nimport { ValidationRegistry } from './validation/validation-registry.js';\nimport { DefaultAstNodeDescriptionProvider, DefaultReferenceDescriptionProvider } from './workspace/ast-descriptions.js';\nimport { DefaultAstNodeLocator } from './workspace/ast-node-locator.js';\nimport { DefaultConfigurationProvider } from './workspace/configuration.js';\nimport { DefaultDocumentBuilder } from './workspace/document-builder.js';\nimport { DefaultLangiumDocumentFactory, DefaultLangiumDocuments } from './workspace/documents.js';\nimport { DefaultIndexManager } from './workspace/index-manager.js';\nimport { DefaultWorkspaceManager } from './workspace/workspace-manager.js';\nimport { DefaultLexer } from './parser/lexer.js';\nimport { JSDocDocumentationProvider } from './documentation/documentation-provider.js';\nimport { DefaultCommentProvider } from './documentation/comment-provider.js';\nimport { LangiumParserErrorMessageProvider } from './parser/langium-parser.js';\nimport { DefaultAsyncParser } from './parser/async-parser.js';\nimport { DefaultWorkspaceLock } from './workspace/workspace-lock.js';\nimport { DefaultHydrator } from './serializer/hydrator.js';\n\n/**\n * Context required for creating the default language-specific dependency injection module.\n */\nexport interface DefaultCoreModuleContext {\n    shared: LangiumSharedCoreServices;\n}\n\n/**\n * Creates a dependency injection module configuring the default core services.\n * This is a set of services that are dedicated to a specific language.\n */\nexport function createDefaultCoreModule(context: DefaultCoreModuleContext): Module<LangiumCoreServices, LangiumDefaultCoreServices> {\n    return {\n        documentation: {\n            CommentProvider: (services) => new DefaultCommentProvider(services),\n            DocumentationProvider: (services) => new JSDocDocumentationProvider(services)\n        },\n        parser: {\n            AsyncParser: (services) => new DefaultAsyncParser(services),\n            GrammarConfig: (services) => createGrammarConfig(services),\n            LangiumParser: (services) => createLangiumParser(services),\n            CompletionParser: (services) => createCompletionParser(services),\n            ValueConverter: () => new DefaultValueConverter(),\n            TokenBuilder: () => new DefaultTokenBuilder(),\n            Lexer: (services) => new DefaultLexer(services),\n            ParserErrorMessageProvider: () => new LangiumParserErrorMessageProvider()\n        },\n        workspace: {\n            AstNodeLocator: () => new DefaultAstNodeLocator(),\n            AstNodeDescriptionProvider: (services) => new DefaultAstNodeDescriptionProvider(services),\n            ReferenceDescriptionProvider: (services) => new DefaultReferenceDescriptionProvider(services)\n        },\n        references: {\n            Linker: (services) => new DefaultLinker(services),\n            NameProvider: () => new DefaultNameProvider(),\n            ScopeProvider: (services) => new DefaultScopeProvider(services),\n            ScopeComputation: (services) => new DefaultScopeComputation(services),\n            References: (services) => new DefaultReferences(services)\n        },\n        serializer: {\n            Hydrator: (services) => new DefaultHydrator(services),\n            JsonSerializer: (services) => new DefaultJsonSerializer(services)\n        },\n        validation: {\n            DocumentValidator: (services) => new DefaultDocumentValidator(services),\n            ValidationRegistry: (services) => new ValidationRegistry(services)\n        },\n        shared: () => context.shared\n    };\n}\n\n/**\n * Context required for creating the default shared dependency injection module.\n */\nexport interface DefaultSharedCoreModuleContext {\n    /**\n     * Factory function to create a {@link FileSystemProvider}.\n     *\n     * Langium exposes an `EmptyFileSystem` and `NodeFileSystem`, exported through `langium/node`.\n     * When running Langium as part of a vscode language server or a Node.js app, using the `NodeFileSystem` is recommended,\n     * the `EmptyFileSystem` in every other use case.\n     */\n    fileSystemProvider: (services: LangiumSharedCoreServices) => FileSystemProvider;\n}\n\n/**\n * Creates a dependency injection module configuring the default shared core services.\n * This is the set of services that are shared between multiple languages.\n */\nexport function createDefaultSharedCoreModule(context: DefaultSharedCoreModuleContext): Module<LangiumSharedCoreServices, LangiumDefaultSharedCoreServices> {\n    return {\n        ServiceRegistry: () => new DefaultServiceRegistry(),\n        workspace: {\n            LangiumDocuments: (services) => new DefaultLangiumDocuments(services),\n            LangiumDocumentFactory: (services) => new DefaultLangiumDocumentFactory(services),\n            DocumentBuilder: (services) => new DefaultDocumentBuilder(services),\n            IndexManager: (services) => new DefaultIndexManager(services),\n            WorkspaceManager: (services) => new DefaultWorkspaceManager(services),\n            FileSystemProvider: (services) => context.fileSystemProvider(services),\n            WorkspaceLock: () => new DefaultWorkspaceLock(),\n            ConfigurationProvider: (services) => new DefaultConfigurationProvider(services)\n        }\n    };\n}\n","/******************************************************************************\n * Copyright 2021 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { DefaultNameRegexp } from '../utils/cst-utils.js';\nimport { isCommentTerminal, terminalRegex } from '../utils/grammar-utils.js';\nimport { isMultilineComment } from '../utils/regexp-utils.js';\nimport { isTerminalRule } from './generated/ast.js';\n\nexport interface GrammarConfig {\n    /**\n     * Lists all rule names which are classified as multiline comment rules\n     */\n    multilineCommentRules: string[]\n    /**\n     * A regular expression which matches characters of names\n     */\n    nameRegexp: RegExp\n}\n\n/**\n * Create the default grammar configuration (used by `createDefaultModule`). This can be overridden in a\n * language-specific module.\n */\nexport function createGrammarConfig(services: LangiumCoreServices): GrammarConfig {\n    const rules: string[] = [];\n    const grammar = services.Grammar;\n    for (const rule of grammar.rules) {\n        if (isTerminalRule(rule) && isCommentTerminal(rule) && isMultilineComment(terminalRegex(rule))) {\n            rules.push(rule.name);\n        }\n    }\n    return {\n        multilineCommentRules: rules,\n        nameRegexp: DefaultNameRegexp\n    };\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { LangiumCoreServices } from '../services.js';\nimport { LangiumCompletionParser } from './langium-parser.js';\nimport { createParser } from './parser-builder-base.js';\n\nexport function createCompletionParser(services: LangiumCoreServices): LangiumCompletionParser {\n    const grammar = services.Grammar;\n    const lexer = services.parser.Lexer;\n    const parser = new LangiumCompletionParser(services);\n    createParser(grammar, parser, lexer.definition);\n    parser.finalize();\n    return parser;\n}\n","/******************************************************************************\n * Copyright 2022 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport type { URI } from '../utils/uri-utils.js';\n\nexport interface FileSystemNode {\n    readonly isFile: boolean;\n    readonly isDirectory: boolean;\n    readonly uri: URI;\n}\n\nexport type FileSystemFilter = (node: FileSystemNode) => boolean;\n\n/**\n * Provides methods to interact with an abstract file system. The default implementation is based on the node.js `fs` API.\n */\nexport interface FileSystemProvider {\n    /**\n     * Reads a document asynchronously from a given URI.\n     * @returns The string content of the file with the specified URI.\n     */\n    readFile(uri: URI): Promise<string>;\n    /**\n     * Reads the directory information for the given URI.\n     * @returns The list of file system entries that are contained within the specified directory.\n     */\n    readDirectory(uri: URI): Promise<FileSystemNode[]>;\n}\n\nexport class EmptyFileSystemProvider implements FileSystemProvider {\n\n    readFile(): Promise<string> {\n        throw new Error('No file system is available.');\n    }\n\n    async readDirectory(): Promise<FileSystemNode[]> {\n        return [];\n    }\n\n}\n\nexport const EmptyFileSystem = {\n    fileSystemProvider: () => new EmptyFileSystemProvider()\n};\n","/******************************************************************************\n * Copyright 2023 TypeFox GmbH\n * This program and the accompanying materials are made available under the\n * terms of the MIT License, which is available in the project root.\n ******************************************************************************/\n\nimport { createDefaultCoreModule, createDefaultSharedCoreModule } from '../default-module.js';\nimport type { Module } from '../dependency-injection.js';\nimport { inject } from '../dependency-injection.js';\nimport * as ast from '../languages/generated/ast.js';\nimport type { LangiumCoreServices, LangiumSharedCoreServices, PartialLangiumCoreServices, PartialLangiumSharedCoreServices } from '../services.js';\nimport type { Mutable } from '../syntax-tree.js';\nimport { EmptyFileSystem } from '../workspace/file-system-provider.js';\nimport { URI } from './uri-utils.js';\n\nconst minimalGrammarModule: Module<LangiumCoreServices, PartialLangiumCoreServices> = {\n    Grammar: () => undefined as unknown as ast.Grammar,\n    LanguageMetaData: () => ({\n        caseInsensitive: false,\n        fileExtensions: ['.langium'],\n        languageId: 'langium'\n    })\n};\n\nconst minimalSharedGrammarModule: Module<LangiumSharedCoreServices, PartialLangiumSharedCoreServices> = {\n    AstReflection: () => new ast.LangiumGrammarAstReflection()\n};\n\nfunction createMinimalGrammarServices(): LangiumCoreServices {\n    const shared = inject(\n        createDefaultSharedCoreModule(EmptyFileSystem),\n        minimalSharedGrammarModule\n    );\n    const grammar = inject(\n        createDefaultCoreModule({ shared }),\n        minimalGrammarModule\n    );\n    shared.ServiceRegistry.register(grammar);\n    return grammar;\n}\n\n/**\n * Load a Langium grammar for your language from a JSON string. This is used by several services,\n * most notably the parser builder which interprets the grammar to create a parser.\n */\nexport function loadGrammarFromJson(json: string): ast.Grammar {\n    const services = createMinimalGrammarServices();\n    const astNode = services.serializer.JsonSerializer.deserialize(json) as Mutable<ast.Grammar>;\n    services.shared.workspace.LangiumDocumentFactory.fromModel(astNode, URI.parse(`memory://${astNode.name ?? 'grammar'}.langium`));\n    return astNode;\n}\n","/** Used to match a single whitespace character. */\nvar reWhitespace = /\\s/;\n\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\nfunction trimmedEndIndex(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n  return index;\n}\n\nexport default trimmedEndIndex;\n","import trimmedEndIndex from './_trimmedEndIndex.js';\n\n/** Used to match leading whitespace. */\nvar reTrimStart = /^\\s+/;\n\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\nfunction baseTrim(string) {\n  return string\n    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')\n    : string;\n}\n\nexport default baseTrim;\n","import baseTrim from './_baseTrim.js';\nimport isObject from './isObject.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nexport default toNumber;\n","import toNumber from './toNumber.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0,\n    MAX_INTEGER = 1.7976931348623157e+308;\n\n/**\n * Converts `value` to a finite number.\n *\n * @static\n * @memberOf _\n * @since 4.12.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {number} Returns the converted number.\n * @example\n *\n * _.toFinite(3.2);\n * // => 3.2\n *\n * _.toFinite(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toFinite(Infinity);\n * // => 1.7976931348623157e+308\n *\n * _.toFinite('3.2');\n * // => 3.2\n */\nfunction toFinite(value) {\n  if (!value) {\n    return value === 0 ? value : 0;\n  }\n  value = toNumber(value);\n  if (value === INFINITY || value === -INFINITY) {\n    var sign = (value < 0 ? -1 : 1);\n    return sign * MAX_INTEGER;\n  }\n  return value === value ? value : 0;\n}\n\nexport default toFinite;\n","/**\n * Gets the last element of `array`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to query.\n * @returns {*} Returns the last element of `array`.\n * @example\n *\n * _.last([1, 2, 3]);\n * // => 3\n */\nfunction last(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? array[length - 1] : undefined;\n}\n\nexport default last;\n","import {\n  GitGraphModule,\n  createGitGraphServices\n} from \"./chunks/mermaid-parser.core/chunk-NCMFTTUW.mjs\";\nimport {\n  InfoModule,\n  createInfoServices\n} from \"./chunks/mermaid-parser.core/chunk-4YFB5VUC.mjs\";\nimport {\n  PacketModule,\n  createPacketServices\n} from \"./chunks/mermaid-parser.core/chunk-EQFLFMNE.mjs\";\nimport {\n  PieModule,\n  createPieServices\n} from \"./chunks/mermaid-parser.core/chunk-BI6EQKOQ.mjs\";\nimport {\n  ArchitectureModule,\n  createArchitectureServices\n} from \"./chunks/mermaid-parser.core/chunk-FF7BQXOH.mjs\";\nimport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  Info,\n  InfoGeneratedModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  Pie,\n  PieGeneratedModule,\n  PieSection,\n  Statement,\n  __name,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection\n} from \"./chunks/mermaid-parser.core/chunk-Y27MQZ3U.mjs\";\n\n// src/parse.ts\nvar parsers = {};\nvar initializers = {\n  info: /* @__PURE__ */ __name(async () => {\n    const { createInfoServices: createInfoServices2 } = await import(\"./chunks/mermaid-parser.core/info-46DW6VJ7.mjs\");\n    const parser = createInfoServices2().Info.parser.LangiumParser;\n    parsers.info = parser;\n  }, \"info\"),\n  packet: /* @__PURE__ */ __name(async () => {\n    const { createPacketServices: createPacketServices2 } = await import(\"./chunks/mermaid-parser.core/packet-W2GHVCYJ.mjs\");\n    const parser = createPacketServices2().Packet.parser.LangiumParser;\n    parsers.packet = parser;\n  }, \"packet\"),\n  pie: /* @__PURE__ */ __name(async () => {\n    const { createPieServices: createPieServices2 } = await import(\"./chunks/mermaid-parser.core/pie-BEWT4RHE.mjs\");\n    const parser = createPieServices2().Pie.parser.LangiumParser;\n    parsers.pie = parser;\n  }, \"pie\"),\n  architecture: /* @__PURE__ */ __name(async () => {\n    const { createArchitectureServices: createArchitectureServices2 } = await import(\"./chunks/mermaid-parser.core/architecture-I3QFYML2.mjs\");\n    const parser = createArchitectureServices2().Architecture.parser.LangiumParser;\n    parsers.architecture = parser;\n  }, \"architecture\"),\n  gitGraph: /* @__PURE__ */ __name(async () => {\n    const { createGitGraphServices: createGitGraphServices2 } = await import(\"./chunks/mermaid-parser.core/gitGraph-YCYPL57B.mjs\");\n    const parser = createGitGraphServices2().GitGraph.parser.LangiumParser;\n    parsers.gitGraph = parser;\n  }, \"gitGraph\")\n};\nasync function parse(diagramType, text) {\n  const initializer = initializers[diagramType];\n  if (!initializer) {\n    throw new Error(`Unknown diagram type: ${diagramType}`);\n  }\n  if (!parsers[diagramType]) {\n    await initializer();\n  }\n  const parser = parsers[diagramType];\n  const result = parser.parse(text);\n  if (result.lexerErrors.length > 0 || result.parserErrors.length > 0) {\n    throw new MermaidParseError(result);\n  }\n  return result.value;\n}\n__name(parse, \"parse\");\nvar MermaidParseError = class extends Error {\n  constructor(result) {\n    const lexerErrors = result.lexerErrors.map((err) => err.message).join(\"\\n\");\n    const parserErrors = result.parserErrors.map((err) => err.message).join(\"\\n\");\n    super(`Parsing failed: ${lexerErrors} ${parserErrors}`);\n    this.result = result;\n  }\n  static {\n    __name(this, \"MermaidParseError\");\n  }\n};\nexport {\n  AbstractMermaidTokenBuilder,\n  AbstractMermaidValueConverter,\n  Architecture,\n  ArchitectureGeneratedModule,\n  ArchitectureModule,\n  Branch,\n  Commit,\n  CommonTokenBuilder,\n  CommonValueConverter,\n  GitGraph,\n  GitGraphGeneratedModule,\n  GitGraphModule,\n  Info,\n  InfoGeneratedModule,\n  InfoModule,\n  Merge,\n  MermaidGeneratedSharedModule,\n  MermaidParseError,\n  Packet,\n  PacketBlock,\n  PacketGeneratedModule,\n  PacketModule,\n  Pie,\n  PieGeneratedModule,\n  PieModule,\n  PieSection,\n  Statement,\n  createArchitectureServices,\n  createGitGraphServices,\n  createInfoServices,\n  createPacketServices,\n  createPieServices,\n  isArchitecture,\n  isBranch,\n  isCommit,\n  isCommon,\n  isGitGraph,\n  isInfo,\n  isMerge,\n  isPacket,\n  isPacketBlock,\n  isPie,\n  isPieSection,\n  parse\n};\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  MermaidGeneratedSharedModule,\n  PacketGeneratedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/packet/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/packet/tokenBuilder.ts\nvar PacketTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"PacketTokenBuilder\");\n  }\n  constructor() {\n    super([\"packet-beta\"]);\n  }\n};\n\n// src/language/packet/module.ts\nvar PacketModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new PacketTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createPacketServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Packet = inject(\n    createDefaultCoreModule({ shared }),\n    PacketGeneratedModule,\n    PacketModule\n  );\n  shared.ServiceRegistry.register(Packet);\n  return { shared, Packet };\n}\n__name(createPacketServices, \"createPacketServices\");\n\nexport {\n  PacketModule,\n  createPacketServices\n};\n","import baseEach from './_baseEach.js';\nimport isArrayLike from './isArrayLike.js';\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nexport default baseMap;\n","import baseExtremum from './_baseExtremum.js';\nimport baseLt from './_baseLt.js';\nimport identity from './identity.js';\n\n/**\n * Computes the minimum value of `array`. If `array` is empty or falsey,\n * `undefined` is returned.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Math\n * @param {Array} array The array to iterate over.\n * @returns {*} Returns the minimum value.\n * @example\n *\n * _.min([4, 2, 8, 6]);\n * // => 2\n *\n * _.min([]);\n * // => undefined\n */\nfunction min(array) {\n  return (array && array.length)\n    ? baseExtremum(array, identity, baseLt)\n    : undefined;\n}\n\nexport default min;\n","import baseClone from './_baseClone.js';\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * Creates a shallow clone of `value`.\n *\n * **Note:** This method is loosely based on the\n * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)\n * and supports cloning arrays, array buffers, booleans, date objects, maps,\n * numbers, `Object` objects, regexes, sets, strings, symbols, and typed\n * arrays. The own enumerable properties of `arguments` objects are cloned\n * as plain objects. An empty object is returned for uncloneable values such\n * as error objects, functions, DOM nodes, and WeakMaps.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to clone.\n * @returns {*} Returns the cloned value.\n * @see _.cloneDeep\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var shallow = _.clone(objects);\n * console.log(shallow[0] === objects[0]);\n * // => true\n */\nfunction clone(value) {\n  return baseClone(value, CLONE_SYMBOLS_FLAG);\n}\n\nexport default clone;\n","\"use strict\";\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CancellationTokenSource = exports.CancellationToken = void 0;\nconst ral_1 = require(\"./ral\");\nconst Is = require(\"./is\");\nconst events_1 = require(\"./events\");\nvar CancellationToken;\n(function (CancellationToken) {\n    CancellationToken.None = Object.freeze({\n        isCancellationRequested: false,\n        onCancellationRequested: events_1.Event.None\n    });\n    CancellationToken.Cancelled = Object.freeze({\n        isCancellationRequested: true,\n        onCancellationRequested: events_1.Event.None\n    });\n    function is(value) {\n        const candidate = value;\n        return candidate && (candidate === CancellationToken.None\n            || candidate === CancellationToken.Cancelled\n            || (Is.boolean(candidate.isCancellationRequested) && !!candidate.onCancellationRequested));\n    }\n    CancellationToken.is = is;\n})(CancellationToken || (exports.CancellationToken = CancellationToken = {}));\nconst shortcutEvent = Object.freeze(function (callback, context) {\n    const handle = (0, ral_1.default)().timer.setTimeout(callback.bind(context), 0);\n    return { dispose() { handle.dispose(); } };\n});\nclass MutableToken {\n    constructor() {\n        this._isCancelled = false;\n    }\n    cancel() {\n        if (!this._isCancelled) {\n            this._isCancelled = true;\n            if (this._emitter) {\n                this._emitter.fire(undefined);\n                this.dispose();\n            }\n        }\n    }\n    get isCancellationRequested() {\n        return this._isCancelled;\n    }\n    get onCancellationRequested() {\n        if (this._isCancelled) {\n            return shortcutEvent;\n        }\n        if (!this._emitter) {\n            this._emitter = new events_1.Emitter();\n        }\n        return this._emitter.event;\n    }\n    dispose() {\n        if (this._emitter) {\n            this._emitter.dispose();\n            this._emitter = undefined;\n        }\n    }\n}\nclass CancellationTokenSource {\n    get token() {\n        if (!this._token) {\n            // be lazy and create the token only when\n            // actually needed\n            this._token = new MutableToken();\n        }\n        return this._token;\n    }\n    cancel() {\n        if (!this._token) {\n            // save an object by returning the default\n            // cancelled token when cancellation happens\n            // before someone asks for the token\n            this._token = CancellationToken.Cancelled;\n        }\n        else {\n            this._token.cancel();\n        }\n    }\n    dispose() {\n        if (!this._token) {\n            // ensure to initialize with an empty token if we had none\n            this._token = CancellationToken.None;\n        }\n        else if (this._token instanceof MutableToken) {\n            // actually dispose\n            this._token.dispose();\n        }\n    }\n}\nexports.CancellationTokenSource = CancellationTokenSource;\n","import {\n  AbstractMermaidTokenBuilder,\n  CommonValueConverter,\n  InfoGeneratedModule,\n  MermaidGeneratedSharedModule,\n  __name\n} from \"./chunk-Y27MQZ3U.mjs\";\n\n// src/language/info/module.ts\nimport {\n  EmptyFileSystem,\n  createDefaultCoreModule,\n  createDefaultSharedCoreModule,\n  inject\n} from \"langium\";\n\n// src/language/info/tokenBuilder.ts\nvar InfoTokenBuilder = class extends AbstractMermaidTokenBuilder {\n  static {\n    __name(this, \"InfoTokenBuilder\");\n  }\n  constructor() {\n    super([\"info\", \"showInfo\"]);\n  }\n};\n\n// src/language/info/module.ts\nvar InfoModule = {\n  parser: {\n    TokenBuilder: /* @__PURE__ */ __name(() => new InfoTokenBuilder(), \"TokenBuilder\"),\n    ValueConverter: /* @__PURE__ */ __name(() => new CommonValueConverter(), \"ValueConverter\")\n  }\n};\nfunction createInfoServices(context = EmptyFileSystem) {\n  const shared = inject(\n    createDefaultSharedCoreModule(context),\n    MermaidGeneratedSharedModule\n  );\n  const Info = inject(\n    createDefaultCoreModule({ shared }),\n    InfoGeneratedModule,\n    InfoModule\n  );\n  shared.ServiceRegistry.register(Info);\n  return { shared, Info };\n}\n__name(createInfoServices, \"createInfoServices\");\n\nexport {\n  InfoModule,\n  createInfoServices\n};\n","import baseFlatten from './_baseFlatten.js';\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nexport default flatten;\n","import assignValue from './_assignValue.js';\nimport castPath from './_castPath.js';\nimport isIndex from './_isIndex.js';\nimport isObject from './isObject.js';\nimport toKey from './_toKey.js';\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n      return object;\n    }\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nexport default baseSet;\n","import baseGet from './_baseGet.js';\nimport baseSet from './_baseSet.js';\nimport castPath from './_castPath.js';\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nexport default basePickBy;\n","import baseGetTag from './_baseGetTag.js';\nimport isArray from './isArray.js';\nimport isObjectLike from './isObjectLike.js';\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a string, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);\n}\n\nexport default isString;\n","import baseRest from './_baseRest.js';\nimport eq from './eq.js';\nimport isIterateeCall from './_isIterateeCall.js';\nimport keysIn from './keysIn.js';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns own and inherited enumerable string keyed properties of source\n * objects to the destination object for all destination properties that\n * resolve to `undefined`. Source objects are applied from left to right.\n * Once a property is set, additional values of the same property are ignored.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @see _.defaultsDeep\n * @example\n *\n * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });\n * // => { 'a': 1, 'b': 2 }\n */\nvar defaults = baseRest(function(object, sources) {\n  object = Object(object);\n\n  var index = -1;\n  var length = sources.length;\n  var guard = length > 2 ? sources[2] : undefined;\n\n  if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n    length = 1;\n  }\n\n  while (++index < length) {\n    var source = sources[index];\n    var props = keysIn(source);\n    var propsIndex = -1;\n    var propsLength = props.length;\n\n    while (++propsIndex < propsLength) {\n      var key = props[propsIndex];\n      var value = object[key];\n\n      if (value === undefined ||\n          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {\n        object[key] = source[key];\n      }\n    }\n  }\n\n  return object;\n});\n\nexport default defaults;\n"],"names":["findIndexFunc","collection","predicate","fromIndex","iterable","Object","isArrayLike","iteratee","baseIteratee","keys","key","index","undefined","nativeMax","Math","max","createFind","array","length","toInteger","baseFindIndex","_ral","RAL","Error","defineProperty","exports","value","install","ral","__defProp","__name","target","configurable","item","reflection","isInstance","Branch","Commit","GitGraph","Merge","loadedInfoGrammar","loadedPacketGrammar","loadedPieGrammar","loadedArchitectureGrammar","loadedGitGraphGrammar","MermaidAstReflection","AbstractAstReflection","this","getAllTypes","computeIsSubtype","subtype","supertype","isSubtype","getReferenceType","refInfo","referenceId","container","$type","property","getTypeMetaData","type","name","properties","defaultValue","InfoGrammar","loadGrammarFromJson","PacketGrammar","PieGrammar","ArchitectureGrammar","GitGraphGrammar","InfoLanguageMetaData","languageId","fileExtensions","caseInsensitive","PacketLanguageMetaData","PieLanguageMetaData","ArchitectureLanguageMetaData","GitGraphLanguageMetaData","MermaidGeneratedSharedModule","AstReflection","InfoGeneratedModule","Grammar","LanguageMetaData","parser","PacketGeneratedModule","PieGeneratedModule","ArchitectureGeneratedModule","GitGraphGeneratedModule","rulesRegexes","ACC_DESCR","ACC_TITLE","TITLE","AbstractMermaidValueConverter","DefaultValueConverter","runConverter","rule","input","cstNode","runCommonConverter","runCustomConverter","super","_cstNode","regex","match","exec","trim","replace","CommonValueConverter","_rule","_input","AbstractMermaidTokenBuilder","DefaultTokenBuilder","constructor","keywords","Set","buildKeywordTokens","rules","terminalTokens","options","tokenTypes","forEach","tokenType","has","PATTERN","RegExp","toString","isArray","arrayMap","baseMap","string","String","Array","stringArray","func","error","number","boolean","Number","every","elem","Emitter","Event","ral_1","require","_disposable","dispose","None","CallbackList","add","callback","context","arguments","bucket","_callbacks","_contexts","push","remove","foundCallbackWithDifferentContext","i","len","splice","invoke","ret","callbacks","slice","contexts","_len","args","_key","apply","e","default","console","isEmpty","_options","event","_event","listener","thisArgs","disposables","onFirstListenerAdd","result","_noop","onLastListenerRemove","fire","call","hasOwnProperty","prototype","object","path","hasPath","baseHas","comparator","current","computed","isSymbol","ArchitectureTokenBuilder","ArchitectureValueConverter","ArchitectureModule","TokenBuilder","ValueConverter","createArchitectureServices","EmptyFileSystem","shared","inject","createDefaultSharedCoreModule","Architecture","createDefaultCoreModule","ServiceRegistry","register","GitGraphTokenBuilder","GitGraphModule","createGitGraphServices","PieTokenBuilder","PieValueConverter","PieModule","createPieServices","Pie","other","toFinite","remainder","isAstNode","obj","isReference","$refText","isLinkingError","reference","message","subtypes","allSubtypes","node","nested","existing","getAllSubTypes","allTypes","types","possibleSubType","isCompositeCstNode","content","isLeafCstNode","isRootCstNode","fullText","StreamImpl","startFn","nextFn","iterator","state","next","Symbol","Boolean","done","count","toArray","toSet","toMap","keyFn","valueFn","entryStream","map","element","Map","join","concat","first","firstDone","DONE_RESULT","separator","addSeparator","indexOf","searchElement","some","callbackfn","filter","nonNullable","reduce","initialValue","previousValue","reduceRight","recursiveReduce","find","findIndex","includes","flatMap","mapped","isIterable","flat","depth","stream","head","tail","skipCount","limit","maxSize","size","distinct","by","set","exclude","otherKeySet","ownKey","EMPTY_STREAM","freeze","collections","collIndex","arrIndex","TreeStreamImpl","root","children","iterators","includeRoot","pruned","pop","prune","Reduction","RangeComparison","streamCst","tokenToRange","token","start","character","startColumn","line","startLine","end","endColumn","endLine","toDocumentSegment","offset","range","inRange","to","comparison","Before","After","startInside","endInside","Inside","OverlapBack","OverlapFront","compareRange","sum","a","b","product","min","DefaultNameRegexp","findCommentNode","commentNames","previous","hidden","parent","getPreviousNode","isCommentNode","child","ErrorWithLocation","assertUnreachable","_","AbstractRule","AbstractType","Condition","TypeDefinition","ValueLiteral","AbstractElement","ArrayLiteral","ArrayType","BooleanLiteral","Conjunction","Disjunction","InferredType","isInferredType","Interface","isInterface","Negation","NumberLiteral","Parameter","ParameterReference","ParserRule","isParserRule","ReferenceType","ReturnType","SimpleType","StringLiteral","TerminalRule","isTerminalRule","Type","isType","UnionType","Action","isAction","Alternatives","isAlternatives","Assignment","isAssignment","CharacterRange","CrossReference","isCrossReference","EndOfFile","Group","isGroup","Keyword","isKeyword","NegatedToken","RegexToken","RuleCall","isRuleCall","TerminalAlternatives","TerminalGroup","TerminalRuleCall","isTerminalRuleCall","UnorderedGroup","isUnorderedGroup","UntilToken","Wildcard","LangiumGrammarAstReflection","linkContentToContainer","entries","startsWith","$container","$containerProperty","$containerIndex","getContainerOfType","typePredicate","getDocument","rootNode","findRootNode","$document","streamContents","keyIndex","arrayIndex","isAstNodeInRange","streamAllContents","streamAst","astNode","nodeRange","_a","$cstNode","streamReferences","copyDefaultValue","propertyType","cc","char","charCodeAt","insertToSet","subItem","addFlag","flagObj","flagKey","ASSERT_EXISTS","ASSERT_NEVER_REACH_HERE","isCharacter","digitsCharCodes","wordCharCodes","whitespaceCodes","hexDigitPattern","decimalPattern","decimalPatternNoZero","RegExpParser","idx","groupIdx","saveState","restoreState","newState","pattern","consumeChar","disjunction","flags","loc","begin","global","ignoreCase","multiLine","unicode","sticky","isRegExpFlag","popChar","substring","alts","alternative","peekChar","terms","isTerm","term","isAssertion","assertion","atom","quantifier","isBacktracking","atLeast","atMost","Infinity","integerIncludingZero","isDigit","greedy","dotAll","atomEscape","characterClass","group","isPatternCharacter","patternCharacter","isQuantifier","complement","decimalEscapeAtom","characterClassEscape","controlEscapeAtom","controlLetterEscapeAtom","nulCharacterAtom","hexEscapeSequenceAtom","regExpUnicodeEscapeSequenceAtom","identityEscapeAtom","positiveInteger","escapeCode","letter","test","toUpperCase","parseHexDigits","classPatternCharacterAtom","isClassAtom","from","classAtom","isRangeDash","classEscape","capturing","groupAst","parseInt","nextChar","howMuch","isAtom","prevState","howMany","hexString","hexChar","BaseRegExpVisitor","visitChildren","visit","subChild","visitPattern","visitFlags","visitDisjunction","visitAlternative","visitStartAnchor","visitEndAnchor","visitWordBoundary","visitNonWordBoundary","visitLookahead","visitNegativeLookahead","visitCharacter","visitSet","visitGroup","visitGroupBackReference","visitQuantifier","NEWLINE_REGEXP","regexpParser","visitor","isStarting","endRegexpStack","multiline","endRegex","reset","startRegexp","fromCharCode","escapedChar","escapeRegExp","isMultilineComment","regexp","isWhitespace","partialMatches","partial","re","source","process","tmp","appendRaw","nbChars","substr","appendOptional","lastIndex","partialRegExp","getAllReachableRules","grammar","allTerminals","ruleNames","entryRule","ast","entry","getEntryRule","topMostRules","getHiddenRules","ruleDfs","visitedSet","refRule","ref","findNodeForProperty","nodes","findNodesForPropertyInternal","nodeFeature","grammarSource","feature","findNodesForKeywordInternal","keyword","treeIterator","keywordNodes","childNode","findNameAssignment","startNode","findNameAssignmentInternal","cache","go","refType","childAssignment","get","toLowerCase","typeRef","isDataTypeRule","isDataTypeRuleInternal","visited","definition","getExplicitRuleType","inferredType","dataType","returnType","getTypeName","actionType","action","getActionType","terminalRegex","terminalRule","s","u","abstractElementToRegex","flagText","_ref","_ref2","WILDCARD","withCardinality","alternatives","elements","cardinality","lookahead","right","keywordToRegex","left","wrap","characterRangeToRegex","negate","terminal","negateTokenToRegex","until","lastSlash","lastIndexOf","regexFlags","toFastProperties","toBecomeFast","FakeConstructor","fakeInstance","fakeAccess","bar","n","guard","baseSlice","createAssigner","isPrototype","copyObject","assignValue","props","getAllKeysIn","prop","basePickBy","isObjectLike","baseGetTag","nodeIsRegExp","nodeUtil","isRegExp","baseUnary","baseIsRegExp","tokenLabel","tokType","isString","LABEL","AbstractProduction","_definition","accept","prod","NonTerminal","assign","pickBy","v","referencedRule","Rule","orgText","Alternative","ignoreAmbiguities","Option","RepetitionMandatory","RepetitionMandatoryWithSeparator","Repetition","RepetitionWithSeparator","Alternation","hasPredicates","Terminal","serializeProduction","convertDefinition","serializedNonTerminal","nonTerminalName","label","terminalType","serializedTerminal","terminalLabel","GAstVisitor","nodeAny","visitNonTerminal","visitOption","visitRepetitionMandatory","visitRepetitionMandatoryWithSeparator","visitRepetitionWithSeparator","visitRepetition","visitAlternation","visitTerminal","visitRule","baseEach","arraySome","baseSome","isIterateeCall","values","baseIndexOf","arrayEvery","baseEvery","isOptionalProd","alreadyVisited","subProd","getProductionDslName","RestWalker","walk","prevRest","currRest","drop","walkProdRef","walkTerminal","walkFlat","walkOption","walkAtLeastOne","walkAtLeastOneSep","walkManySep","walkMany","walkOr","refProd","flatProd","fullOrRest","optionProd","atLeastOneProd","fullAtLeastOneRest","atLeastOneSepProd","fullAtLeastOneSepRest","restForRepetitionWithSeparator","manyProd","fullManyRest","manySepProd","fullManySepRest","orProd","alt","prodWrapper","repSepProd","baseUniq","isSequenceProd","firstSet","seq","currSubProd","nextSubProdIdx","hasInnerProdsRemaining","isLastInnerProdOptional","uniq","firstForSequence","isBranchingProd","allAlternativesFirsts","innerProd","flatten","firstForBranching","IN","ResyncFollowsWalker","topProd","follows","startWalking","followName","inner","occurenceInParent","fullRest","t_in_topProd_follows","TypeError","arrayFilter","baseFilter","arrayIncludes","isCommon","valuesLength","arrayIncludesWith","cacheHas","SetCache","outer","valuesIndex","baseRest","isArrayLikeObject","baseDifference","baseFlatten","resIndex","PRINT_ERROR","msg","PRINT_WARNING","warn","regExpAstCache","regExpParser","getRegExpAst","regExp","regExpStr","regExpAst","complementErrorMessage","failedOptimizationPrefixMsg","getOptimizedStartCodesIndices","ensureOptimizations","firstCharOptimizedIndices","msgSuffix","addOptimizedIdxToResult","code","rangeCode","minOptimizationVal","minUnOptVal","maxUnOptVal","minOptIdx","charCodeToOptimizedIndex","maxOptIdx","currOptIdx","isOptionalQuantifier","isWholeOptional","optimizedCharIdx","upperChar","lowerChar","handleIgnoreCase","findCode","setNode","targetCharCodes","codeOrRange","targetCode","CharCodeFinder","found","canMatchCharCode","charCodes","charCodeFinder","DEFAULT_MODE","MODES","SUPPORT_STICKY","analyzeTokenTypes","tracer","defaults","useSticky","debug","safeMode","positionTracking","lineTerminatorCharacters","onlyRelevantTypes","charCodeToOptimizedIdxMap","initCharCodeToOptimizedIndexMap","reject","currType","Lexer","NA","allTransformedPatterns","patternIdxToType","patternIdxToGroup","patternIdxToLongerAltIdxArr","patternIdxToPushMode","patternIdxToPopMode","patternIdxToCanLineTerminator","patternIdxToIsCustom","patternIdxToShort","emptyGroups","patternIdxToConfig","hasCustom","currPattern","regExpSource","addStickyFlag","addStartOfInput","isFunction","escapedRegExpString","wrappedRegExp","tokenTypeIdx","clazz","groupName","GROUP","SKIPPED","isUndefined","longerAltType","LONGER_ALT","PUSH_MODE","lineTerminatorCharCodes","getCharCodes","LINE_BREAKS","checkLineBreaksIssues","isCustomPattern","isShortPattern","acc","x","longerAlt","canLineTerminator","isCustom","short","canBeOptimized","charCodeToPatternIdxToConfig","currTokType","optimizedIdx","addToMapOfArrays","START_CHARS_HINT","lastOptimizedIdx","charOrInt","currOptimizedIdx","optimizedCodes","validatePatterns","validModesNames","errors","missingResult","tokenTypesWithMissingPattern","LexerDefinitionErrorType","MISSING_PATTERN","valid","difference","findMissingPatterns","invalidResult","tokenTypesWithInvalidPattern","INVALID_PATTERN","findInvalidPatterns","validTokenTypes","withRegExpPatterns","EndAnchorFinder","invalidRegex","regexpAst","endAnchorVisitor","end_of_input","EOI_ANCHOR_FOUND","findEndOfInputAnchor","StartAnchorFinder","startAnchorVisitor","start_of_input","SOI_ANCHOR_FOUND","findStartOfInputAnchor","invalidFlags","UNSUPPORTED_FLAGS_FOUND","findUnsupportedFlags","identicalPatterns","outerType","innerType","compact","duplicatePatterns","currIdenticalSet","setOfIdentical","tokenTypeNames","DUPLICATE_PATTERNS_FOUND","findDuplicatePatterns","matchesEmptyString","EMPTY_MATCH_PATTERN","findEmptyMatchRegExps","validateRegExpPattern","invalidTypes","INVALID_GROUP_TYPE_FOUND","findInvalidGroupType","validModes","invalidModes","PUSH_MODE_DOES_NOT_EXIST","findModesThatDoNotExist","canBeTested","str","metaChars","noMetaChar","testIdx","regExpArray","testTokenType","UNREACHABLE_PATTERN","findUnreachablePatterns","performWarningRuntimeChecks","lexerDefinition","trackLines","warnings","hasAnyLineBreak","allTokenTypes","modes","concreteTokenTypes","terminatorCharCodes","currIssue","details","issue","IDENTIFY_TERMINATOR","errMsg","CUSTOM_LINE_BREAK","buildLineBreakIssueMessage","warningDescriptor","NO_LINE_BREAKS_FLAGS","LineTerminatorOptimizedTester","text","c","charsOrCodes","numOrString","charCode","timer","Date","getTime","val","time","tokenStructuredMatcher","tokInstance","tokConstructor","instanceType","isParent","categoryMatchesMap","tokenStructuredMatcherNoCategories","tokenShortNameIdx","tokenIdxToClass","augmentTokenTypes","tokenTypesAndParents","clone","categories","searching","CATEGORIES","newCategories","expandCategories","hasShortKeyProperty","hasCategoriesProperty","categoryMatches","hasExtendingTokensTypesMapProperty","assignTokenDefaultProps","singleAssignCategoriesToksMap","assignCategoriesMapProp","assignCategoriesTokensProp","nextNode","pathNode","nextCategory","newPath","isTokenType","defaultLexerErrorProvider","buildUnableToPopLexerModeMessage","image","buildUnexpectedCharactersMessage","startOffset","column","charAt","DEFAULT_LEXER_CONFIG","deferDefinitionErrorsHandling","lineTerminatorsPattern","errorMessageProvider","traceInitPerf","skipValidations","recoveryEnabled","config","lexerDefinitionErrors","lexerDefinitionWarning","trackStartLines","trackEndLines","canModeBeOptimized","TRACE_INIT","phaseDesc","phaseImpl","traceInitIndent","indent","traceInitMaxIdent","log","traceMethod","traceInitVal","actualDefinition","hasOnlySingleMode","defaultMode","MULTI_MODE_LEXER_WITHOUT_DEFAULT_MODE","MULTI_MODE_LEXER_WITHOUT_MODES_PROPERTY","MULTI_MODE_LEXER_DEFAULT_MODE_VALUE_DOES_NOT_EXIST","currModeValue","currModeName","currIdx","LEXER_DEFINITION_CANNOT_CONTAIN_UNDEFINED","currLongerAlt","MULTI_MODE_LEXER_LONGER_ALT_NOT_IN_CURRENT_MODE","performRuntimeChecks","allModeNames","currModDef","currModName","currAnalyzeResult","allErrMessagesString","chopInput","identity","matchWithTest","updateLastIndex","noop","matchWithExec","handleModes","computeNewColumn","updateTokenEndLineColumnLocation","createTokenInstance","createFullToken","createStartOnlyToken","createOffsetOnlyToken","addToken","addTokenUsingPush","handlePayload","handlePayloadWithCustom","addTokenUsingMemberAccess","handlePayloadNoCustom","unOptimizedModes","cannotBeOptimized","modeName","tokenize","initialMode","tokenizeInternal","j","k","matchAltImage","matchedImage","payload","altPayload","imageLength","newToken","errLength","orgLength","matchedTokensIndex","guessedNumberOfTokens","floor","matchedTokens","groups","clonedResult","groupKeys","currKey","currGroupValue","cloneEmptyGroups","lineTerminatorPattern","currModePatternsLength","currCharCodeToPatternIdxToConfig","modeStack","emptyArray","getPossiblePatterns","getPossiblePatternsSlow","getPossiblePatternsOptimized","possiblePatterns","pop_mode","popToken","newMode","last","modeCanBeOptimized","push_mode","currConfig","nextCharCode","chosenPatternIdxToConfig","chosenPatternsLength","singleCharCode","longerAltLength","longerAltConfig","longerAltPattern","foundTerminator","lastLTEndOffset","numOfLTsInMatch","errorStartOffset","errorLine","errorColumn","foundResyncPoint","tokens","pushMode","newLastIndex","lastLTIdx","lastCharIsLT","fixForEndingInLT","oldColumn","endOffset","tokenVector","tokenToAdd","hasTokenLabel","PARENT","POP_MODE","createToken","createTokenInternal","EOF","tokenMatcher","defaultParserErrorProvider","buildMismatchTokenMessage","expected","actual","ruleName","buildNotAllInputParsedMessage","firstRedundant","buildNoViableAltMessage","_ref3","expectedPathsPerAlt","customUserDescription","errPrefix","errSuffix","allLookAheadPaths","currAltPaths","nextValidTokenSequences","currPath","currTokenType","itemMsg","buildEarlyExitMessage","_ref4","expectedIterationPaths","defaultGrammarResolverErrorProvider","buildRuleNotFoundError","topLevelRule","undefinedRule","defaultGrammarValidatorErrorProvider","buildDuplicateFoundError","duplicateProds","topLevelName","duplicateProd","dslName","extraArgument","buildNamespaceConflictError","buildAlternationPrefixAmbiguityError","pathMsg","prefixPath","currTok","occurrence","alternation","ambiguityIndices","buildAlternationAmbiguityError","currtok","currMessage","buildEmptyRepetitionError","repetition","buildTokenNameError","buildEmptyAlternationError","emptyChoiceIdx","buildTooManyAlternativesError","buildLeftRecursionError","leftRecursionPath","currRule","buildInvalidRuleNameError","buildDuplicateRuleNameError","grammarName","GastRefResolverVisitor","nameToTopRule","errMsgProvider","resolveRefs","currTopLevel","ParserDefinitionErrorType","UNRESOLVED_SUBRULE_REF","unresolvedRefName","setter","accumulator","initializer","arrayAggregator","baseAggregator","createAggregator","baseAssignValue","AbstractNextPossibleTokensWalker","possibleTokTypes","nextProductionName","nextProductionOccurrence","isAtEndOfPath","ruleStack","reverse","occurrenceStack","updateExpectedNext","NextAfterTokenWalker","nextTerminalName","nextTerminalOccurrence","lastTok","lastTokOccurrence","restProd","AbstractNextTerminalAfterProductionWalker","topRule","isEndOfRule","NextTerminalAfterManyWalker","firstAfterMany","_first","NextTerminalAfterManySepWalker","firstAfterManySep","NextTerminalAfterAtLeastOneWalker","firstAfterAtLeastOne","NextTerminalAfterAtLeastOneSepWalker","atleastOneSepProd","firstAfterfirstAfterAtLeastOneSep","possiblePathsFrom","targetDef","maxLength","getAlternativesForProd","newDef","currAlt","partialPath","suffixDef","nextPossibleTokensAfter","initialDef","tokMatcher","maxLookAhead","EXIT_NON_TERMINAL","EXIT_NON_TERMINAL_ARR","EXIT_ALTERNATIVE","foundCompletePath","tokenVectorLength","minimalAlternativesIndex","possiblePaths","def","currDef","currRuleStack","currOccurrenceStack","nextPath","dropRight","nextIdx","nextTokenType","nextTokenOccurrence","newRuleStack","newOccurrenceStack","nextPathWithout","nextPathWith","secondIteration","separatorGast","nthRepetition","currAltPath","expandTopLevelRule","newCurrOccurrenceStack","PROD_TYPE","getProdType","OPTION","REPETITION","REPETITION_MANDATORY","REPETITION_MANDATORY_WITH_SEPARATOR","REPETITION_WITH_SEPARATOR","ALTERNATION","getLookaheadPaths","prodType","maxLookahead","getLookaheadPathsForOr","getLookaheadPathsForOptionalProd","buildAlternativesLookAheadFunc","dynamicTokensEnabled","numOfAlts","areAllOneTokenLookahead","orAlts","predicates","GATE","t","currNumOfPaths","currPredicate","currPathLength","nextToken","LA","singleTokenAlts","choiceToAlt","currExtendingType","buildSingleAlternativeLookaheadFunction","numOfPaths","singleTokensTypes","expectedTokenUniqueKey","RestDefinitionFinderWalker","targetOccurrence","targetProdType","restDef","checkIsTarget","expectedProdType","InsideDefinitionFinderVisitor","targetRef","expectedProdName","initializeArrayOfArrays","pathToHashKeys","longerKeys","currShorterKey","categoriesKeySuffix","isUniquePrefixHash","altKnownPathsKeys","searchPathKeys","currAltIdx","otherAltKnownPathsKeys","searchIdx","lookAheadSequenceFromAlternatives","altsDefs","partialAlts","finalResult","altsHashes","dict","newData","pathLength","currDataset","altIdx","currAltPathsAndSuffixes","currPathIdx","currPathPrefix","prefixKeys","currAltResult","containsPath","newPartialPathsAndSuffixes","ruleGrammar","insideDefVisitor","insideDef","afterDef","AlternativeGAST","searchPath","compareOtherPath","otherPath","searchTok","otherTok","areTokenCategoriesNotUsed","lookAheadPaths","singleAltPaths","singlePath","validateGrammar","topLevels","duplicateErrors","collectorVisitor","OccurrenceValidationCollector","allRuleProductions","allProductions","productionGroups","groupBy","identifyProductionForDuplicates","duplicates","currGroup","currDuplicates","firstProd","defError","DUPLICATE_PRODUCTIONS","param","getExtraProductionArgument","parameter","validateDuplicateProductions","termsNamespaceConflictErrors","tokenNames","currToken","currRuleName","CONFLICT_TOKENS_RULES_NAMESPACE","checkTerminalAndNoneTerminalsNameSpace","tooManyAltsErrors","curRule","orCollector","OrCollector","ors","alternations","currOr","TOO_MANY_ALTS","validateTooManyAlts","duplicateRulesError","allRules","className","occurrences","DUPLICATE_RULE_NAME","validateRuleDoesNotAlreadyExist","subrule","option","manySep","atLeastOne","atLeastOneSep","many","or","validateNoLeftRecursion","nextNonTerminals","getFirstNoneTerminal","LEFT_RECURSION","validNextSteps","errorsFromNextSteps","currRefRule","currSubDef","isFirstOptional","hasMore","rest","validateAmbiguousAlternationAlternatives","globalMaxLookahead","currOccurrence","actualMaxLookahead","altsAmbiguityErrors","foundAmbiguousPaths","identicalAmbiguities","altsCurrPathAppearsIn","currOtherAlt","currOtherAltIdx","currErrors","currAmbDescriptor","ambgIndices","AMBIGUOUS_ALTS","checkAlternativesAmbiguities","altsPrefixAmbiguityErrors","pathsAndIndices","currPathsAndIdx","currPathAndIdx","targetIdx","targetPath","prefixAmbiguitiesPathsAndIndices","searchPathAndIdx","prefix","otherTokType","currAmbPathAndIdx","AMBIGUOUS_PREFIX_ALTS","checkPrefixAlternativesAmbiguities","RepetitionCollector","resolveGrammar","actualOptions","topRulesTable","refResolver","orgResolveGrammar","MISMATCHED_TOKEN_EXCEPTION","NO_VIABLE_ALT_EXCEPTION","EARLY_EXIT_EXCEPTION","NOT_ALL_INPUT_PARSED_EXCEPTION","RECOGNITION_EXCEPTION_NAMES","isRecognitionException","RecognitionException","resyncedTokens","setPrototypeOf","captureStackTrace","MismatchedTokenException","previousToken","NoViableAltException","NotAllInputParsedException","EarlyExitException","EOF_FOLLOW_KEY","IN_RULE_RECOVERY_EXCEPTION","InRuleRecoveryException","attemptInRepetitionRecovery","prodFunc","lookaheadFunc","dslMethodIdx","prodOccurrence","nextToksWalker","notStuck","getKeyForAutomaticLookahead","firstAfterRepInfo","firstAfterRepMap","getCurrRuleFullName","getGAstProductions","expectTokAfterLastMatch","nextTokIdx","RULE_STACK","shouldInRepetitionRecoveryBeTried","tryInRepetitionRecovery","AT_LEAST_ONE_IDX","MANY_SEP_IDX","AT_LEAST_ONE_SEP_IDX","ruleIdx","LLkLookaheadStrategy","DEFAULT_PARSER_CONFIG","validate","leftRecursionErrors","emptyAltErrors","validateEmptyOrAlternatives","ambiguousAltsErrors","emptyRepetitionErrors","validateSomeNonEmptyLookaheadPath","currTopRule","exceptLast","currAlternative","possibleFirstInAlt","NONE_LAST_EMPTY_ALT","validateEmptyOrAlternative","topLevelRules","currProd","pathsInsideProduction","NO_NON_EMPTY_LOOKAHEAD","buildLookaheadForAlternation","laFuncBuilder","buildLookaheadFuncForOr","buildLookaheadForOptional","lookaheadBuilder","buildLookaheadFuncForOptionalProd","dslMethods","repetitionWithSeparator","repetitionMandatory","repetitionMandatoryWithSeparator","setNodeLocationOnlyOffset","currNodeLocation","newLocationInfo","isNaN","setNodeLocationFull","defineNameProp","nameValue","enumerable","writable","defaultVisit","ctx","childrenNames","childrenNamesLength","currChildArray","currChildArrayLength","currChild","createBaseSemanticVisitorConstructor","derivedConstructor","semanticProto","validateVisitor","semanticDefinitionErrors","visitorInstance","missingErrors","missingRuleNames","CstVisitorDefinitionError","MISSING_METHOD","methodName","validateMissingCstMethods","errorMessages","currDefError","_RULE_NAMES","RECORDING_NULL_OBJECT","description","HANDLE_SEPARATOR","MAX_METHOD_IDX","pow","RFT","RECORDING_PHASE_TOKEN","RECORDING_PHASE_CSTNODE","recordProd","prodConstructor","mainProdArg","handleSep","assertMethodIdxIsValid","prevProd","peek","recordingProdStack","grammarAction","DEF","newProd","SEP","MAX_LOOKAHEAD","recordOrProd","hasOptions","newOrProd","IGNORE_AMBIGUITIES","currAltFlat","ALT","getIdxSuffix","KNOWN_RECORDER_ERROR","END_OF_FILE","NaN","outputCst","nodeLocationTracking","DEFAULT_RULE_CONFIG","recoveryValueFunc","resyncEnabled","derivedCtor","baseCtors","EMPTY_ALT","Parser","performSelfAnalysis","parserInstance","defErrorsMsgs","selfAnalysisDone","enableRecording","definedRulesNames","originalGrammarAction","recordedRuleGast","topLevelRuleRecord","gastProductionsCache","disableRecording","resolverErrors","definitionErrors","validationErrors","tokensMap","orgValidateGrammar","lookaheadValidationErrors","lookaheadValidationErrorMessages","lookaheadStrategy","errorMessage","CUSTOM_LOOKAHEAD_VALIDATION","validateLookahead","allFollows","topProductions","reSyncFollows","currRefsFollow","computeAllProdsFollows","resyncFollows","_b","initialize","preComputeLookaheadFunctions","DEFER_DEFINITION_ERRORS_HANDLING","tokenVocabulary","that","initErrorHandler","initLexerAdapter","initLooksAhead","initRecognizerEngine","initRecoverable","initTreeBuilder","initContentAssist","initGastRecorder","initPerformanceTracer","getTokenToInsert","tokToInsert","isInsertedInRecovery","canTokenTypeBeInsertedInRecovery","canTokenTypeBeDeletedInRecovery","grammarRule","grammarRuleArgs","lookAheadFunc","expectedTokType","reSyncTokType","findReSyncTokenType","savedLexerState","exportLexerState","passedResyncPoint","nextTokenWithoutResync","generateErrorMessage","SAVE_ERROR","SKIP_TOKEN","addToResyncTokens","importLexerState","isBackTracking","canPerformInRuleRecovery","getFollowsForInRuleRecovery","tokIdxInRule","grammarPath","getCurrentGrammarPath","getNextPossibleTokenTypes","tryInRuleRecovery","canRecoverWithSingleTokenInsertion","canRecoverWithSingleTokenDeletion","nextTok","consumeToken","expectedToken","mismatchedTok","possibleFollowsTokType","isInCurrentRuleReSyncSet","followKey","getCurrFollowKey","currentRuleReSyncSet","getFollowSetFromFollowKey","allPossibleReSyncTokTypes","flattenFollowSet","foundMatch","resyncTokType","currRuleShortName","getLastExplicitRuleShortName","currRuleIdx","getLastExplicitRuleOccurrenceIndex","prevRuleShortName","getPreviousExplicitRuleShortName","shortRuleNameToFullName","idxInCallingRule","inRule","buildFullFollowKeyStack","explicitRuleStack","explicitOccurrenceStack","RULE_OCCURRENCE_STACK","followStack","resyncTokens","reSyncTo","getHumanReadableRuleStack","currShortName","lookAheadFuncsCache","collectMethods","prodIdx","laFunc","fullRuleNameToShort","setLaFuncCache","computeLookaheadFunc","prodKey","prodMaxLookahead","dslMethodName","getLaFuncFromCache","CST_STACK","setNodeLocationFromToken","setNodeLocationFromNode","cstPostRule","setInitialNodeLocation","setInitialNodeLocationFullRecovery","cstPostRuleFull","setInitialNodeLocationFullRegular","setInitialNodeLocationOnlyOffsetRecovery","cstPostRuleOnlyOffset","setInitialNodeLocationOnlyOffsetRegular","cstInvocationStateUpdate","cstFinallyStateUpdate","cstPostTerminal","cstPostNonTerminal","location","fullRuleName","create","ruleCstNode","prevToken","consumedToken","rootCst","tokenTypeName","ruleCstResult","preCstNode","ruleResult","addNoneTerminalToCst","getBaseCstVisitorConstructor","baseCstVisitorConstructor","newBaseCstVisitorConstructor","getBaseCstVisitorConstructorWithDefaults","baseCstVisitorWithDefaultsConstructor","newConstructor","baseConstructor","withDefaultsProto","createBaseVisitorConstructorWithDefaults","tokVector","tokVectorLength","newInput","soughtIdx","resetLexerState","moveToTerminatedState","getLexerPosition","shortRuleNameToFull","ruleShortNameIdx","subruleIdx","isBackTrackingStack","uniqueTokens","isObject","noTokenCategoriesUsed","tokenConstructor","defineRule","impl","shortName","BITS_FOR_METHOD_TYPE","invokeRuleWithTry","ruleInvocationStateUpdate","cst","invokeRuleCatch","ruleFinallyStateUpdate","_len2","_key2","resyncEnabledConfig","isFirstInvokedRule","reSyncEnabled","recogError","partialCstResult","recoveredNode","optionInternal","actionORMethodDef","optionInternalLogic","orgLookaheadFunction","atLeastOneInternal","laKey","atLeastOneInternalLogic","raiseEarlyExitException","ERR_MSG","doSingleRepetition","atLeastOneSepFirstInternal","atLeastOneSepFirstInternalLogic","separatorLookAheadFunc","CONSUME","repetitionSepSecondInternal","manyInternal","manyInternalLogic","lookaheadFunction","manySepFirstInternal","manySepFirstInternalLogic","nextTerminalAfterWalker","beforeIteration","orInternal","altsOrOpts","altIdxToTake","raiseNoAltException","isAtEndOfInput","firstRedundantTok","subruleInternal","ruleToCall","ARGS","subruleInternalError","consumeInternal","consumeInternalError","eFromConsumption","consumeInternalRecovery","eFromInRuleRecovery","saveRecogState","savedErrors","savedRuleStack","lexerState","reloadRecogState","fullName","ACTION","consume","CONSUME1","CONSUME2","CONSUME3","CONSUME4","CONSUME5","CONSUME6","CONSUME7","CONSUME8","CONSUME9","SUBRULE","SUBRULE1","SUBRULE2","SUBRULE3","SUBRULE4","SUBRULE5","SUBRULE6","SUBRULE7","SUBRULE8","SUBRULE9","OPTION1","OPTION2","OPTION3","OPTION4","OPTION5","OPTION6","OPTION7","OPTION8","OPTION9","OR","OR1","OR2","OR3","OR4","OR5","OR6","OR7","OR8","OR9","MANY","MANY1","MANY2","MANY3","MANY4","MANY5","MANY6","MANY7","MANY8","MANY9","MANY_SEP","MANY_SEP1","MANY_SEP2","MANY_SEP3","MANY_SEP4","MANY_SEP5","MANY_SEP6","MANY_SEP7","MANY_SEP8","MANY_SEP9","AT_LEAST_ONE","AT_LEAST_ONE1","AT_LEAST_ONE2","AT_LEAST_ONE3","AT_LEAST_ONE4","AT_LEAST_ONE5","AT_LEAST_ONE6","AT_LEAST_ONE7","AT_LEAST_ONE8","AT_LEAST_ONE9","AT_LEAST_ONE_SEP","AT_LEAST_ONE_SEP1","AT_LEAST_ONE_SEP2","AT_LEAST_ONE_SEP3","AT_LEAST_ONE_SEP4","AT_LEAST_ONE_SEP5","AT_LEAST_ONE_SEP6","AT_LEAST_ONE_SEP7","AT_LEAST_ONE_SEP8","AT_LEAST_ONE_SEP9","RULE","implementation","ruleImplementation","OVERRIDE_RULE","ruleErrors","INVALID_RULE_OVERRIDE","validateRuleIsOverridden","BACKTRACK","orgState","getSerializedGastProductions","topRules","_errors","ruleOccurrenceStack","newErrors","userDefinedErrMsg","insideProdPaths","actualTokens","errMsgTypes","lookAheadPathsPerAlternative","computeContentAssist","startRuleName","precedingInput","startRuleGast","topRuleName","topProduction","RECORDING_PHASE","arg1","arg2","consumeInternalRecord","subruleInternalRecord","optionInternalRecord","orInternalRecord","manyInternalRecord","manySepFirstInternalRecord","atLeastOneInternalRecord","atLeastOneSepFirstInternalRecord","ACTION_RECORD","BACKTRACK_RECORD","LA_RECORD","newTopLevelRule","originalError","mutabilityError","JSON","stringify","newNoneTerminal","userTraceInitPerf","traceIsNumber","baseCtor","baseProto","getOwnPropertyNames","propName","basePropDescriptor","getOwnPropertyDescriptor","EmbeddedActionsParser","configClone","buildATNKey","AbstractTransition","isEpsilon","AtomTransition","EpsilonTransition","RuleTransition","ruleStart","followState","createATN","atn","decisionMap","decisionStates","ruleToStartState","ruleToStopState","states","ruleLength","stop","createRuleStartAndStopATNStates","ruleBlock","block","buildRuleHandle","production","tokenRef","currentRule","nonTerminal","addTransition","ruleRef","defineDecisionState","handle","makeAlts","optional","epsilon","starState","star","sep","repetitionSep","plusState","plus","repetitionMandatorySep","handles","altsLength","transition","transitions","isRuleTransition","ruleTransition","removeState","makeBlock","blkStart","blkEnd","loop","loopback","loopEnd","decision","epsilonOnlyTransitions","nextTokenWithinRule","stateNumber","DFA_ERROR","ATNConfigSet","configs","finalize","getATNConfigKey","stack","createDFACache","startState","predicateSet","atnStartState","PredicateSet","is","EMPTY_PREDICATES","LLStarLookaheadStrategy","logging","dfas","decisionLength","decisionToDFA","initATNSimulator","decisionIndex","isLL1Sequence","prediction","gate","adaptivePredict","g","sequences","allowEmpty","fullSet","altSet","indices","dfaCaches","dfa","addDFAState","newDFAState","computeStartState","performLookahead","s0","previousD","d","edges","computeLookaheadTarget","buildAdaptivePredictError","isAcceptState","reach","intermediate","skippedStopStates","transitionLength","getReachableTarget","closure","hasConfigInRuleStopState","computeReachSet","addDFAEdge","predictedAlt","getUniqueAlt","uniqueAlt","allConfigsInRuleStopStates","altSets","configToAlts","getConflictingAltSets","hasConflictingAltSet","hasStateAssociatedWithOneAlt","hasConflictTerminatingPrediction","reportLookaheadAmbiguity","atnState","buildAmbiguityError","nextTransitions","actualToken","possibleTokenTypes","uniqBy","tokenPath","mapKey","numberOfTransitions","p","atnStack","getEpsilonTarget","DocumentUri","URI","integer","uinteger","Position","Range","Location","LocationLink","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","DiagnosticTag","CodeDescription","Diagnostic","Command","TextEdit","ChangeAnnotation","ChangeAnnotationIdentifier","AnnotatedTextEdit","TextDocumentEdit","CreateFile","RenameFile","DeleteFile","WorkspaceEdit","TextDocumentIdentifier","VersionedTextDocumentIdentifier","OptionalVersionedTextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItemTag","InsertReplaceEdit","InsertTextMode","CompletionItemLabelDetails","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolTag","SymbolInformation","WorkspaceSymbol","DocumentSymbol","CodeActionKind","CodeActionTriggerKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentLink","SelectionRange","SemanticTokenTypes","SemanticTokenModifiers","SemanticTokens","InlineValueText","InlineValueVariableLookup","InlineValueEvaluatableExpression","InlineValueContext","InlayHintKind","InlayHintLabelPart","InlayHint","StringValue","InlineCompletionItem","InlineCompletionList","InlineCompletionTriggerKind","SelectedCompletionInfo","InlineCompletionContext","WorkspaceFolder","MIN_VALUE","MAX_VALUE","candidate","Is","objectLiteral","one","two","three","four","uri","targetUri","targetRange","targetSelectionRange","originSelectionRange","red","green","blue","alpha","numberRange","color","textEdit","additionalTextEdits","typedArray","Comment","Imports","Region","startCharacter","endCharacter","kind","collapsedText","defined","Warning","Information","Hint","Unnecessary","Deprecated","href","severity","relatedInformation","codeDescription","title","command","newText","insert","position","del","needsConfirmation","annotation","annotationId","textDocument","edits","overwrite","ignoreIfExists","oldUri","newUri","recursive","ignoreIfNotExists","changes","documentChanges","change","version","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Module","Property","Unit","Value","Enum","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Operator","TypeParameter","asIs","adjustIndentation","detail","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","Key","Null","containerName","selectionRange","deprecated","tags","Empty","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","SourceFixAll","Invoked","Automatic","diagnostics","only","triggerKind","kindOrCommandOrEdit","checkKind","edit","isPreferred","data","tabSize","insertSpaces","resultId","variableName","caseSensitiveLookup","expression","frameId","stoppedLocation","tooltip","textEdits","paddingLeft","paddingRight","createSnippet","insertText","filterText","selectedCompletionInfo","TextDocument","mergeSort","compare","leftIdx","rightIdx","FullTextDocument","lineCount","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","diff","lastModifiedOffset","_uri","_languageId","_version","_content","_lineOffsets","update","getLineOffsets","lineOffsets","isLineStart","ch","low","high","mid","lineOffset","nextLineOffset","check","CstNodeBuilder","nodeStack","buildRootNode","RootCstNodeImpl","buildCompositeNode","compositeNode","CompositeCstNodeImpl","buildLeafNode","leafNode","LeafCstNodeImpl","removeNode","construct","addHiddenTokens","hiddenTokens","hiddenNode","addHiddenToken","tokenStart","tokenEnd","childStart","childEnd","AbstractCstNode","_astNode","_offset","_length","_hidden","_tokenType","_range","CstNodeContainer","firstNonHiddenNode","lastNonHiddenNode","firstNode","lastNode","_rangeCache","firstRange","lastRange","addParents","unshift","_len3","_key3","_text","DatatypeSymbol","isDataTypeNode","withRuleSuffix","endsWith","AbstractLangiumParser","services","_unorderedGroups","lexer","wrapper","ChevrotainWrapper","ParserConfig","ParserErrorMessageProvider","choices","wrapOr","wrapOption","wrapMany","wrapAtLeastOne","isRecording","IS_RECORDING","unorderedGroups","getRuleStack","wrapSelfAnalysis","LangiumParser","nodeBuilder","assignmentMap","linker","references","Linker","converter","astReflection","fragment","ruleMethod","DEFINE_RULE","startImplementation","bind","mainRule","parse","lexerResult","clear","lexerErrors","parserErrors","err","wrapConsume","isValidToken","assignment","isCrossRef","getAssignment","convertedValue","convert","operator","subruleResult","wrapSubrule","performSubruleAssignment","resultKind","assignWithoutOverride","newItem","typeMetaData","genericNode","assignMandatoryProperties","buildReference","existingValue","newValue","AbstractParserErrorMessageProvider","LangiumParserErrorMessageProvider","LangiumCompletionParser","elementStack","lastElementStack","nextTokenIndex","stackSize","resetState","tokenIndex","keepStackSize","resetStackSize","removeUnexpectedElements","before","after","defaultConfig","useDefaultLookahead","createParser","parserContext","reachable","parserRules","buildElement","buildRules","method","ignoreGuard","buildKeyword","buildAction","buildCrossReference","ruleCall","namedArgs","buildPredicate","ruleArgs","ruleTarget","buildRuleCallPredicate","getRule","getToken","buildRuleCall","methods","predicatedMethod","getGuardCondition","buildAlternatives","orIdx","idFunc","lParser","groupState","trackedAlternatives","wrapped","delete","buildUnorderedGroup","buildGroup","condition","isConjunction","isNegation","isParameterReference","isBooleanLiteral","true","guardCondition","crossRef","assignTerminal","getRuleName","createLangiumParser","prepareLangiumParser","buildTokens","reachableRules","buildTerminalTokens","terminalToken","buildTerminalToken","requiresCustomPattern","regexPatternFunction","stickyRegex","sort","buildKeywordToken","buildKeywordPattern","findLongerAlt","getCaseInsensitivePattern","longerAlts","nameAssigment","getCrossReferenceTerminal","convertInt","convertString","convertID","_c","getRuleType","convertNumber","convertBoolean","convertBigint","convertDate","convertEscapeCharacter","BigInt","lastTick","globalInterruptionPeriod","OperationCancelled","isOperationCancelled","async","interruptAndCheck","CancellationToken","now","Promise","resolve","setImmediate","setTimeout","isCancellationRequested","Deferred","promise","arg","isIncremental","getWellformedRange","addedLineOffsets","computeLineOffsets","isFull","ensureBeforeEOL","isEOL","rangeLength","isAtLineStart","textOffset","getWellformedEdit","spans","r","o","h","cwd","normalize","isAbsolute","relative","f","l","_makeLong","dirname","basename","extname","format","dir","base","ext","delimiter","win32","posix","toStringTag","platform","navigator","userAgent","scheme","authority","query","isUri","fsPath","with","m","C","file","y","toJSON","revive","_formatted","external","_fsPath","_sep","$mid","encodeURIComponent","decodeURIComponent","w","A","P","joinPath","resolvePath","UriUtils","DocumentState","Utils","equals","fromPath","toPath","fromParts","split","toParts","repeat","DefaultLangiumDocumentFactory","serviceRegistry","textDocuments","workspace","TextDocuments","fileSystemProvider","FileSystemProvider","fromUri","cancellationToken","readFile","createAsync","fromTextDocument","fromString","fromModel","model","$model","parseResult","createLangiumDocument","cancelToken","parseAsync","Parsed","textDocumentGetter","createTextDocumentGetter","oldText","getServices","AsyncParser","textDoc","DefaultLangiumDocuments","documentMap","langiumDocumentFactory","LangiumDocumentFactory","all","addDocument","uriString","getOrCreateDocument","createDocument","then","hasDocument","invalidateDocument","langiumDoc","Changed","precomputedScopes","deleteDocument","DefaultLinker","langiumDocuments","LangiumDocuments","scopeProvider","ScopeProvider","astNodeLocator","AstNodeLocator","link","doLink","getCandidate","_nodeDescription","documentUri","linkedNode","loadAstNode","createLinkingError","unlink","getScope","getElement","refNode","refText","$refNode","refData","getLinkedNode","ComputedScopes","descr","$nodeDescription","nodeDescription","doc","getAstNode","targetDescription","referenceType","DefaultNameProvider","getName","isNamed","getNameNode","DefaultReferences","nameProvider","NameProvider","IndexManager","nodeLocator","findDeclaration","sourceCstNode","findAssignment","nodeElem","nameNode","isChildNode","findDeclarationNode","targetNode","findReferences","refs","includeDeclaration","getReferenceToSelf","indexReferences","findAllReferences","getAstNodePath","sourceUri","sourcePath","segment","local","MultiMap","addAll","entriesGroupedByKey","BiMap","inverse","getKey","DefaultScopeComputation","descriptions","AstNodeDescriptionProvider","computeExports","computeExportsForNode","parentNode","exportNode","createDescription","computeLocalScopes","scopes","processNode","StreamScope","outerScope","getAllElements","MapScope","localName","elementStream","DisposableCache","toDispose","isDisposed","onDispose","disposable","throwIfDisposed","SimpleCache","provider","ContextCache","contextKey","cacheForContext","contextCache","documentCache","WorkspaceCache","sharedServices","DocumentBuilder","onUpdate","DefaultScopeProvider","indexManager","globalScopeCache","precomputed","currentNode","allDescriptions","desc","getGlobalScope","createScope","createScopeForNodes","_context","allElements","isIntermediateReference","DefaultJsonSerializer","ignoreProperties","commentProvider","CommentProvider","serialize","specificReplacer","replacer","defaultReplacer","currentDocument","space","deserialize","linkNode","sourceText","textRegions","comments","uriConverter","refValue","targetDocument","$ref","$error","addAstNodeRegionWithAssignmentsTo","$textRegion","documentURI","$sourceText","_d","comment","getComment","$comment","createDocumentSegment","assignments","propertyAssignments","findNodesForProperty","containerProperty","containerIndex","propertyName","reviveReference","mutable","getRefNode","fragmentIndex","DefaultServiceRegistry","singleton","diagnosticData","ValidationCategory","DocumentValidator","Disposable","ValidationRegistry","checksRecord","thisObj","category","wrapValidationException","addEntry","getChecks","checks","DefaultDocumentValidator","validationRegistry","validation","metadata","validateDocument","processLexingErrors","stopAfterLexingErrors","LexingError","processParsingErrors","stopAfterParsingErrors","ParsingError","processLinkingErrors","stopAfterLinkingErrors","LinkingError","validateAst","lexerError","diagnostic","toDiagnosticSeverity","getSource","parserError","linkingError","info","containerType","toDiagnostic","validationItems","acceptor","getDiagnosticRange","findNodeForKeyword","DefaultAstNodeDescriptionProvider","nameNodeSegment","nameSegmentGetter","nameSegment","selectionSegment","DefaultReferenceDescriptionProvider","createDescriptions","targetNodeDescr","refCstNode","docUri","DefaultAstNodeLocator","segmentSeparator","indexSeparator","containerPath","newSegment","getPathSegment","currentValue","propertyIndex","DefaultConfigurationProvider","_ready","settings","workspaceConfig","ready","params","capabilities","configuration","initialized","languages","section","lang","toSectionName","fetchConfiguration","configToUpdate","conf","updateSectionConfiguration","updateConfiguration","getConfiguration","sectionName","DefaultDocumentBuilder","updateBuildOptions","updateListeners","buildPhaseListeners","buildState","documentBuildWaiters","currentState","build","documents","Validated","IndexedReferences","previousCategories","validationChecks","completed","emitUpdate","buildDocuments","changed","deleted","deletedUri","changedUri","newDocument","allChangedUris","shouldRelink","rebuildDocuments","Linked","changedUris","isAffected","prepareBuild","runCancelable","IndexedContent","updateContent","scopeComputation","ScopeComputation","updateReferences","toBeValidated","shouldValidate","targetState","filtered","notifyBuildPhase","onBuildPhase","waitUntil","uriOrToken","buildDisposable","cancelDisposable","onCancellationRequested","listeners","getBuildOptions","validator","validationSetting","DefaultIndexManager","symbolIndex","symbolByTypeIndex","referenceIndex","astNodePath","targetDocUri","docRefs","refDescr","nodeType","uris","documentUris","getFileDescriptions","indexData","ReferenceDescriptionProvider","DefaultWorkspaceManager","initialBuildOptions","documentBuilder","mutex","WorkspaceLock","folders","workspaceFolders","_params","write","initializeWorkspace","performStartup","collector","loadAdditionalDocuments","wf","getRootFolder","traverseFolder","_folders","_collector","workspaceFolder","folderPath","readDirectory","includeEntry","isDirectory","isFile","_workspaceFolder","DefaultLexer","toTokenTypeDictionary","lexerTokens","isTokenTypeDictionary","chevrotainLexer","ChevrotainLexer","chevrotainResult","isIMultiModeLexerDefinition","res","isTokenTypeArray","parseJSDoc","opts","currentLine","currentCharacter","lines","lastCharacter","skipWhitespace","tagRegex","tagMatch","fullMatch","inlineTagMatches","matchAll","inlineTagRegex","buildInlineTokens","getLines","normalizeOptions","startPosition","JSDocCommentImpl","parseJSDocElement","parseJSDocComment","lineIndex","characterIndex","matchIndex","startContent","tagName","endContent","nonWhitespaceRegex","whitespaceEndRegex","parseJSDocTag","parseJSDocText","JSDocLineImpl","inlines","appendEmptyLine","firstToken","lastToken","parseJSDocInline","JSDocTextImpl","parseJSDocLine","inline","tagToken","docLine","JSDocTagImpl","normalizeOption","escaped","getTag","getAllTags","getTags","fillNewlines","toMarkdown","renderTag","toMarkdownDefault","rendered","tag","display","displayStart","renderedLink","renderLink","renderLinkDefault","renderInlineTag","marker","JSDocDocumentationProvider","getDocumentation","normalizedOptions","firstRegex","lastRegex","isJSDoc","documentationLinkRenderer","documentationTagRenderer","findNameInPrecomputedScopes","findNameInGlobalScope","_node","_tag","DefaultCommentProvider","grammarConfig","GrammarConfig","isAstNodeWithComment","multilineCommentRules","DefaultAsyncParser","syncParser","DefaultWorkspaceLock","previousTokenSource","CancellationTokenSource","writeQueue","readQueue","cancelWrite","tokenSource","enqueue","read","queue","deferred","performNextOperation","shift","cancel","DefaultHydrator","grammarElementIdMap","tokenTypeIdMap","dehydrate","dehydrateAstNode","createDehyrationContext","astNodes","cstNodes","dehydrateCstNode","arr","dehydrateReference","getGrammarElementId","hydrate","createHydrationContext","hydrateCstNode","hydrateAstNode","hydrateCstLeafNode","setParent","hydrateReference","num","cstNodeObj","getGrammarElement","hydrated","getTokenType","createGrammarElementIdMap","id","DocumentationProvider","nameRegexp","createGrammarConfig","CompletionParser","createCompletionParser","References","serializer","Hydrator","JsonSerializer","WorkspaceManager","ConfigurationProvider","module1","module2","module3","module4","module5","module6","module7","module8","module9","_inject","_merge","merge","m1","m2","isProxy","module","injector","proxy","Proxy","deleteProperty","_resolve","ownKeys","Reflect","__requested__","cause","value2","value1","EmptyFileSystemProvider","minimalGrammarModule","minimalSharedGrammarModule","json","createMinimalGrammarServices","reWhitespace","reTrimStart","trimmedEndIndex","reIsBadHex","reIsBinary","reIsOctal","freeParseInt","valueOf","baseTrim","isBinary","INFINITY","toNumber","parsers","initializers","createInfoServices","createInfoServices2","Info","packet","createPacketServices","createPacketServices2","Packet","pie","createPieServices2","architecture","createArchitectureServices2","gitGraph","createGitGraphServices2","diagramType","MermaidParseError","PacketTokenBuilder","PacketModule","baseExtremum","baseLt","baseClone","events_1","Cancelled","shortcutEvent","MutableToken","_isCancelled","_emitter","_token","InfoTokenBuilder","InfoModule","customizer","castPath","toKey","objValue","isIndex","paths","baseGet","baseSet","objectProto","sources","keysIn","propsIndex","propsLength","eq"],"sourceRoot":""}